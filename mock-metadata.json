{
  "magicNumber": 1635018093,
  "metadata": {
    "v12": {
      "modules": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "AccountId",
                    "value": "AccountInfo",
                    "linked": false
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00",
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": "ExtrinsicsWeight"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00",
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "BlockNumber",
                    "value": "Hash",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "u32",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": "BlockNumber"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": "Hash"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "ExtrinsicsRoot",
                "modifier": "Default",
                "type": {
                  "plain": "Hash"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Extrinsics root of the current block, also part of the block header."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": "DigestOf"
                },
                "fallback": "0x00",
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<EventRecord>"
                },
                "fallback": "0x00",
                "docs": [
                  " Events deposited for the current block."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": "EventIndex"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "Hash",
                    "value": "Vec<(BlockNumber,EventIndex)>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": "LastRuntimeUpgradeInfo"
                },
                "fallback": "0x00",
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": "bool"
                },
                "fallback": "0x00",
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": "Phase"
                },
                "fallback": "0x00",
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "fill_block",
              "args": [
                {
                  "name": "_ratio",
                  "type": "Perbill"
                }
              ],
              "docs": [
                " A dispatch that will fill the block weight up to the given ratio."
              ]
            },
            {
              "name": "remark",
              "args": [
                {
                  "name": "_remark",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Make some on-chain remark.",
                "",
                " # <weight>",
                " - `O(1)`",
                " - Base Weight: 0.665 µs, independent of remark length.",
                " - No DB operations.",
                " # </weight>"
              ]
            },
            {
              "name": "set_heap_pages",
              "args": [
                {
                  "name": "pages",
                  "type": "u64"
                }
              ],
              "docs": [
                " Set the number of pages in the WebAssembly environment's heap.",
                "",
                " # <weight>",
                " - `O(1)`",
                " - 1 storage write.",
                " - Base Weight: 1.405 µs",
                " - 1 write to HEAP_PAGES",
                " # </weight>"
              ]
            },
            {
              "name": "set_code",
              "args": [
                {
                  "name": "code",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Set the new runtime code.",
                "",
                " # <weight>",
                " - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                " - 1 storage write (codec `O(C)`).",
                " - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).",
                " - 1 event.",
                " The weight of this function is dependent on the runtime, but generally this is very expensive.",
                " We will treat this as a full block.",
                " # </weight>"
              ]
            },
            {
              "name": "set_code_without_checks",
              "args": [
                {
                  "name": "code",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Set the new runtime code without doing any checks of the given `code`.",
                "",
                " # <weight>",
                " - `O(C)` where `C` length of `code`",
                " - 1 storage write (codec `O(C)`).",
                " - 1 event.",
                " The weight of this function is dependent on the runtime. We will treat this as a full block.",
                " # </weight>"
              ]
            },
            {
              "name": "set_changes_trie_config",
              "args": [
                {
                  "name": "changes_trie_config",
                  "type": "Option<ChangesTrieConfiguration>"
                }
              ],
              "docs": [
                " Set the new changes trie configuration.",
                "",
                " # <weight>",
                " - `O(1)`",
                " - 1 storage write or delete (codec `O(1)`).",
                " - 1 call to `deposit_log`: Uses `append` API, so O(1)",
                " - Base Weight: 7.218 µs",
                " - DB Weight:",
                "     - Writes: Changes Trie, System Digest",
                " # </weight>"
              ]
            },
            {
              "name": "set_storage",
              "args": [
                {
                  "name": "items",
                  "type": "Vec<KeyValue>"
                }
              ],
              "docs": [
                " Set some items of storage.",
                "",
                " # <weight>",
                " - `O(I)` where `I` length of `items`",
                " - `I` storage writes (`O(1)`).",
                " - Base Weight: 0.568 * i µs",
                " - Writes: Number of items",
                " # </weight>"
              ]
            },
            {
              "name": "kill_storage",
              "args": [
                {
                  "name": "keys",
                  "type": "Vec<Key>"
                }
              ],
              "docs": [
                " Kill some items from storage.",
                "",
                " # <weight>",
                " - `O(IK)` where `I` length of `keys` and `K` length of one key",
                " - `I` storage deletions.",
                " - Base Weight: .378 * i µs",
                " - Writes: Number of items",
                " # </weight>"
              ]
            },
            {
              "name": "kill_prefix",
              "args": [
                {
                  "name": "prefix",
                  "type": "Key"
                },
                {
                  "name": "_subkeys",
                  "type": "u32"
                }
              ],
              "docs": [
                " Kill all storage items with a key that starts with the given prefix.",
                "",
                " **NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                " the prefix we are removing to accurately calculate the weight of this function.",
                "",
                " # <weight>",
                " - `O(P)` where `P` amount of keys with prefix `prefix`",
                " - `P` storage deletions.",
                " - Base Weight: 0.834 * P µs",
                " - Writes: Number of subkeys + 1",
                " # </weight>"
              ]
            },
            {
              "name": "suicide",
              "args": [],
              "docs": [
                " Kill the sending account, assuming there are no references outstanding and the composite",
                " data is equal to its default value.",
                "",
                " # <weight>",
                " - `O(1)`",
                " - 1 storage read and deletion.",
                " --------------------",
                " Base Weight: 8.626 µs",
                " No DB Read or Write operations because caller is already in overlay",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "ExtrinsicSuccess",
              "args": [
                "DispatchInfo"
              ],
              "docs": [
                " An extrinsic completed successfully. \\[info\\]"
              ]
            },
            {
              "name": "ExtrinsicFailed",
              "args": [
                "DispatchError",
                "DispatchInfo"
              ],
              "docs": [
                " An extrinsic failed. \\[error, info\\]"
              ]
            },
            {
              "name": "CodeUpdated",
              "args": [],
              "docs": [
                " `:code` was updated."
              ]
            },
            {
              "name": "NewAccount",
              "args": [
                "AccountId"
              ],
              "docs": [
                " A new \\[account\\] was created."
              ]
            },
            {
              "name": "KilledAccount",
              "args": [
                "AccountId"
              ],
              "docs": [
                " An \\[account\\] was reaped."
              ]
            }
          ],
          "constants": [
            {
              "name": "BlockHashCount",
              "type": "BlockNumber",
              "value": "0xfa000000",
              "docs": [
                " The maximum number of blocks to allow in mortal eras."
              ]
            },
            {
              "name": "MaximumBlockWeight",
              "type": "Weight",
              "value": "0x00204aa9d1010000",
              "docs": [
                " The maximum weight of a block."
              ]
            },
            {
              "name": "DbWeight",
              "type": "RuntimeDbWeight",
              "value": "0x40787d010000000000e1f50500000000",
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "BlockExecutionWeight",
              "type": "Weight",
              "value": "0x00f2052a01000000",
              "docs": [
                " The base weight of executing a block, independent of the transactions in the block."
              ]
            },
            {
              "name": "ExtrinsicBaseWeight",
              "type": "Weight",
              "value": "0x4059730700000000",
              "docs": [
                " The base weight of an Extrinsic in the block, independent of the of extrinsic being executed."
              ]
            },
            {
              "name": "MaximumBlockLength",
              "type": "u32",
              "value": "0x00005000",
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            }
          ],
          "errors": [
            {
              "name": "InvalidSpecName",
              "docs": [
                " The name of specification does not match between the current runtime",
                " and the new runtime."
              ]
            },
            {
              "name": "SpecVersionNeedsToIncrease",
              "docs": [
                " The specification version is not allowed to decrease between the current runtime",
                " and the new runtime."
              ]
            },
            {
              "name": "FailedToExtractRuntimeVersion",
              "docs": [
                " Failed to extract the runtime version from the new runtime.",
                "",
                " Either calling `Core_version` or decoding `RuntimeVersion` failed."
              ]
            },
            {
              "name": "NonDefaultComposite",
              "docs": [
                " Suicide called when the account has non-default composite data."
              ]
            },
            {
              "name": "NonZeroRefCount",
              "docs": [
                " There is a non-zero reference count preventing the account from being purged."
              ]
            }
          ],
          "index": 0
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": [
            {
              "name": "batch",
              "args": [
                {
                  "name": "calls",
                  "type": "Vec<Call>"
                }
              ],
              "docs": [
                " Send a batch of dispatch calls.",
                "",
                " May be called from any origin.",
                "",
                " - `calls`: The calls to be dispatched from the same origin.",
                "",
                " If origin is root then call are dispatch without checking origin filter. (This includes",
                " bypassing `frame_system::Trait::BaseCallFilter`).",
                "",
                " # <weight>",
                " - Base weight: 14.39 + .987 * c µs",
                " - Plus the sum of the weights of the `calls`.",
                " - Plus one additional event. (repeat read/write)",
                " # </weight>",
                "",
                " This will return `Ok` in all circumstances. To determine the success of the batch, an",
                " event is deposited. If a call failed and the batch was interrupted, then the",
                " `BatchInterrupted` event is deposited, along with the number of successful calls made",
                " and the error of the failed call. If all were successful, then the `BatchCompleted`",
                " event is deposited."
              ]
            },
            {
              "name": "as_derivative",
              "args": [
                {
                  "name": "index",
                  "type": "u16"
                },
                {
                  "name": "call",
                  "type": "Call"
                }
              ],
              "docs": [
                " Send a call through an indexed pseudonym of the sender.",
                "",
                " Filter from origin are passed along. The call will be dispatched with an origin which",
                " use the same filter as the origin of this call.",
                "",
                " NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                " because you expect `proxy` to have been used prior in the call stack and you do not want",
                " the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                " in the Multisig pallet instead.",
                "",
                " NOTE: Prior to version *12, this was called `as_limited_sub`.",
                "",
                " The dispatch origin for this call must be _Signed_."
              ]
            }
          ],
          "events": [
            {
              "name": "BatchInterrupted",
              "args": [
                "u32",
                "DispatchError"
              ],
              "docs": [
                " Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                " well as the error. \\[index, error\\]"
              ]
            },
            {
              "name": "BatchCompleted",
              "args": [],
              "docs": [
                " Batch of dispatches completed fully with no error."
              ]
            }
          ],
          "constants": [],
          "errors": [],
          "index": 1
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "items": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<(AuthorityId,BabeAuthorityWeight)>"
                },
                "fallback": "0x00",
                "docs": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "type": {
                  "plain": "Randomness"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "NextEpochConfig",
                "modifier": "Optional",
                "type": {
                  "plain": "NextConfigDescriptor"
                },
                "fallback": "0x00",
                "docs": [
                  " Next epoch configuration, if changed."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "type": {
                  "plain": "Randomness"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Randomness under construction.",
                  "",
                  " We make a tradeoff between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "u32",
                    "value": "Vec<Randomness>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                ]
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "type": {
                  "plain": "MaybeRandomness"
                },
                "fallback": "0x00",
                "docs": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "type": {
                  "plain": "BlockNumber"
                },
                "fallback": "0x00000000",
                "docs": [
                  " How late the current block is compared to its parent.",
                  "",
                  " This entry is populated as part of block execution and is cleaned up",
                  " on block finalization. Querying this storage entry outside of block",
                  " execution context should always yield zero."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "report_equivocation",
              "args": [
                {
                  "name": "equivocation_proof",
                  "type": "BabeEquivocationProof"
                },
                {
                  "name": "key_owner_proof",
                  "type": "KeyOwnerProof"
                }
              ],
              "docs": [
                " Report authority equivocation/misbehavior. This method will verify",
                " the equivocation proof and validate the given key ownership proof",
                " against the extracted offender. If both are valid, the offence will",
                " be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "args": [
                {
                  "name": "equivocation_proof",
                  "type": "BabeEquivocationProof"
                },
                {
                  "name": "key_owner_proof",
                  "type": "KeyOwnerProof"
                }
              ],
              "docs": [
                " Report authority equivocation/misbehavior. This method will verify",
                " the equivocation proof and validate the given key ownership proof",
                " against the extracted offender. If both are valid, the offence will",
                " be reported.",
                " This extrinsic must be called unsigned and it is expected that only",
                " block authors will call it (validated in `ValidateUnsigned`), as such",
                " if the block author is defined it will be defined as the equivocation",
                " reporter."
              ]
            }
          ],
          "events": null,
          "constants": [
            {
              "name": "EpochDuration",
              "type": "u64",
              "value": "0x6400000000000000",
              "docs": [
                " The number of **slots** that an epoch takes. We couple sessions to",
                " epochs, i.e. we start a new session once the new epoch begins."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "type": "Moment",
              "value": "0x7017000000000000",
              "docs": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            }
          ],
          "errors": [],
          "index": 2
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": "Moment"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": "bool"
                },
                "fallback": "0x00",
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set",
              "args": [
                {
                  "name": "now",
                  "type": "Compact<Moment>"
                }
              ],
              "docs": [
                " Set the current time.",
                "",
                " This call should be invoked exactly once per block. It will panic at the finalization",
                " phase, if this call hasn't been invoked by that time.",
                "",
                " The timestamp should be greater than the previous one by the amount specified by",
                " `MinimumPeriod`.",
                "",
                " The dispatch origin for this call must be `Inherent`.",
                "",
                " # <weight>",
                " - `O(T)` where `T` complexity of `on_timestamp_set`",
                " - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)",
                " - 1 event handler `on_timestamp_set` `O(T)`.",
                " # </weight>"
              ]
            }
          ],
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": "Moment",
              "value": "0xb80b000000000000",
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected* period",
                " that the block production apparatus provides. Your chosen consensus system will generally",
                " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                " period on default settings."
              ]
            }
          ],
          "errors": [],
          "index": 3
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<UncleEntryItem>"
                },
                "fallback": "0x00",
                "docs": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "plain": "AccountId"
                },
                "fallback": "0x00",
                "docs": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "type": {
                  "plain": "bool"
                },
                "fallback": "0x00",
                "docs": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set_uncles",
              "args": [
                {
                  "name": "new_uncles",
                  "type": "Vec<Header>"
                }
              ],
              "docs": [
                " Provide a set of uncles."
              ]
            }
          ],
          "events": null,
          "constants": [],
          "errors": [
            {
              "name": "InvalidUncleParent",
              "docs": [
                " The uncle parent not in the chain."
              ]
            },
            {
              "name": "UnclesAlreadySet",
              "docs": [
                " Uncles already set in the block."
              ]
            },
            {
              "name": "TooManyUncles",
              "docs": [
                " Too many uncles."
              ]
            },
            {
              "name": "GenesisUncle",
              "docs": [
                " The uncle is genesis."
              ]
            },
            {
              "name": "TooHighUncle",
              "docs": [
                " The uncle is too high in chain."
              ]
            },
            {
              "name": "UncleAlreadyIncluded",
              "docs": [
                " The uncle is already included."
              ]
            },
            {
              "name": "OldUncle",
              "docs": [
                " The uncle isn't recent enough to be included."
              ]
            }
          ],
          "index": 4
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": "Balance"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "AccountId",
                    "value": "AccountData",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The balance of an account.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "AccountId",
                    "value": "Vec<BalanceLock>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": "Releases"
                },
                "fallback": "0x00",
                "docs": [
                  " Storage version of the pallet.",
                  "",
                  " This is set to v2.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "transfer",
              "args": [
                {
                  "name": "dest",
                  "type": "LookupSource"
                },
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                }
              ],
              "docs": [
                " Transfer some liquid free balance to another account.",
                "",
                " `transfer` will set the `FreeBalance` of the sender and receiver.",
                " It will decrease the total issuance of the system by the `TransferFee`.",
                " If the sender's account is below the existential deposit as a result",
                " of the transfer, the account will be reaped.",
                "",
                " The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                " # <weight>",
                " - Dependent on arguments but not critical, given proper implementations for",
                "   input config types. See related functions below.",
                " - It contains a limited number of reads and writes internally and no complex computation.",
                "",
                " Related functions:",
                "",
                "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                "   - Transferring balances to accounts that did not exist before will cause",
                "      `T::OnNewAccount::on_new_account` to be called.",
                "   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                "     check that the transfer will not kill the origin account.",
                " ---------------------------------",
                " - Base Weight: 73.64 µs, worst case scenario (account created, account removed)",
                " - DB Weight: 1 Read and 1 Write to destination account",
                " - Origin account is already in memory, so no DB operations for them.",
                " # </weight>"
              ]
            },
            {
              "name": "set_balance",
              "args": [
                {
                  "name": "who",
                  "type": "LookupSource"
                },
                {
                  "name": "new_free",
                  "type": "Compact<Balance>"
                },
                {
                  "name": "new_reserved",
                  "type": "Compact<Balance>"
                }
              ],
              "docs": [
                " Set the balances of a given account.",
                "",
                " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                " also decrease the total issuance of the system (`TotalIssuance`).",
                " If the new free or reserved balance is below the existential deposit,",
                " it will reset the account nonce (`frame_system::AccountNonce`).",
                "",
                " The dispatch origin for this call is `root`.",
                "",
                " # <weight>",
                " - Independent of the arguments.",
                " - Contains a limited number of reads and writes.",
                " ---------------------",
                " - Base Weight:",
                "     - Creating: 27.56 µs",
                "     - Killing: 35.11 µs",
                " - DB Weight: 1 Read, 1 Write to `who`",
                " # </weight>"
              ]
            },
            {
              "name": "force_transfer",
              "args": [
                {
                  "name": "source",
                  "type": "LookupSource"
                },
                {
                  "name": "dest",
                  "type": "LookupSource"
                },
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                }
              ],
              "docs": [
                " Exactly as `transfer`, except the origin must be root and the source account may be",
                " specified.",
                " # <weight>",
                " - Same as transfer, but additional read and write because the source account is",
                "   not assumed to be in the overlay.",
                " # </weight>"
              ]
            },
            {
              "name": "transfer_keep_alive",
              "args": [
                {
                  "name": "dest",
                  "type": "LookupSource"
                },
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                }
              ],
              "docs": [
                " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                " origin account.",
                "",
                " 99% of the time you want [`transfer`] instead.",
                "",
                " [`transfer`]: struct.Module.html#method.transfer",
                " # <weight>",
                " - Cheaper than transfer because account cannot be killed.",
                " - Base Weight: 51.4 µs",
                " - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
                " #</weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Endowed",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " An account was created with some free balance. \\[account, free_balance\\]"
              ]
            },
            {
              "name": "DustLost",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " An account was removed whose balance was non-zero but below ExistentialDeposit,",
                " resulting in an outright loss. \\[account, balance\\]"
              ]
            },
            {
              "name": "Transfer",
              "args": [
                "AccountId",
                "AccountId",
                "Balance"
              ],
              "docs": [
                " Transfer succeeded. \\[from, to, value\\]"
              ]
            },
            {
              "name": "BalanceSet",
              "args": [
                "AccountId",
                "Balance",
                "Balance"
              ],
              "docs": [
                " A balance was set by root. \\[who, free, reserved\\]"
              ]
            },
            {
              "name": "Deposit",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " Some amount was deposited (e.g. for transaction fees). \\[who, deposit\\]"
              ]
            },
            {
              "name": "Reserved",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " Some balance was reserved (moved from free to reserved). \\[who, value\\]"
              ]
            },
            {
              "name": "Unreserved",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " Some balance was unreserved (moved from reserved to free). \\[who, value\\]"
              ]
            },
            {
              "name": "ReserveRepatriated",
              "args": [
                "AccountId",
                "AccountId",
                "Balance",
                "BalanceStatus"
              ],
              "docs": [
                " Some balance was moved from the reserve of the first account to the second account.",
                " Final argument indicates the destination balance type.",
                " \\[from, to, balance, destination_status\\]"
              ]
            }
          ],
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": "Balance",
              "value": "0x0a000000000000000000000000000000",
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            }
          ],
          "errors": [
            {
              "name": "VestingBalance",
              "docs": [
                " Vesting balance too high to send value"
              ]
            },
            {
              "name": "LiquidityRestrictions",
              "docs": [
                " Account liquidity restrictions prevent withdrawal"
              ]
            },
            {
              "name": "Overflow",
              "docs": [
                " Got an overflow after adding"
              ]
            },
            {
              "name": "InsufficientBalance",
              "docs": [
                " Balance too low to send value"
              ]
            },
            {
              "name": "ExistentialDeposit",
              "docs": [
                " Value too low to create account due to existential deposit"
              ]
            },
            {
              "name": "KeepAlive",
              "docs": [
                " Transfer/payment would kill account"
              ]
            },
            {
              "name": "ExistingVestingSchedule",
              "docs": [
                " A vesting schedule already exists for this account"
              ]
            },
            {
              "name": "DeadAccount",
              "docs": [
                " Beneficiary account must pre-exist"
              ]
            }
          ],
          "index": 5
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": "Multiplier"
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": "Releases"
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "type": "BalanceOf",
              "value": "0x01000000000000000000000000000000",
              "docs": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            },
            {
              "name": "WeightToFee",
              "type": "Vec<WeightToFeeCoefficient>",
              "value": "0x0400000000000000000000000000000000a00000000001",
              "docs": [
                " The polynomial that is applied in order to derive fee from weight."
              ]
            }
          ],
          "errors": [],
          "index": 6
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "items": [
              {
                "name": "HistoryDepth",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x54000000",
                "docs": [
                  " Number of eras to keep in history.",
                  "",
                  " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                  "",
                  " Must be more than the number of eras delayed by session otherwise. I.e. active era must",
                  " always be in history. I.e. `active_era > current_era - history_depth` must be",
                  " guaranteed."
                ]
              },
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The ideal number of staking participants."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<AccountId>"
                },
                "fallback": "0x00",
                "docs": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "AccountId",
                    "value": "AccountId",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all locked \"stash\" accounts to the controller account."
                ]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "AccountId",
                    "value": "StakingLedger",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "AccountId",
                    "value": "RewardDestination",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Where the reward payment should be made. Keyed by stash."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "AccountId",
                    "value": "ValidatorPrefs",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The map from (wannabe) validator stash key to the preferences of that validator."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "AccountId",
                    "value": "Nominations",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The map from nominator stash key to the set of stash keys of all validators to nominate."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "type": {
                  "plain": "EraIndex"
                },
                "fallback": "0x00",
                "docs": [
                  " The current era index.",
                  "",
                  " This is the latest planned era, depending on how the Session pallet queues the validator",
                  " set, it might be active or not."
                ]
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "type": {
                  "plain": "ActiveEraInfo"
                },
                "fallback": "0x00",
                "docs": [
                  " The active era information, it holds index and start.",
                  "",
                  " The active era is the era currently rewarded.",
                  " Validator set of this era must be equal to `SessionInterface::validators`."
                ]
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "EraIndex",
                    "value": "SessionIndex",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The session index at which the era start for the last `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "Exposure",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x000000",
                "docs": [
                  " Exposure of validator at era.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "Exposure",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x000000",
                "docs": [
                  " Clipped Exposure of validator at era.",
                  "",
                  " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                  " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                  " (Note: the field `total` and `own` of the exposure remains unchanged).",
                  " This is used to limit the i/o cost for the nominator payout.",
                  "",
                  " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras.",
                  " If stakers hasn't been set or has been removed then empty exposure is returned."
                ]
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "ValidatorPrefs",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Similar to `ErasStakers`, this holds the preferences of validators.",
                  "",
                  " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                  "",
                  " Is it removed after `HISTORY_DEPTH` eras."
                ]
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "EraIndex",
                    "value": "BalanceOf",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                  "",
                  " Eras that haven't finished yet or has been removed doesn't have reward."
                ]
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "EraIndex",
                    "value": "EraRewardPoints",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000",
                "docs": [
                  " Rewards for the last `HISTORY_DEPTH` eras.",
                  " If reward hasn't been set or has been removed then 0 reward is returned."
                ]
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "EraIndex",
                    "value": "BalanceOf",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The total amount staked for the last `HISTORY_DEPTH` eras.",
                  " If total hasn't been set or has been removed then 0 stake is returned."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "type": {
                  "plain": "Forcing"
                },
                "fallback": "0x00",
                "docs": [
                  " Mode of era forcing."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "type": {
                  "plain": "Perbill"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "EraIndex",
                    "value": "Vec<UnappliedSlash>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<(EraIndex,SessionIndex)>"
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from still-bonded eras to the first session index of that era.",
                  "",
                  " Must contains information for eras for the range:",
                  " `[active_era - bounding_duration; active_era]`"
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "(Perbill,BalanceOf)",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "BalanceOf",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "AccountId",
                    "value": "SlashingSpans",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "(AccountId,SpanIndex)",
                    "value": "SpanRecord",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "EarliestUnappliedSlash",
                "modifier": "Optional",
                "type": {
                  "plain": "EraIndex"
                },
                "fallback": "0x00",
                "docs": [
                  " The earliest era for which we have a pending, unapplied slash."
                ]
              },
              {
                "name": "SnapshotValidators",
                "modifier": "Optional",
                "type": {
                  "plain": "Vec<AccountId>"
                },
                "fallback": "0x00",
                "docs": [
                  " Snapshot of validators at the beginning of the current election window. This should only",
                  " have a value when [`EraElectionStatus`] == `ElectionStatus::Open(_)`."
                ]
              },
              {
                "name": "SnapshotNominators",
                "modifier": "Optional",
                "type": {
                  "plain": "Vec<AccountId>"
                },
                "fallback": "0x00",
                "docs": [
                  " Snapshot of nominators at the beginning of the current election window. This should only",
                  " have a value when [`EraElectionStatus`] == `ElectionStatus::Open(_)`."
                ]
              },
              {
                "name": "QueuedElected",
                "modifier": "Optional",
                "type": {
                  "plain": "ElectionResult"
                },
                "fallback": "0x00",
                "docs": [
                  " The next validator set. At the end of an era, if this is available (potentially from the",
                  " result of an offchain worker), it is immediately used. Otherwise, the on-chain election",
                  " is executed."
                ]
              },
              {
                "name": "QueuedScore",
                "modifier": "Optional",
                "type": {
                  "plain": "ElectionScore"
                },
                "fallback": "0x00",
                "docs": [
                  " The score of the current [`QueuedElected`]."
                ]
              },
              {
                "name": "EraElectionStatus",
                "modifier": "Default",
                "type": {
                  "plain": "ElectionStatus"
                },
                "fallback": "0x00",
                "docs": [
                  " Flag to control the execution of the offchain election. When `Open(_)`, we accept",
                  " solutions to be submitted."
                ]
              },
              {
                "name": "IsCurrentSessionFinal",
                "modifier": "Default",
                "type": {
                  "plain": "bool"
                },
                "fallback": "0x00",
                "docs": [
                  " True if the current **planned** session is final. Note that this does not take era",
                  " forcing into account."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": "Releases"
                },
                "fallback": "0x03",
                "docs": [
                  " True if network has been upgraded to this version.",
                  " Storage version of the pallet.",
                  "",
                  " This is set to v3.0.0 for new networks."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "bond",
              "args": [
                {
                  "name": "controller",
                  "type": "LookupSource"
                },
                {
                  "name": "value",
                  "type": "Compact<BalanceOf>"
                },
                {
                  "name": "payee",
                  "type": "RewardDestination"
                }
              ],
              "docs": [
                " Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                " be the account that controls it.",
                "",
                " `value` must be more than the `minimum_balance` specified by `T::Currency`.",
                "",
                " The dispatch origin for this call must be _Signed_ by the stash account.",
                "",
                " Emits `Bonded`.",
                "",
                " # <weight>",
                " - Independent of the arguments. Moderate complexity.",
                " - O(1).",
                " - Three extra DB entries.",
                "",
                " NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                " unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                " ------------------",
                " Weight: O(1)",
                " DB Weight:",
                " - Read: Bonded, Ledger, [Origin Account], Current Era, History Depth, Locks",
                " - Write: Bonded, Payee, [Origin Account], Locks, Ledger",
                " # </weight>"
              ]
            },
            {
              "name": "bond_extra",
              "args": [
                {
                  "name": "max_additional",
                  "type": "Compact<BalanceOf>"
                }
              ],
              "docs": [
                " Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                " for staking.",
                "",
                " Use this if there are additional funds in your stash account that you wish to bond.",
                " Unlike [`bond`] or [`unbond`] this function does not impose any limitation on the amount",
                " that can be added.",
                "",
                " The dispatch origin for this call must be _Signed_ by the stash, not the controller and",
                " it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " Emits `Bonded`.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - O(1).",
                " - One DB entry.",
                " ------------",
                " DB Weight:",
                " - Read: Era Election Status, Bonded, Ledger, [Origin Account], Locks",
                " - Write: [Origin Account], Locks, Ledger",
                " # </weight>"
              ]
            },
            {
              "name": "unbond",
              "args": [
                {
                  "name": "value",
                  "type": "Compact<BalanceOf>"
                }
              ],
              "docs": [
                " Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                " period ends. If this leaves an amount actively bonded less than",
                " T::Currency::minimum_balance(), then it is increased to the full amount.",
                "",
                " Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                " the funds out of management ready for transfer.",
                "",
                " No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                " can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                " to be called first to remove some of the chunks (if possible).",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " Emits `Unbonded`.",
                "",
                " See also [`Call::withdraw_unbonded`].",
                "",
                " # <weight>",
                " - Independent of the arguments. Limited but potentially exploitable complexity.",
                " - Contains a limited number of reads.",
                " - Each call (requires the remainder of the bonded balance to be above `minimum_balance`)",
                "   will cause a new entry to be inserted into a vector (`Ledger.unlocking`) kept in storage.",
                "   The only way to clean the aforementioned storage item is also user-controlled via",
                "   `withdraw_unbonded`.",
                " - One DB entry.",
                " ----------",
                " Weight: O(1)",
                " DB Weight:",
                " - Read: EraElectionStatus, Ledger, CurrentEra, Locks, BalanceOf Stash,",
                " - Write: Locks, Ledger, BalanceOf Stash,",
                " </weight>"
              ]
            },
            {
              "name": "withdraw_unbonded",
              "args": [
                {
                  "name": "num_slashing_spans",
                  "type": "u32"
                }
              ],
              "docs": [
                " Remove any unlocked chunks from the `unlocking` queue from our management.",
                "",
                " This essentially frees up that balance to be used by the stash account to do",
                " whatever it wants.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " Emits `Withdrawn`.",
                "",
                " See also [`Call::unbond`].",
                "",
                " # <weight>",
                " - Could be dependent on the `origin` argument and how much `unlocking` chunks exist.",
                "  It implies `consolidate_unlocked` which loops over `Ledger.unlocking`, which is",
                "  indirectly user-controlled. See [`unbond`] for more detail.",
                " - Contains a limited number of reads, yet the size of which could be large based on `ledger`.",
                " - Writes are limited to the `origin` account key.",
                " ---------------",
                " Complexity O(S) where S is the number of slashing spans to remove",
                " Update:",
                " - Reads: EraElectionStatus, Ledger, Current Era, Locks, [Origin Account]",
                " - Writes: [Origin Account], Locks, Ledger",
                " Kill:",
                " - Reads: EraElectionStatus, Ledger, Current Era, Bonded, Slashing Spans, [Origin",
                "   Account], Locks, BalanceOf stash",
                " - Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators,",
                "   [Origin Account], Locks, BalanceOf stash.",
                " - Writes Each: SpanSlash * S",
                " NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                " # </weight>"
              ]
            },
            {
              "name": "validate",
              "args": [
                {
                  "name": "prefs",
                  "type": "ValidatorPrefs"
                }
              ],
              "docs": [
                " Declare the desire to validate for the origin controller.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains a limited number of reads.",
                " - Writes are limited to the `origin` account key.",
                " -----------",
                " Weight: O(1)",
                " DB Weight:",
                " - Read: Era Election Status, Ledger",
                " - Write: Nominators, Validators",
                " # </weight>"
              ]
            },
            {
              "name": "nominate",
              "args": [
                {
                  "name": "targets",
                  "type": "Vec<LookupSource>"
                }
              ],
              "docs": [
                " Declare the desire to nominate `targets` for the origin controller.",
                "",
                " Effects will be felt at the beginning of the next era. This can only be called when",
                " [`EraElectionStatus`] is `Closed`.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - The transaction's complexity is proportional to the size of `targets` (N)",
                " which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                " - Both the reads and writes follow a similar pattern.",
                " ---------",
                " Weight: O(N)",
                " where N is the number of targets",
                " DB Weight:",
                " - Reads: Era Election Status, Ledger, Current Era",
                " - Writes: Validators, Nominators",
                " # </weight>"
              ]
            },
            {
              "name": "chill",
              "args": [],
              "docs": [
                " Declare no desire to either validate or nominate.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                " And, it can be only called when [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains one read.",
                " - Writes are limited to the `origin` account key.",
                " --------",
                " Weight: O(1)",
                " DB Weight:",
                " - Read: EraElectionStatus, Ledger",
                " - Write: Validators, Nominators",
                " # </weight>"
              ]
            },
            {
              "name": "set_payee",
              "args": [
                {
                  "name": "payee",
                  "type": "RewardDestination"
                }
              ],
              "docs": [
                " (Re-)set the payment target for a controller.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains a limited number of reads.",
                " - Writes are limited to the `origin` account key.",
                " ---------",
                " - Weight: O(1)",
                " - DB Weight:",
                "     - Read: Ledger",
                "     - Write: Payee",
                " # </weight>"
              ]
            },
            {
              "name": "set_controller",
              "args": [
                {
                  "name": "controller",
                  "type": "LookupSource"
                }
              ],
              "docs": [
                " (Re-)set the controller of a stash.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains a limited number of reads.",
                " - Writes are limited to the `origin` account key.",
                " ----------",
                " Weight: O(1)",
                " DB Weight:",
                " - Read: Bonded, Ledger New Controller, Ledger Old Controller",
                " - Write: Bonded, Ledger New Controller, Ledger Old Controller",
                " # </weight>"
              ]
            },
            {
              "name": "set_validator_count",
              "args": [
                {
                  "name": "new",
                  "type": "Compact<u32>"
                }
              ],
              "docs": [
                " Sets the ideal number of validators.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " Weight: O(1)",
                " Write: Validator Count",
                " # </weight>"
              ]
            },
            {
              "name": "increase_validator_count",
              "args": [
                {
                  "name": "additional",
                  "type": "Compact<u32>"
                }
              ],
              "docs": [
                " Increments the ideal number of validators.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " Same as [`set_validator_count`].",
                " # </weight>"
              ]
            },
            {
              "name": "scale_validator_count",
              "args": [
                {
                  "name": "factor",
                  "type": "Percent"
                }
              ],
              "docs": [
                " Scale up the ideal number of validators by a factor.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " Same as [`set_validator_count`].",
                " # </weight>"
              ]
            },
            {
              "name": "force_no_eras",
              "args": [],
              "docs": [
                " Force there to be no new eras indefinitely.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " - No arguments.",
                " - Weight: O(1)",
                " - Write: ForceEra",
                " # </weight>"
              ]
            },
            {
              "name": "force_new_era",
              "args": [],
              "docs": [
                " Force there to be a new era at the end of the next session. After this, it will be",
                " reset to normal (non-forced) behaviour.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " - No arguments.",
                " - Weight: O(1)",
                " - Write ForceEra",
                " # </weight>"
              ]
            },
            {
              "name": "set_invulnerables",
              "args": [
                {
                  "name": "invulnerables",
                  "type": "Vec<AccountId>"
                }
              ],
              "docs": [
                " Set the validators who cannot be slashed (if any).",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " - O(V)",
                " - Write: Invulnerables",
                " # </weight>"
              ]
            },
            {
              "name": "force_unstake",
              "args": [
                {
                  "name": "stash",
                  "type": "AccountId"
                },
                {
                  "name": "num_slashing_spans",
                  "type": "u32"
                }
              ],
              "docs": [
                " Force a current staker to become completely unstaked, immediately.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " O(S) where S is the number of slashing spans to be removed",
                " Reads: Bonded, Slashing Spans, Account, Locks",
                " Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Account, Locks",
                " Writes Each: SpanSlash * S",
                " # </weight>"
              ]
            },
            {
              "name": "force_new_era_always",
              "args": [],
              "docs": [
                " Force there to be a new era at the end of sessions indefinitely.",
                "",
                " The dispatch origin must be Root.",
                "",
                " # <weight>",
                " - Weight: O(1)",
                " - Write: ForceEra",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_deferred_slash",
              "args": [
                {
                  "name": "era",
                  "type": "EraIndex"
                },
                {
                  "name": "slash_indices",
                  "type": "Vec<u32>"
                }
              ],
              "docs": [
                " Cancel enactment of a deferred slash.",
                "",
                " Can be called by the `T::SlashCancelOrigin`.",
                "",
                " Parameters: era and indices of the slashes for that era to kill.",
                "",
                " # <weight>",
                " Complexity: O(U + S)",
                " with U unapplied slashes weighted with U=1000",
                " and S is the number of slash indices to be canceled.",
                " - Read: Unapplied Slashes",
                " - Write: Unapplied Slashes",
                " # </weight>"
              ]
            },
            {
              "name": "payout_stakers",
              "args": [
                {
                  "name": "validator_stash",
                  "type": "AccountId"
                },
                {
                  "name": "era",
                  "type": "EraIndex"
                }
              ],
              "docs": [
                " Pay out all the stakers behind a single validator for a single era.",
                "",
                " - `validator_stash` is the stash account of the validator. Their nominators, up to",
                "   `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                " - `era` may be any era between `[current_era - history_depth; current_era]`.",
                "",
                " The origin of this call must be _Signed_. Any account can call this function, even if",
                " it is not one of the stakers.",
                "",
                " This can only be called when [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                " - Contains a limited number of reads and writes.",
                " -----------",
                " N is the Number of payouts for the validator (including the validator)",
                " Weight:",
                " - Reward Destination Staked: O(N)",
                " - Reward Destination Controller (Creating): O(N)",
                " DB Weight:",
                " - Read: EraElectionStatus, CurrentEra, HistoryDepth, ErasValidatorReward,",
                "         ErasStakersClipped, ErasRewardPoints, ErasValidatorPrefs (8 items)",
                " - Read Each: Bonded, Ledger, Payee, Locks, System Account (5 items)",
                " - Write Each: System Account, Locks, Ledger (3 items)",
                "",
                "   NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                "   Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
                " # </weight>"
              ]
            },
            {
              "name": "rebond",
              "args": [
                {
                  "name": "value",
                  "type": "Compact<BalanceOf>"
                }
              ],
              "docs": [
                " Rebond a portion of the stash scheduled to be unlocked.",
                "",
                " The dispatch origin must be signed by the controller, and it can be only called when",
                " [`EraElectionStatus`] is `Closed`.",
                "",
                " # <weight>",
                " - Time complexity: O(L), where L is unlocking chunks",
                " - Bounded by `MAX_UNLOCKING_CHUNKS`.",
                " - Storage changes: Can't increase storage, only decrease it.",
                " ---------------",
                " - DB Weight:",
                "     - Reads: EraElectionStatus, Ledger, Locks, [Origin Account]",
                "     - Writes: [Origin Account], Locks, Ledger",
                " # </weight>"
              ]
            },
            {
              "name": "set_history_depth",
              "args": [
                {
                  "name": "new_history_depth",
                  "type": "Compact<EraIndex>"
                },
                {
                  "name": "_era_items_deleted",
                  "type": "Compact<u32>"
                }
              ],
              "docs": [
                " Set `HistoryDepth` value. This function will delete any history information",
                " when `HistoryDepth` is reduced.",
                "",
                " Parameters:",
                " - `new_history_depth`: The new history depth you would like to set.",
                " - `era_items_deleted`: The number of items that will be deleted by this dispatch.",
                "    This should report all the storage items that will be deleted by clearing old",
                "    era history. Needed to report an accurate weight for the dispatch. Trusted by",
                "    `Root` to report an accurate number.",
                "",
                " Origin must be root.",
                "",
                " # <weight>",
                " - E: Number of history depths removed, i.e. 10 -> 7 = 3",
                " - Weight: O(E)",
                " - DB Weight:",
                "     - Reads: Current Era, History Depth",
                "     - Writes: History Depth",
                "     - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                "     - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake, ErasStartSessionIndex",
                " # </weight>"
              ]
            },
            {
              "name": "reap_stash",
              "args": [
                {
                  "name": "stash",
                  "type": "AccountId"
                },
                {
                  "name": "num_slashing_spans",
                  "type": "u32"
                }
              ],
              "docs": [
                " Remove all data structure concerning a staker/stash once its balance is zero.",
                " This is essentially equivalent to `withdraw_unbonded` except it can be called by anyone",
                " and the target `stash` must have no funds left.",
                "",
                " This can be called from any origin.",
                "",
                " - `stash`: The stash account to reap. Its balance must be zero.",
                "",
                " # <weight>",
                " Complexity: O(S) where S is the number of slashing spans on the account.",
                " DB Weight:",
                " - Reads: Stash Account, Bonded, Slashing Spans, Locks",
                " - Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Stash Account, Locks",
                " - Writes Each: SpanSlash * S",
                " # </weight>"
              ]
            },
            {
              "name": "submit_election_solution",
              "args": [
                {
                  "name": "winners",
                  "type": "Vec<ValidatorIndex>"
                },
                {
                  "name": "compact",
                  "type": "CompactAssignments"
                },
                {
                  "name": "score",
                  "type": "ElectionScore"
                },
                {
                  "name": "era",
                  "type": "EraIndex"
                },
                {
                  "name": "size",
                  "type": "ElectionSize"
                }
              ],
              "docs": [
                " Submit an election result to the chain. If the solution:",
                "",
                " 1. is valid.",
                " 2. has a better score than a potentially existing solution on chain.",
                "",
                " then, it will be _put_ on chain.",
                "",
                " A solution consists of two pieces of data:",
                "",
                " 1. `winners`: a flat vector of all the winners of the round.",
                " 2. `assignments`: the compact version of an assignment vector that encodes the edge",
                "    weights.",
                "",
                " Both of which may be computed using _phragmen_, or any other algorithm.",
                "",
                " Additionally, the submitter must provide:",
                "",
                " - The `score` that they claim their solution has.",
                "",
                " Both validators and nominators will be represented by indices in the solution. The",
                " indices should respect the corresponding types ([`ValidatorIndex`] and",
                " [`NominatorIndex`]). Moreover, they should be valid when used to index into",
                " [`SnapshotValidators`] and [`SnapshotNominators`]. Any invalid index will cause the",
                " solution to be rejected. These two storage items are set during the election window and",
                " may be used to determine the indices.",
                "",
                " A solution is valid if:",
                "",
                " 0. It is submitted when [`EraElectionStatus`] is `Open`.",
                " 1. Its claimed score is equal to the score computed on-chain.",
                " 2. Presents the correct number of winners.",
                " 3. All indexes must be value according to the snapshot vectors. All edge values must",
                "    also be correct and should not overflow the granularity of the ratio type (i.e. 256",
                "    or billion).",
                " 4. For each edge, all targets are actually nominated by the voter.",
                " 5. Has correct self-votes.",
                "",
                " A solutions score is consisted of 3 parameters:",
                "",
                " 1. `min { support.total }` for each support of a winner. This value should be maximized.",
                " 2. `sum { support.total }` for each support of a winner. This value should be minimized.",
                " 3. `sum { support.total^2 }` for each support of a winner. This value should be",
                "    minimized (to ensure less variance)",
                "",
                " # <weight>",
                " The transaction is assumed to be the longest path, a better solution.",
                "   - Initial solution is almost the same.",
                "   - Worse solution is retraced in pre-dispatch-checks which sets its own weight.",
                " # </weight>"
              ]
            },
            {
              "name": "submit_election_solution_unsigned",
              "args": [
                {
                  "name": "winners",
                  "type": "Vec<ValidatorIndex>"
                },
                {
                  "name": "compact",
                  "type": "CompactAssignments"
                },
                {
                  "name": "score",
                  "type": "ElectionScore"
                },
                {
                  "name": "era",
                  "type": "EraIndex"
                },
                {
                  "name": "size",
                  "type": "ElectionSize"
                }
              ],
              "docs": [
                " Unsigned version of `submit_election_solution`.",
                "",
                " Note that this must pass the [`ValidateUnsigned`] check which only allows transactions",
                " from the local node to be included. In other words, only the block author can include a",
                " transaction in the block.",
                "",
                " # <weight>",
                " See `crate::weight` module.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "EraPayout",
              "args": [
                "EraIndex",
                "Balance",
                "Balance"
              ],
              "docs": [
                " The era payout has been set; the first balance is the validator-payout; the second is",
                " the remainder from the maximum amount of reward.",
                " \\[era_index, validator_payout, remainder\\]"
              ]
            },
            {
              "name": "Reward",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " The staker has been rewarded by this amount. \\[stash, amount\\]"
              ]
            },
            {
              "name": "Slash",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " One validator (and its nominators) has been slashed by the given amount.",
                " \\[validator, amount\\]"
              ]
            },
            {
              "name": "OldSlashingReportDiscarded",
              "args": [
                "SessionIndex"
              ],
              "docs": [
                " An old slashing report from a prior era was discarded because it could",
                " not be processed. \\[session_index\\]"
              ]
            },
            {
              "name": "StakingElection",
              "args": [
                "ElectionCompute"
              ],
              "docs": [
                " A new set of stakers was elected with the given \\[compute\\]."
              ]
            },
            {
              "name": "SolutionStored",
              "args": [
                "ElectionCompute"
              ],
              "docs": [
                " A new solution for the upcoming election has been stored. \\[compute\\]"
              ]
            },
            {
              "name": "Bonded",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " An account has bonded this amount. \\[stash, amount\\]",
                "",
                " NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                " it will not be emitted for staking rewards when they are added to stake."
              ]
            },
            {
              "name": "Unbonded",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " An account has unbonded this amount. \\[stash, amount\\]"
              ]
            },
            {
              "name": "Withdrawn",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                " from the unlocking queue. \\[stash, amount\\]"
              ]
            }
          ],
          "constants": [
            {
              "name": "SessionsPerEra",
              "type": "SessionIndex",
              "value": "0x06000000",
              "docs": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "BondingDuration",
              "type": "EraIndex",
              "value": "0xa8000000",
              "docs": [
                " Number of eras that staked funds must remain bonded for."
              ]
            },
            {
              "name": "SlashDeferDuration",
              "type": "EraIndex",
              "value": "0xa7000000",
              "docs": [
                " Number of eras that slashes are deferred by, after computation.",
                "",
                " This should be less than the bonding duration.",
                " Set to 0 if slashes should be applied immediately, without opportunity for",
                " intervention."
              ]
            },
            {
              "name": "ElectionLookahead",
              "type": "BlockNumber",
              "value": "0x19000000",
              "docs": [
                " The number of blocks before the end of the era from which election submissions are allowed.",
                "",
                " Setting this to zero will disable the offchain compute and only on-chain seq-phragmen will",
                " be used.",
                "",
                " This is bounded by being within the last session. Hence, setting it to a value more than the",
                " length of a session will be pointless."
              ]
            },
            {
              "name": "MaxIterations",
              "type": "u32",
              "value": "0x0a000000",
              "docs": [
                " Maximum number of balancing iterations to run in the offchain submission.",
                "",
                " If set to 0, balance_solution will not be executed at all."
              ]
            },
            {
              "name": "MinSolutionScoreBump",
              "type": "Perbill",
              "value": "0x20a10700",
              "docs": [
                " The threshold of improvement that should be provided for a new solution to be accepted."
              ]
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "type": "u32",
              "value": "0x40000000",
              "docs": [
                " The maximum number of nominators rewarded for each validator.",
                "",
                " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can claim",
                " their reward. This used to limit the i/o cost for the nominator payout."
              ]
            }
          ],
          "errors": [
            {
              "name": "NotController",
              "docs": [
                " Not a controller account."
              ]
            },
            {
              "name": "NotStash",
              "docs": [
                " Not a stash account."
              ]
            },
            {
              "name": "AlreadyBonded",
              "docs": [
                " Stash is already bonded."
              ]
            },
            {
              "name": "AlreadyPaired",
              "docs": [
                " Controller is already paired."
              ]
            },
            {
              "name": "EmptyTargets",
              "docs": [
                " Targets cannot be empty."
              ]
            },
            {
              "name": "DuplicateIndex",
              "docs": [
                " Duplicate index."
              ]
            },
            {
              "name": "InvalidSlashIndex",
              "docs": [
                " Slash record index out of bounds."
              ]
            },
            {
              "name": "InsufficientValue",
              "docs": [
                " Can not bond with value less than minimum balance."
              ]
            },
            {
              "name": "NoMoreChunks",
              "docs": [
                " Can not schedule more unlock chunks."
              ]
            },
            {
              "name": "NoUnlockChunk",
              "docs": [
                " Can not rebond without unlocking chunks."
              ]
            },
            {
              "name": "FundedTarget",
              "docs": [
                " Attempting to target a stash that still has funds."
              ]
            },
            {
              "name": "InvalidEraToReward",
              "docs": [
                " Invalid era to reward."
              ]
            },
            {
              "name": "InvalidNumberOfNominations",
              "docs": [
                " Invalid number of nominations."
              ]
            },
            {
              "name": "NotSortedAndUnique",
              "docs": [
                " Items are not sorted and unique."
              ]
            },
            {
              "name": "AlreadyClaimed",
              "docs": [
                " Rewards for this era have already been claimed for this validator."
              ]
            },
            {
              "name": "OffchainElectionEarlySubmission",
              "docs": [
                " The submitted result is received out of the open window."
              ]
            },
            {
              "name": "OffchainElectionWeakSubmission",
              "docs": [
                " The submitted result is not as good as the one stored on chain."
              ]
            },
            {
              "name": "SnapshotUnavailable",
              "docs": [
                " The snapshot data of the current window is missing."
              ]
            },
            {
              "name": "OffchainElectionBogusWinnerCount",
              "docs": [
                " Incorrect number of winners were presented."
              ]
            },
            {
              "name": "OffchainElectionBogusWinner",
              "docs": [
                " One of the submitted winners is not an active candidate on chain (index is out of range",
                " in snapshot)."
              ]
            },
            {
              "name": "OffchainElectionBogusCompact",
              "docs": [
                " Error while building the assignment type from the compact. This can happen if an index",
                " is invalid, or if the weights _overflow_."
              ]
            },
            {
              "name": "OffchainElectionBogusNominator",
              "docs": [
                " One of the submitted nominators is not an active nominator on chain."
              ]
            },
            {
              "name": "OffchainElectionBogusNomination",
              "docs": [
                " One of the submitted nominators has an edge to which they have not voted on chain."
              ]
            },
            {
              "name": "OffchainElectionSlashedNomination",
              "docs": [
                " One of the submitted nominators has an edge which is submitted before the last non-zero",
                " slash of the target."
              ]
            },
            {
              "name": "OffchainElectionBogusSelfVote",
              "docs": [
                " A self vote must only be originated from a validator to ONLY themselves."
              ]
            },
            {
              "name": "OffchainElectionBogusEdge",
              "docs": [
                " The submitted result has unknown edges that are not among the presented winners."
              ]
            },
            {
              "name": "OffchainElectionBogusScore",
              "docs": [
                " The claimed score does not match with the one computed from the data."
              ]
            },
            {
              "name": "OffchainElectionBogusElectionSize",
              "docs": [
                " The election size is invalid."
              ]
            },
            {
              "name": "CallNotAllowed",
              "docs": [
                " The call is not allowed at the given time due to restrictions of election period."
              ]
            },
            {
              "name": "IncorrectHistoryDepth",
              "docs": [
                " Incorrect previous history depth input provided."
              ]
            },
            {
              "name": "IncorrectSlashingSpans",
              "docs": [
                " Incorrect number of slashing spans provided."
              ]
            }
          ],
          "index": 7
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<ValidatorId>"
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "plain": "SessionIndex"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "plain": "bool"
                },
                "fallback": "0x00",
                "docs": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<(ValidatorId,Keys)>"
                },
                "fallback": "0x00",
                "docs": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<u32>"
                },
                "fallback": "0x00",
                "docs": [
                  " Indices of disabled validators.",
                  "",
                  " The set is cleared when `on_session_ending` returns a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "ValidatorId",
                    "value": "Keys",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The next session keys for a validator."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "(KeyTypeId,Bytes)",
                    "value": "ValidatorId",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set_keys",
              "args": [
                {
                  "name": "keys",
                  "type": "Keys"
                },
                {
                  "name": "proof",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Sets the session key(s) of the function caller to `keys`.",
                " Allows an account to set its session key prior to becoming a validator.",
                " This doesn't take effect until the next session.",
                "",
                " The dispatch origin of this function must be signed.",
                "",
                " # <weight>",
                " - Complexity: `O(1)`",
                "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                " - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                " - DbWrites: `origin account`, `NextKeys`",
                " - DbReads per key id: `KeyOwner`",
                " - DbWrites per key id: `KeyOwner`",
                " # </weight>"
              ]
            },
            {
              "name": "purge_keys",
              "args": [],
              "docs": [
                " Removes any session key(s) of the function caller.",
                " This doesn't take effect until the next session.",
                "",
                " The dispatch origin of this function must be signed.",
                "",
                " # <weight>",
                " - Complexity: `O(1)` in number of key types.",
                "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                " - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                " - DbWrites: `NextKeys`, `origin account`",
                " - DbWrites per key id: `KeyOwnder`",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "NewSession",
              "args": [
                "SessionIndex"
              ],
              "docs": [
                " New session has happened. Note that the argument is the \\[session_index\\], not the block",
                " number as the type might suggest."
              ]
            }
          ],
          "constants": [],
          "errors": [
            {
              "name": "InvalidProof",
              "docs": [
                " Invalid ownership proof."
              ]
            },
            {
              "name": "NoAssociatedValidatorId",
              "docs": [
                " No associated validator ID for account."
              ]
            },
            {
              "name": "DuplicatedKey",
              "docs": [
                " Registered duplicate key."
              ]
            },
            {
              "name": "NoKeys",
              "docs": [
                " No keys are associated with this account."
              ]
            }
          ],
          "index": 8
        },
        {
          "name": "Historical",
          "storage": null,
          "calls": null,
          "events": null,
          "constants": [],
          "errors": [],
          "index": 9
        },
        {
          "name": "FinalityTracker",
          "storage": null,
          "calls": [
            {
              "name": "final_hint",
              "args": [
                {
                  "name": "hint",
                  "type": "Compact<BlockNumber>"
                }
              ],
              "docs": [
                " Hint that the author of this block thinks the best finalized",
                " block is the given number."
              ]
            }
          ],
          "events": null,
          "constants": [
            {
              "name": "WindowSize",
              "type": "BlockNumber",
              "value": "0x65000000",
              "docs": [
                " The number of recent samples to keep from this chain. Default is 101."
              ]
            },
            {
              "name": "ReportLatency",
              "type": "BlockNumber",
              "value": "0xe8030000",
              "docs": [
                " The delay after which point things become suspicious. Default is 1000."
              ]
            }
          ],
          "errors": [
            {
              "name": "AlreadyUpdated",
              "docs": [
                " Final hint must be updated only once in the block"
              ]
            },
            {
              "name": "BadHint",
              "docs": [
                " Finalized height above block number"
              ]
            }
          ],
          "index": 10
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "GrandpaFinality",
            "items": [
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "plain": "StoredState"
                },
                "fallback": "0x00",
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "plain": "StoredPendingChange"
                },
                "fallback": "0x00",
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "plain": "BlockNumber"
                },
                "fallback": "0x00",
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "plain": "(BlockNumber,BlockNumber)"
                },
                "fallback": "0x00",
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "plain": "SetId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "SetId",
                    "value": "SessionIndex",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "report_equivocation",
              "args": [
                {
                  "name": "equivocation_proof",
                  "type": "GrandpaEquivocationProof"
                },
                {
                  "name": "key_owner_proof",
                  "type": "KeyOwnerProof"
                }
              ],
              "docs": [
                " Report voter equivocation/misbehavior. This method will verify the",
                " equivocation proof and validate the given key ownership proof",
                " against the extracted offender. If both are valid, the offence",
                " will be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "args": [
                {
                  "name": "equivocation_proof",
                  "type": "GrandpaEquivocationProof"
                },
                {
                  "name": "key_owner_proof",
                  "type": "KeyOwnerProof"
                }
              ],
              "docs": [
                " Report voter equivocation/misbehavior. This method will verify the",
                " equivocation proof and validate the given key ownership proof",
                " against the extracted offender. If both are valid, the offence",
                " will be reported.",
                "",
                " This extrinsic must be called unsigned and it is expected that only",
                " block authors will call it (validated in `ValidateUnsigned`), as such",
                " if the block author is defined it will be defined as the equivocation",
                " reporter."
              ]
            },
            {
              "name": "note_stalled",
              "args": [
                {
                  "name": "delay",
                  "type": "BlockNumber"
                },
                {
                  "name": "best_finalized_block_number",
                  "type": "BlockNumber"
                }
              ],
              "docs": [
                " Note that the current authority set of the GRANDPA finality gadget has",
                " stalled. This will trigger a forced authority set change at the beginning",
                " of the next session, to be enacted `delay` blocks after that. The delay",
                " should be high enough to safely assume that the block signalling the",
                " forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                " will start the new authority set using the given finalized block as base.",
                " Only callable by root."
              ]
            }
          ],
          "events": [
            {
              "name": "NewAuthorities",
              "args": [
                "AuthorityList"
              ],
              "docs": [
                " New authority set has been applied. \\[authority_set\\]"
              ]
            },
            {
              "name": "Paused",
              "args": [],
              "docs": [
                " Current authority set has been paused."
              ]
            },
            {
              "name": "Resumed",
              "args": [],
              "docs": [
                " Current authority set has been resumed."
              ]
            }
          ],
          "constants": [],
          "errors": [
            {
              "name": "PauseFailed",
              "docs": [
                " Attempt to signal GRANDPA pause when the authority set isn't live",
                " (either paused or already pending pause)."
              ]
            },
            {
              "name": "ResumeFailed",
              "docs": [
                " Attempt to signal GRANDPA resume when the authority set isn't paused",
                " (either live or already pending resume)."
              ]
            },
            {
              "name": "ChangePending",
              "docs": [
                " Attempt to signal GRANDPA change with one already pending."
              ]
            },
            {
              "name": "TooSoon",
              "docs": [
                " Cannot signal forced change so soon after last."
              ]
            },
            {
              "name": "InvalidKeyOwnershipProof",
              "docs": [
                " A key ownership proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "InvalidEquivocationProof",
              "docs": [
                " An equivocation proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "DuplicateOffenceReport",
              "docs": [
                " A given equivocation report is valid but already previously reported."
              ]
            }
          ],
          "index": 11
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "items": [
              {
                "name": "HeartbeatAfter",
                "modifier": "Default",
                "type": {
                  "plain": "BlockNumber"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The block number after which it's ok to send heartbeats in current session.",
                  "",
                  " At the beginning of each session we set this to a value that should",
                  " fall roughly in the middle of the session duration.",
                  " The idea is to first wait for the validators to produce a block",
                  " in the current session, so that the heartbeat later on will not be necessary."
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<AuthorityId>"
                },
                "fallback": "0x00",
                "docs": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "SessionIndex",
                    "key2": "AuthIndex",
                    "value": "Bytes",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " For each session index, we keep a mapping of `AuthIndex` to",
                  " `offchain::OpaqueNetworkState`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "SessionIndex",
                    "key2": "ValidatorId",
                    "value": "u32",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00000000",
                "docs": [
                  " For each session index, we keep a mapping of `T::ValidatorId` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "heartbeat",
              "args": [
                {
                  "name": "heartbeat",
                  "type": "Heartbeat"
                },
                {
                  "name": "_signature",
                  "type": "Signature"
                }
              ],
              "docs": [
                " # <weight>",
                " - Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len)",
                "   and E is length of `heartbeat.network_state.external_address`",
                "   - `O(K)`: decoding of length `K`",
                "   - `O(E)`: decoding/encoding of length `E`",
                " - DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                "   `ReceivedHeartbeats`",
                " - DbWrites: `ReceivedHeartbeats`",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "HeartbeatReceived",
              "args": [
                "AuthorityId"
              ],
              "docs": [
                " A new heartbeat was received from `AuthorityId` \\[authority_id\\]"
              ]
            },
            {
              "name": "AllGood",
              "args": [],
              "docs": [
                " At the end of the session, no offence was committed."
              ]
            },
            {
              "name": "SomeOffline",
              "args": [
                "Vec<IdentificationTuple>"
              ],
              "docs": [
                " At the end of the session, at least one validator was found to be \\[offline\\]."
              ]
            }
          ],
          "constants": [],
          "errors": [
            {
              "name": "InvalidKey",
              "docs": [
                " Non existent public key."
              ]
            },
            {
              "name": "DuplicatedHeartbeat",
              "docs": [
                " Duplicated heartbeat."
              ]
            }
          ],
          "index": 12
        },
        {
          "name": "AuthorityDiscovery",
          "storage": null,
          "calls": [],
          "events": null,
          "constants": [],
          "errors": [],
          "index": 13
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "items": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "ReportIdOf",
                    "value": "OffenceDetails",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "DeferredOffences",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<DeferredOffenceOf>"
                },
                "fallback": "0x00",
                "docs": [
                  " Deferred reports that have been rejected by the offence handler and need to be submitted",
                  " at a later time."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "Kind",
                    "key2": "OpaqueTimeSlot",
                    "value": "Vec<ReportIdOf>",
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": "Kind",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "calls": [],
          "events": [
            {
              "name": "Offence",
              "args": [
                "Kind",
                "OpaqueTimeSlot",
                "bool"
              ],
              "docs": [
                " There is an offence reported of the given `kind` happened at the `session_index` and",
                " (kind-specific) time slot. This event is not deposited for duplicate slashes. last",
                " element indicates of the offence was applied (true) or queued (false)",
                " \\[kind, timeslot, applied\\]."
              ]
            }
          ],
          "constants": [],
          "errors": [],
          "index": 14
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "items": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<Hash>"
                },
                "fallback": "0x00",
                "docs": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": [],
          "events": null,
          "constants": [],
          "errors": [],
          "index": 15
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Default",
                "type": {
                  "plain": "AccountId"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "sudo",
              "args": [
                {
                  "name": "call",
                  "type": "Call"
                }
              ],
              "docs": [
                " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB write (event).",
                " - Weight of derivative `call` execution + 10,000.",
                " # </weight>"
              ]
            },
            {
              "name": "sudo_unchecked_weight",
              "args": [
                {
                  "name": "call",
                  "type": "Call"
                },
                {
                  "name": "_weight",
                  "type": "Weight"
                }
              ],
              "docs": [
                " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                " This function does not check the weight of the call, and instead allows the",
                " Sudo user to specify the weight of the call.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - The weight of this call is defined by the caller.",
                " # </weight>"
              ]
            },
            {
              "name": "set_key",
              "args": [
                {
                  "name": "new",
                  "type": "LookupSource"
                }
              ],
              "docs": [
                " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB change.",
                " # </weight>"
              ]
            },
            {
              "name": "sudo_as",
              "args": [
                {
                  "name": "who",
                  "type": "LookupSource"
                },
                {
                  "name": "call",
                  "type": "Call"
                }
              ],
              "docs": [
                " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                " a given account.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB write (event).",
                " - Weight of derivative `call` execution + 10,000.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Sudid",
              "args": [
                "DispatchResult"
              ],
              "docs": [
                " A sudo just took place. \\[result\\]"
              ]
            },
            {
              "name": "KeyChanged",
              "args": [
                "AccountId"
              ],
              "docs": [
                " The \\[sudoer\\] just switched identity; the old key is supplied."
              ]
            },
            {
              "name": "SudoAsDone",
              "args": [
                "bool"
              ],
              "docs": [
                " A sudo just took place. \\[result\\]"
              ]
            }
          ],
          "constants": [],
          "errors": [
            {
              "name": "RequireSudo",
              "docs": [
                " Sender must be the Sudo account"
              ]
            }
          ],
          "index": 16
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Council",
            "items": [
              {
                "name": "Stage",
                "modifier": "Default",
                "type": {
                  "plain": "CouncilStageUpdate"
                },
                "fallback": "0x00000000000000000000000000",
                "docs": [
                  " Current council voting stage"
                ]
              },
              {
                "name": "CouncilMembers",
                "modifier": "Default",
                "type": {
                  "plain": "Vec<CouncilMemberOf>"
                },
                "fallback": "0x00",
                "docs": [
                  " Current council members"
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "MemberId",
                    "value": "Candidate",
                    "linked": false
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map of all candidates that ever candidated and haven't unstake yet."
                ]
              },
              {
                "name": "AnnouncementPeriodNr",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Index of the current candidacy period. It is incremented everytime announcement period",
                  " starts."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "Balance"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the council's elected members rewards."
                ]
              },
              {
                "name": "NextRewardPayments",
                "modifier": "Default",
                "type": {
                  "plain": "BlockNumber"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next block in which the elected council member rewards will be payed."
                ]
              },
              {
                "name": "NextBudgetRefill",
                "modifier": "Default",
                "type": {
                  "plain": "BlockNumber"
                },
                "fallback": "0x00000000",
                "docs": [
                  " The next block in which the budget will be increased."
                ]
              },
              {
                "name": "BudgetIncrement",
                "modifier": "Default",
                "type": {
                  "plain": "Balance"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Amount of balance to be refilled every budget period"
                ]
              },
              {
                "name": "CouncilorReward",
                "modifier": "Default",
                "type": {
                  "plain": "Balance"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Councilor reward per block"
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "announce_candidacy",
              "args": [
                {
                  "name": "membership_id",
                  "type": "MemberId"
                },
                {
                  "name": "staking_account_id",
                  "type": "AccountId"
                },
                {
                  "name": "reward_account_id",
                  "type": "AccountId"
                },
                {
                  "name": "stake",
                  "type": "Balance"
                }
              ],
              "docs": [
                " Subscribe candidate",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "release_candidacy_stake",
              "args": [
                {
                  "name": "membership_id",
                  "type": "MemberId"
                }
              ],
              "docs": [
                " Release candidacy stake that is no longer needed.",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_candidacy",
              "args": [
                {
                  "name": "membership_id",
                  "type": "MemberId"
                }
              ],
              "docs": [
                " Withdraw candidacy and release candidacy stake.",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_candidacy_note",
              "args": [
                {
                  "name": "membership_id",
                  "type": "MemberId"
                },
                {
                  "name": "note",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Set short description for the user's candidacy. Can be called anytime during user's candidacy.",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (N)` where:",
                " `N` is the length of `note`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "balance",
                  "type": "Balance"
                }
              ],
              "docs": [
                " Sets the budget balance.",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "plan_budget_refill",
              "args": [
                {
                  "name": "next_refill",
                  "type": "BlockNumber"
                }
              ],
              "docs": [
                " Plan the next budget refill.",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget_increment",
              "args": [
                {
                  "name": "budget_increment",
                  "type": "Balance"
                }
              ],
              "docs": [
                " Sets the budget refill amount",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_councilor_reward",
              "args": [
                {
                  "name": "councilor_reward",
                  "type": "Balance"
                }
              ],
              "docs": [
                " Sets the councilor reward per block",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "funding_request",
              "args": [
                {
                  "name": "funding_requests",
                  "type": "Vec<FundingRequestParameters>"
                }
              ],
              "docs": [
                " Transfers funds from council budget to account",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (F)` where:",
                " `F` is the length of `funding_requests`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "AnnouncingPeriodStarted",
              "args": [],
              "docs": [
                " New council was elected"
              ]
            },
            {
              "name": "NotEnoughCandidates",
              "args": [],
              "docs": [
                " Announcing period can't finish because of insufficient candidtate count"
              ]
            },
            {
              "name": "VotingPeriodStarted",
              "args": [
                "u64"
              ],
              "docs": [
                " Candidates are announced and voting starts"
              ]
            },
            {
              "name": "NewCandidate",
              "args": [
                "MemberId",
                "AccountId",
                "AccountId",
                "Balance"
              ],
              "docs": [
                " New candidate announced"
              ]
            },
            {
              "name": "NewCouncilElected",
              "args": [
                "Vec<MemberId>"
              ],
              "docs": [
                " New council was elected and appointed"
              ]
            },
            {
              "name": "NewCouncilNotElected",
              "args": [],
              "docs": [
                " New council was elected and appointed"
              ]
            },
            {
              "name": "CandidacyStakeRelease",
              "args": [
                "MemberId"
              ],
              "docs": [
                " Candidacy stake that was no longer needed was released"
              ]
            },
            {
              "name": "CandidacyWithdraw",
              "args": [
                "MemberId"
              ],
              "docs": [
                " Candidate has withdrawn his candidacy"
              ]
            },
            {
              "name": "CandidacyNoteSet",
              "args": [
                "MemberId",
                "Bytes"
              ],
              "docs": [
                " The candidate has set a new note for their candidacy"
              ]
            },
            {
              "name": "RewardPayment",
              "args": [
                "MemberId",
                "AccountId",
                "Balance",
                "Balance"
              ],
              "docs": [
                " The whole reward was paid to the council member."
              ]
            },
            {
              "name": "BudgetBalanceSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Budget balance was changed by the root."
              ]
            },
            {
              "name": "BudgetRefill",
              "args": [
                "Balance"
              ],
              "docs": [
                " Budget balance was increased by automatic refill."
              ]
            },
            {
              "name": "BudgetRefillPlanned",
              "args": [
                "BlockNumber"
              ],
              "docs": [
                " The next budget refill was planned."
              ]
            },
            {
              "name": "BudgetIncrementUpdated",
              "args": [
                "Balance"
              ],
              "docs": [
                " Budget increment has been updated."
              ]
            },
            {
              "name": "CouncilorRewardUpdated",
              "args": [
                "Balance"
              ],
              "docs": [
                " Councilor reward has been updated."
              ]
            },
            {
              "name": "RequestFunded",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " Request has been funded"
              ]
            }
          ],
          "constants": [
            {
              "name": "MinNumberOfExtraCandidates",
              "type": "u64",
              "value": "0x0100000000000000",
              "docs": [
                " Minimum number of extra candidates needed for the valid election.",
                " Number of total candidates is equal to council size plus extra candidates."
              ]
            },
            {
              "name": "CouncilSize",
              "type": "u64",
              "value": "0x0300000000000000",
              "docs": [
                " Council member count"
              ]
            },
            {
              "name": "MinCandidateStake",
              "type": "Balance",
              "value": "0xf82a0000000000000000000000000000",
              "docs": [
                " Minimum stake candidate has to lock"
              ]
            },
            {
              "name": "AnnouncingPeriodDuration",
              "type": "BlockNumber",
              "value": "0x0f000000",
              "docs": [
                " Duration of annoncing period"
              ]
            },
            {
              "name": "IdlePeriodDuration",
              "type": "BlockNumber",
              "value": "0x1b000000",
              "docs": [
                " Duration of idle period"
              ]
            },
            {
              "name": "ElectedMemberRewardPeriod",
              "type": "BlockNumber",
              "value": "0x0a000000",
              "docs": [
                " Interval for automatic reward payments."
              ]
            },
            {
              "name": "BudgetRefillPeriod",
              "type": "BlockNumber",
              "value": "0xe8030000",
              "docs": [
                " Interval between automatic budget refills."
              ]
            },
            {
              "name": "CandidacyLockId",
              "type": "LockIdentifier",
              "value": "0x0101010101010101",
              "docs": [
                " Exports const - candidacy lock id."
              ]
            },
            {
              "name": "CouncilorLockId",
              "type": "LockIdentifier",
              "value": "0x0202020202020202",
              "docs": [
                " Exports const - councilor lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "BadOrigin",
              "docs": [
                " Origin is invalid."
              ]
            },
            {
              "name": "CantCandidateNow",
              "docs": [
                " User tried to announce candidacy outside of the candidacy announcement period."
              ]
            },
            {
              "name": "CantReleaseStakeNow",
              "docs": [
                " User tried to release stake outside of the revealing period."
              ]
            },
            {
              "name": "CandidacyStakeTooLow",
              "docs": [
                " Candidate haven't provided sufficient stake."
              ]
            },
            {
              "name": "CantCandidateTwice",
              "docs": [
                " User tried to announce candidacy twice in the same elections."
              ]
            },
            {
              "name": "ConflictingStake",
              "docs": [
                " User tried to announce candidacy with an account that has the conflicting type of stake",
                " with candidacy stake and has not enough balance for staking for both purposes."
              ]
            },
            {
              "name": "StakeStillNeeded",
              "docs": [
                " Council member and candidates can't withdraw stake yet."
              ]
            },
            {
              "name": "NoStake",
              "docs": [
                " User tried to release stake when no stake exists."
              ]
            },
            {
              "name": "InsufficientBalanceForStaking",
              "docs": [
                " Insufficient balance for candidacy staking."
              ]
            },
            {
              "name": "CantVoteForYourself",
              "docs": [
                " Candidate can't vote for himself."
              ]
            },
            {
              "name": "MemberIdNotMatchAccount",
              "docs": [
                " Invalid membership."
              ]
            },
            {
              "name": "InvalidAccountToStakeReuse",
              "docs": [
                " The combination of membership id and account id is invalid for unstaking an existing",
                " candidacy stake."
              ]
            },
            {
              "name": "NotCandidatingNow",
              "docs": [
                " User tried to withdraw candidacy when not candidating."
              ]
            },
            {
              "name": "CantWithdrawCandidacyNow",
              "docs": [
                " Can't withdraw candidacy outside of the candidacy announcement period."
              ]
            },
            {
              "name": "NotCouncilor",
              "docs": [
                " The member is not a councilor."
              ]
            },
            {
              "name": "InsufficientFundsForFundingRequest",
              "docs": [
                " Insufficent funds in council for executing 'Funding Request'"
              ]
            },
            {
              "name": "ZeroBalanceFundRequest",
              "docs": [
                " Fund request no balance"
              ]
            },
            {
              "name": "RepeatedFundRequestAccount",
              "docs": [
                " The same account is recieving funds from the same request twice"
              ]
            },
            {
              "name": "EmptyFundingRequests",
              "docs": [
                " Funding requests without recieving accounts"
              ]
            }
          ],
          "index": 17
        },
        {
          "name": "Referendum",
          "storage": {
            "prefix": "Instance1Referendum",
            "items": [
              {
                "name": "Stage",
                "modifier": "Default",
                "type": {
                  "plain": "ReferendumStage"
                },
                "fallback": "0x00",
                "docs": [
                  " Current referendum stage."
                ]
              },
              {
                "name": "Votes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "AccountId",
                    "value": "CastVoteOf",
                    "linked": false
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Votes cast in the referendum. A new record is added to this map when a user casts a",
                  " sealed vote.",
                  " It is modified when a user reveals the vote's commitment proof.",
                  " A record is finally removed when the user unstakes, which can happen during a voting",
                  " stage or after the current cycle ends.",
                  " A stake for a vote can be reused in future referendum cycles."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "vote",
              "args": [
                {
                  "name": "commitment",
                  "type": "Hash"
                },
                {
                  "name": "stake",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Cast a sealed vote in the referendum.",
                "",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "reveal_vote",
              "args": [
                {
                  "name": "salt",
                  "type": "Bytes"
                },
                {
                  "name": "vote_option_id",
                  "type": "MemberId"
                }
              ],
              "docs": [
                " Reveal a sealed vote in the referendum.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (W)` where:",
                " - `W` is the number of `intermediate_winners` stored in the current",
                "     `Stage::<T, I>::get()`",
                " - DB:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "release_vote_stake",
              "args": [],
              "docs": [
                " Release a locked stake.",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "ReferendumStarted",
              "args": [
                "u64"
              ],
              "docs": [
                " Referendum started"
              ]
            },
            {
              "name": "ReferendumStartedForcefully",
              "args": [
                "u64"
              ],
              "docs": [
                " Referendum started"
              ]
            },
            {
              "name": "RevealingStageStarted",
              "args": [],
              "docs": [
                " Revealing phase has begun"
              ]
            },
            {
              "name": "ReferendumFinished",
              "args": [
                "Vec<OptionResult>"
              ],
              "docs": [
                " Referendum ended and winning option was selected"
              ]
            },
            {
              "name": "VoteCast",
              "args": [
                "AccountId",
                "Hash",
                "Balance"
              ],
              "docs": [
                " User cast a vote in referendum"
              ]
            },
            {
              "name": "VoteRevealed",
              "args": [
                "AccountId",
                "MemberId",
                "Bytes"
              ],
              "docs": [
                " User revealed his vote"
              ]
            },
            {
              "name": "StakeReleased",
              "args": [
                "AccountId"
              ],
              "docs": [
                " User released his stake"
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxSaltLength",
              "type": "u64",
              "value": "0x2000000000000000",
              "docs": [
                " Maximum length of vote commitment salt. Use length that ensures uniqueness for hashing",
                " e.g. std::u64::MAX."
              ]
            },
            {
              "name": "VoteStageDuration",
              "type": "BlockNumber",
              "value": "0x05000000",
              "docs": [
                " Duration of voting stage (number of blocks)"
              ]
            },
            {
              "name": "RevealStageDuration",
              "type": "BlockNumber",
              "value": "0x07000000",
              "docs": [
                " Duration of revealing stage (number of blocks)"
              ]
            },
            {
              "name": "MinimumStake",
              "type": "BalanceOf",
              "value": "0x10270000000000000000000000000000",
              "docs": [
                " Minimum stake needed for voting"
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0000000000000000",
              "docs": [
                " Exports const - staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "BadOrigin",
              "docs": [
                " Origin is invalid"
              ]
            },
            {
              "name": "ReferendumNotRunning",
              "docs": [
                " Referendum is not running when expected to"
              ]
            },
            {
              "name": "RevealingNotInProgress",
              "docs": [
                " Revealing stage is not in progress right now"
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "InsufficientBalanceToStake",
              "docs": [
                " Account Insufficient Free Balance (now)"
              ]
            },
            {
              "name": "InsufficientStake",
              "docs": [
                " Insufficient stake provided to cast a vote"
              ]
            },
            {
              "name": "InvalidReveal",
              "docs": [
                " Salt and referendum option provided don't correspond to the commitment"
              ]
            },
            {
              "name": "InvalidVote",
              "docs": [
                " Vote for not existing option was revealed"
              ]
            },
            {
              "name": "VoteNotExisting",
              "docs": [
                " Trying to reveal vote that was not cast"
              ]
            },
            {
              "name": "AlreadyVotedThisCycle",
              "docs": [
                " Trying to vote multiple time in the same cycle"
              ]
            },
            {
              "name": "UnstakingVoteInSameCycle",
              "docs": [
                " Invalid time to release the locked stake"
              ]
            },
            {
              "name": "SaltTooLong",
              "docs": [
                " Salt is too long"
              ]
            },
            {
              "name": "UnstakingForbidden",
              "docs": [
                " Unstaking has been forbidden for the user (at least for now)"
              ]
            }
          ],
          "index": 18
        },
        {
          "name": "Memo",
          "storage": {
            "prefix": "Memo",
            "items": [
              {
                "name": "Memo",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "AccountId",
                    "value": "MemoText",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "MaxMemoLength",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00100000",
                "docs": []
              }
            ]
          },
          "calls": [
            {
              "name": "update_memo",
              "args": [
                {
                  "name": "memo",
                  "type": "MemoText"
                }
              ],
              "docs": []
            }
          ],
          "events": [
            {
              "name": "MemoUpdated",
              "args": [
                "AccountId",
                "MemoText"
              ],
              "docs": []
            }
          ],
          "constants": [],
          "errors": [],
          "index": 19
        },
        {
          "name": "Members",
          "storage": {
            "prefix": "Membership",
            "items": [
              {
                "name": "NextMemberId",
                "modifier": "Default",
                "type": {
                  "plain": "MemberId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " MemberId to assign to next member that is added to the registry, and is also the",
                  " total number of members created. MemberIds start at Zero."
                ]
              },
              {
                "name": "MembershipById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "MemberId",
                    "value": "Membership",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Mapping of member's id to their membership profile."
                ]
              },
              {
                "name": "MemberIdByHandleHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "Bytes",
                    "value": "MemberId",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Registered unique handles hash and their mapping to their owner."
                ]
              },
              {
                "name": "ReferralCut",
                "modifier": "Default",
                "type": {
                  "plain": "u8"
                },
                "fallback": "0x00",
                "docs": [
                  " Referral cut percent of the membership fee to receive on buying the membership."
                ]
              },
              {
                "name": "MembershipPrice",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x64000000000000000000000000000000",
                "docs": [
                  " Current membership price."
                ]
              },
              {
                "name": "InitialInvitationCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x05000000",
                "docs": [
                  " Initial invitation count for the newly bought membership."
                ]
              },
              {
                "name": "InitialInvitationBalance",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x64000000000000000000000000000000",
                "docs": [
                  " Initial invitation balance for the invited member."
                ]
              },
              {
                "name": "StakingAccountIdMemberStatus",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "AccountId",
                    "value": "StakingAccountMemberBinding",
                    "linked": false
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " Double of a staking account id and member id to the confirmation status."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "buy_membership",
              "args": [
                {
                  "name": "params",
                  "type": "BuyMembershipParameters"
                }
              ],
              "docs": [
                " Non-members can buy membership.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V + X + Y)` where:",
                " - `W` is the member name",
                " - `V` is the member handle",
                " - `X` is the member avatar uri",
                " - `Y` is the member about",
                " - DB:",
                "    - O(V)",
                " # </weight>"
              ]
            },
            {
              "name": "update_profile",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "handle",
                  "type": "Option<Bytes>"
                },
                {
                  "name": "metadata",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Update member's all or some of name, handle, avatar and about text.",
                " No effect if no changed fields.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W)` where:",
                " - `W` is the handle length",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "update_accounts",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "new_root_account",
                  "type": "Option<AccountId>"
                },
                {
                  "name": "new_controller_account",
                  "type": "Option<AccountId>"
                }
              ],
              "docs": [
                " Updates member root or controller accounts. No effect if both new accounts are empty.",
                "",
                " <weight>",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_profile_verification",
              "args": [
                {
                  "name": "worker_id",
                  "type": "ActorId"
                },
                {
                  "name": "target_member_id",
                  "type": "MemberId"
                },
                {
                  "name": "is_verified",
                  "type": "bool"
                }
              ],
              "docs": [
                " Updates member profile verification status. Requires working group member origin.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_referral_cut",
              "args": [
                {
                  "name": "percent_value",
                  "type": "u8"
                }
              ],
              "docs": [
                " Updates membership referral cut percent value. Requires root origin.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "transfer_invites",
              "args": [
                {
                  "name": "source_member_id",
                  "type": "MemberId"
                },
                {
                  "name": "target_member_id",
                  "type": "MemberId"
                },
                {
                  "name": "number_of_invites",
                  "type": "u32"
                }
              ],
              "docs": [
                " Transfers invites from one member to another.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "invite_member",
              "args": [
                {
                  "name": "params",
                  "type": "InviteMembershipParameters"
                }
              ],
              "docs": [
                " Invite a new member.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V + X + Y)` where:",
                " - `W` is the member name",
                " - `V` is the member handle",
                " - `X` is the member avatar uri",
                " - `Y` is the member about",
                " - DB:",
                "    - O(V)",
                " # </weight>"
              ]
            },
            {
              "name": "set_membership_price",
              "args": [
                {
                  "name": "new_price",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Updates membership price. Requires root origin.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_leader_invitation_quota",
              "args": [
                {
                  "name": "invitation_quota",
                  "type": "u32"
                }
              ],
              "docs": [
                " Updates leader invitation quota. Requires root origin.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_initial_invitation_balance",
              "args": [
                {
                  "name": "new_initial_balance",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Updates initial invitation balance for a invited member. Requires root origin.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_initial_invitation_count",
              "args": [
                {
                  "name": "new_invitation_count",
                  "type": "u32"
                }
              ],
              "docs": [
                " Updates initial invitation count for a member. Requires root origin.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "add_staking_account_candidate",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                }
              ],
              "docs": [
                " Add staking account candidate for a member.",
                " The membership must be confirmed before usage.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "remove_staking_account",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                }
              ],
              "docs": [
                " Remove staking account for a member.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "confirm_staking_account",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "staking_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Confirm staking account candidate for a member.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "MemberInvited",
              "args": [
                "MemberId",
                "InviteMembershipParameters"
              ],
              "docs": []
            },
            {
              "name": "MembershipBought",
              "args": [
                "MemberId",
                "BuyMembershipParameters"
              ],
              "docs": []
            },
            {
              "name": "MemberProfileUpdated",
              "args": [
                "MemberId",
                "Option<Bytes>",
                "Option<Bytes>"
              ],
              "docs": []
            },
            {
              "name": "MemberAccountsUpdated",
              "args": [
                "MemberId",
                "Option<AccountId>",
                "Option<AccountId>"
              ],
              "docs": []
            },
            {
              "name": "MemberVerificationStatusUpdated",
              "args": [
                "MemberId",
                "bool",
                "ActorId"
              ],
              "docs": []
            },
            {
              "name": "ReferralCutUpdated",
              "args": [
                "u8"
              ],
              "docs": []
            },
            {
              "name": "InvitesTransferred",
              "args": [
                "MemberId",
                "MemberId",
                "u32"
              ],
              "docs": []
            },
            {
              "name": "MembershipPriceUpdated",
              "args": [
                "Balance"
              ],
              "docs": []
            },
            {
              "name": "InitialInvitationBalanceUpdated",
              "args": [
                "Balance"
              ],
              "docs": []
            },
            {
              "name": "LeaderInvitationQuotaUpdated",
              "args": [
                "u32"
              ],
              "docs": []
            },
            {
              "name": "InitialInvitationCountUpdated",
              "args": [
                "u32"
              ],
              "docs": []
            },
            {
              "name": "StakingAccountAdded",
              "args": [
                "AccountId",
                "MemberId"
              ],
              "docs": []
            },
            {
              "name": "StakingAccountRemoved",
              "args": [
                "AccountId",
                "MemberId"
              ],
              "docs": []
            },
            {
              "name": "StakingAccountConfirmed",
              "args": [
                "AccountId",
                "MemberId"
              ],
              "docs": []
            }
          ],
          "constants": [
            {
              "name": "DefaultMembershipPrice",
              "type": "BalanceOf",
              "value": "0x64000000000000000000000000000000",
              "docs": [
                " Exports const - default membership fee."
              ]
            },
            {
              "name": "ReferralCutMaximumPercent",
              "type": "u8",
              "value": "0x32",
              "docs": [
                " Exports const - maximum percent value of the membership fee for the referral cut."
              ]
            },
            {
              "name": "DefaultInitialInvitationBalance",
              "type": "BalanceOf",
              "value": "0x64000000000000000000000000000000",
              "docs": [
                " Exports const - default balance for the invited member."
              ]
            },
            {
              "name": "CandidateStake",
              "type": "BalanceOf",
              "value": "0xc8000000000000000000000000000000",
              "docs": [
                " Exports const - Stake needed to candidate as staking account."
              ]
            },
            {
              "name": "InvitedMemberLockId",
              "type": "LockIdentifier",
              "value": "0x0a0a0a0a0a0a0a0a",
              "docs": [
                " Exports const - invited member lock id."
              ]
            },
            {
              "name": "StakingCandidateLockId",
              "type": "LockIdentifier",
              "value": "0x0b0b0b0b0b0b0b0b",
              "docs": [
                " Exports const - staking candidate lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "NotEnoughBalanceToBuyMembership",
              "docs": [
                " Not enough balance to buy membership."
              ]
            },
            {
              "name": "ControllerAccountRequired",
              "docs": [
                " Controller account required."
              ]
            },
            {
              "name": "RootAccountRequired",
              "docs": [
                " Root account required."
              ]
            },
            {
              "name": "UnsignedOrigin",
              "docs": [
                " Invalid origin."
              ]
            },
            {
              "name": "MemberProfileNotFound",
              "docs": [
                " Member profile not found (invalid member id)."
              ]
            },
            {
              "name": "HandleAlreadyRegistered",
              "docs": [
                " Handle already registered."
              ]
            },
            {
              "name": "HandleMustBeProvidedDuringRegistration",
              "docs": [
                " Handle must be provided during registration."
              ]
            },
            {
              "name": "ReferrerIsNotMember",
              "docs": [
                " Cannot find a membership for a provided referrer id."
              ]
            },
            {
              "name": "CannotTransferInvitesForNotMember",
              "docs": [
                " Should be a member to receive invites."
              ]
            },
            {
              "name": "NotEnoughInvites",
              "docs": [
                " Not enough invites to perform an operation."
              ]
            },
            {
              "name": "WorkingGroupLeaderNotSet",
              "docs": [
                " Membership working group leader is not set."
              ]
            },
            {
              "name": "StakingAccountIsAlreadyRegistered",
              "docs": [
                " Staking account is registered for some member."
              ]
            },
            {
              "name": "StakingAccountDoesntExist",
              "docs": [
                " Staking account for membership doesn't exist."
              ]
            },
            {
              "name": "StakingAccountAlreadyConfirmed",
              "docs": [
                " Staking account has already been confirmed."
              ]
            },
            {
              "name": "WorkingGroupBudgetIsNotSufficientForInviting",
              "docs": [
                " Cannot invite a member. Working group balance is not sufficient to set the default",
                " balance."
              ]
            },
            {
              "name": "ConflictingLock",
              "docs": [
                " Cannot invite a member. The controller account has an existing conflicting lock."
              ]
            },
            {
              "name": "CannotExceedReferralCutPercentLimit",
              "docs": [
                " Cannot set a referral cut percent value. The limit was exceeded."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            }
          ],
          "index": 20
        },
        {
          "name": "Forum",
          "storage": {
            "prefix": "Forum_1_1",
            "items": [
              {
                "name": "CategoryById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "CategoryId",
                    "value": "Category",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map category identifier to corresponding category."
                ]
              },
              {
                "name": "NextCategoryId",
                "modifier": "Default",
                "type": {
                  "plain": "CategoryId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Category identifier value to be used for the next Category created."
                ]
              },
              {
                "name": "CategoryCounter",
                "modifier": "Default",
                "type": {
                  "plain": "CategoryId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Counter for all existing categories."
                ]
              },
              {
                "name": "ThreadById",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "CategoryId",
                    "key2": "ThreadId",
                    "value": "ThreadOf",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map thread identifier to corresponding thread."
                ]
              },
              {
                "name": "NextThreadId",
                "modifier": "Default",
                "type": {
                  "plain": "ThreadId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Thread identifier value to be used for next Thread in threadById."
                ]
              },
              {
                "name": "NextPostId",
                "modifier": "Default",
                "type": {
                  "plain": "PostId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Post identifier value to be used for for next post created."
                ]
              },
              {
                "name": "CategoryByModerator",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "CategoryId",
                    "key2": "ModeratorId",
                    "value": "()",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x",
                "docs": [
                  " Moderator set for each Category"
                ]
              },
              {
                "name": "DataMigrationDone",
                "modifier": "Default",
                "type": {
                  "plain": "bool"
                },
                "fallback": "0x00",
                "docs": [
                  " If data migration is done, set as configible for unit test purpose"
                ]
              },
              {
                "name": "PollVotes",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "ThreadId",
                    "key2": "ForumUserId",
                    "value": "bool",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Unique thread poll voters. This private double map prevents double voting."
                ]
              },
              {
                "name": "PostById",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "ThreadId",
                    "key2": "PostId",
                    "value": "Post",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map post identifier to corresponding post."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "update_category_membership_of_moderator",
              "args": [
                {
                  "name": "moderator_id",
                  "type": "ModeratorId"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "new_value",
                  "type": "bool"
                }
              ],
              "docs": [
                " Enable a moderator can moderate a category and its sub categories.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "create_category",
              "args": [
                {
                  "name": "parent_category_id",
                  "type": "Option<CategoryId>"
                },
                {
                  "name": "title",
                  "type": "Bytes"
                },
                {
                  "name": "description",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Add a new category.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V + X)` where:",
                " - `W` is the category depth",
                " - `V` is the length of the category title.",
                " - `X` is the length of the category description.",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "update_category_archival_status",
              "args": [
                {
                  "name": "actor",
                  "type": "PrivilegedActor"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "new_archival_status",
                  "type": "bool"
                }
              ],
              "docs": [
                " Update archival status",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W)` where:",
                " - `W` is the category depth",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "update_category_title",
              "args": [
                {
                  "name": "actor",
                  "type": "PrivilegedActor"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "title",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update category title",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V)` where:",
                " - `W` is the category depth",
                " - `V` is the length of the category title.",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "update_category_description",
              "args": [
                {
                  "name": "actor",
                  "type": "PrivilegedActor"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "description",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update category description",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W)` where:",
                " - `W` is the category depth",
                " - `V` is the length of the category description.",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "delete_category",
              "args": [
                {
                  "name": "actor",
                  "type": "PrivilegedActor"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                }
              ],
              "docs": [
                " Delete category",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W)` where:",
                " - `W` is the category depth",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "create_thread",
              "args": [
                {
                  "name": "forum_user_id",
                  "type": "ForumUserId"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "metadata",
                  "type": "Bytes"
                },
                {
                  "name": "text",
                  "type": "Bytes"
                },
                {
                  "name": "poll_input",
                  "type": "Option<PollInput>"
                }
              ],
              "docs": [
                " Create new thread in category with poll",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V + X + Y)` where:",
                " - `W` is the category depth",
                " - `V` is the length of the thread title.",
                " - `X` is the length of the thread text.",
                " - `Y` is the number of poll alternatives.",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "edit_thread_metadata",
              "args": [
                {
                  "name": "forum_user_id",
                  "type": "ForumUserId"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "new_metadata",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Edit thread metadata",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V)` where:",
                " - `W` is the category depth",
                " - `V` is the length of the thread metadata.",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "delete_thread",
              "args": [
                {
                  "name": "forum_user_id",
                  "type": "ForumUserId"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "hide",
                  "type": "bool"
                }
              ],
              "docs": [
                " Delete thread",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W)` where:",
                " - `W` is the category depth",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "move_thread_to_category",
              "args": [
                {
                  "name": "actor",
                  "type": "PrivilegedActor"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "new_category_id",
                  "type": "CategoryId"
                }
              ],
              "docs": [
                " Move thread to another category",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W)` where:",
                " - `W` is the category depth",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "vote_on_poll",
              "args": [
                {
                  "name": "forum_user_id",
                  "type": "ForumUserId"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "index",
                  "type": "u32"
                }
              ],
              "docs": [
                " Submit a poll",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V)` where:",
                " - `W` is the category depth,",
                " - `V` is the number of poll alternatives.",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "moderate_thread",
              "args": [
                {
                  "name": "actor",
                  "type": "PrivilegedActor"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "rationale",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Moderate thread",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V + X)` where:",
                " - `W` is the category depth,",
                " - `V` is the number of thread posts,",
                " - `X` is the length of the rationale",
                " - DB:",
                "    - O(W + V)",
                " # </weight>"
              ]
            },
            {
              "name": "add_post",
              "args": [
                {
                  "name": "forum_user_id",
                  "type": "ForumUserId"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "text",
                  "type": "Bytes"
                },
                {
                  "name": "editable",
                  "type": "bool"
                }
              ],
              "docs": [
                " Add post",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V)` where:",
                " - `W` is the category depth,",
                " - `V` is the length of the text",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "react_post",
              "args": [
                {
                  "name": "forum_user_id",
                  "type": "ForumUserId"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "post_id",
                  "type": "PostId"
                },
                {
                  "name": "react",
                  "type": "PostReactionId"
                }
              ],
              "docs": [
                " Like or unlike a post.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W)` where:",
                " - `W` is the category depth,",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "edit_post_text",
              "args": [
                {
                  "name": "forum_user_id",
                  "type": "ForumUserId"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "post_id",
                  "type": "PostId"
                },
                {
                  "name": "new_text",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Edit post text",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V)` where:",
                " - `W` is the category depth,",
                " - `V` is the length of the new text",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "moderate_post",
              "args": [
                {
                  "name": "actor",
                  "type": "PrivilegedActor"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "post_id",
                  "type": "PostId"
                },
                {
                  "name": "rationale",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Moderate post",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V)` where:",
                " - `W` is the category depth,",
                " - `V` is the length of the rationale",
                " - DB:",
                "    - O(W)",
                " # </weight>"
              ]
            },
            {
              "name": "delete_posts",
              "args": [
                {
                  "name": "forum_user_id",
                  "type": "ForumUserId"
                },
                {
                  "name": "posts",
                  "type": "BTreeMap<ExtendedPostId,bool>"
                },
                {
                  "name": "rationale",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Delete post from storage.",
                " You need to provide a vector of posts to delete in the form",
                " (T::CategoryId, T::ThreadId, T::PostId, bool)",
                " where the last bool is whether you want to hide it apart from deleting it",
                "",
                " ## Weight",
                " `O (W + V + P)` where:",
                " - `W` is the category depth,",
                " - `V` is the length of the rationale",
                " - `P` is the number of posts to delete",
                " - DB:",
                "    - O(W + P)",
                " # </weight>"
              ]
            },
            {
              "name": "set_stickied_threads",
              "args": [
                {
                  "name": "actor",
                  "type": "PrivilegedActor"
                },
                {
                  "name": "category_id",
                  "type": "CategoryId"
                },
                {
                  "name": "stickied_ids",
                  "type": "Vec<ThreadId>"
                }
              ],
              "docs": [
                " Set stickied threads for category",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W + V)` where:",
                " - `W` is the category depth,",
                " - `V` is the length of the stickied_ids",
                " - DB:",
                "    - O(W + V)",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "CategoryCreated",
              "args": [
                "CategoryId",
                "Option<CategoryId>",
                "Bytes",
                "Bytes"
              ],
              "docs": [
                " A category was introduced"
              ]
            },
            {
              "name": "CategoryArchivalStatusUpdated",
              "args": [
                "CategoryId",
                "bool",
                "PrivilegedActor"
              ],
              "docs": [
                " An arhical status of category with given id was updated.",
                " The second argument reflects the new archival status of the category."
              ]
            },
            {
              "name": "CategoryTitleUpdated",
              "args": [
                "CategoryId",
                "Hash",
                "PrivilegedActor"
              ],
              "docs": [
                " A title of category with given id was updated.",
                " The second argument reflects the new title hash of the category."
              ]
            },
            {
              "name": "CategoryDescriptionUpdated",
              "args": [
                "CategoryId",
                "Hash",
                "PrivilegedActor"
              ],
              "docs": [
                " A discription of category with given id was updated.",
                " The second argument reflects the new description hash of the category."
              ]
            },
            {
              "name": "CategoryDeleted",
              "args": [
                "CategoryId",
                "PrivilegedActor"
              ],
              "docs": [
                " A category was deleted"
              ]
            },
            {
              "name": "ThreadCreated",
              "args": [
                "CategoryId",
                "ThreadId",
                "PostId",
                "ForumUserId",
                "Bytes",
                "Bytes",
                "Option<PollInput>"
              ],
              "docs": [
                " A thread with given id was created.",
                " A third argument reflects the initial post id of the thread."
              ]
            },
            {
              "name": "ThreadModerated",
              "args": [
                "ThreadId",
                "Bytes",
                "PrivilegedActor",
                "CategoryId"
              ],
              "docs": [
                " A thread with given id was moderated."
              ]
            },
            {
              "name": "ThreadUpdated",
              "args": [
                "ThreadId",
                "bool",
                "PrivilegedActor",
                "CategoryId"
              ],
              "docs": [
                " A thread with given id was updated.",
                " The second argument reflects the new archival status of the thread."
              ]
            },
            {
              "name": "ThreadMetadataUpdated",
              "args": [
                "ThreadId",
                "ForumUserId",
                "CategoryId",
                "Bytes"
              ],
              "docs": [
                " A thread metadata given id was updated."
              ]
            },
            {
              "name": "ThreadDeleted",
              "args": [
                "ThreadId",
                "ForumUserId",
                "CategoryId",
                "bool"
              ],
              "docs": [
                " A thread was deleted."
              ]
            },
            {
              "name": "ThreadMoved",
              "args": [
                "ThreadId",
                "CategoryId",
                "PrivilegedActor",
                "CategoryId"
              ],
              "docs": [
                " A thread was moved to new category"
              ]
            },
            {
              "name": "PostAdded",
              "args": [
                "PostId",
                "ForumUserId",
                "CategoryId",
                "ThreadId",
                "Bytes",
                "bool"
              ],
              "docs": [
                " Post with given id was created."
              ]
            },
            {
              "name": "PostModerated",
              "args": [
                "PostId",
                "Bytes",
                "PrivilegedActor",
                "CategoryId",
                "ThreadId"
              ],
              "docs": [
                " Post with givne id was moderated."
              ]
            },
            {
              "name": "PostDeleted",
              "args": [
                "Bytes",
                "ForumUserId",
                "BTreeMap<ExtendedPostId,bool>"
              ],
              "docs": [
                " Post with givne id was deleted."
              ]
            },
            {
              "name": "PostTextUpdated",
              "args": [
                "PostId",
                "ForumUserId",
                "CategoryId",
                "ThreadId",
                "Bytes"
              ],
              "docs": [
                " Post with given id had its text updated.",
                " The second argument reflects the number of total edits when the text update occurs."
              ]
            },
            {
              "name": "PostReacted",
              "args": [
                "ForumUserId",
                "PostId",
                "PostReactionId",
                "CategoryId",
                "ThreadId"
              ],
              "docs": [
                " Thumb up post"
              ]
            },
            {
              "name": "VoteOnPoll",
              "args": [
                "ThreadId",
                "u32",
                "ForumUserId",
                "CategoryId"
              ],
              "docs": [
                " Vote on poll"
              ]
            },
            {
              "name": "CategoryStickyThreadUpdate",
              "args": [
                "CategoryId",
                "Vec<ThreadId>",
                "PrivilegedActor"
              ],
              "docs": [
                " Sticky thread updated for category"
              ]
            },
            {
              "name": "CategoryMembershipOfModeratorUpdated",
              "args": [
                "ModeratorId",
                "CategoryId",
                "bool"
              ],
              "docs": [
                " An moderator ability to moderate a category and its subcategories updated"
              ]
            }
          ],
          "constants": [
            {
              "name": "PostDeposit",
              "type": "BalanceOf",
              "value": "0x0a000000000000000000000000000000",
              "docs": [
                " Exports const",
                " Deposit needed to create a post"
              ]
            },
            {
              "name": "ThreadDeposit",
              "type": "BalanceOf",
              "value": "0x1e000000000000000000000000000000",
              "docs": [
                " Deposit needed to create a thread"
              ]
            }
          ],
          "errors": [
            {
              "name": "OriginNotForumLead",
              "docs": [
                " Origin doesn't correspond to any lead account"
              ]
            },
            {
              "name": "ForumUserIdNotMatchAccount",
              "docs": [
                " Forum user id not match its account."
              ]
            },
            {
              "name": "ModeratorIdNotMatchAccount",
              "docs": [
                " Moderator id not match its account."
              ]
            },
            {
              "name": "AccountDoesNotMatchThreadAuthor",
              "docs": [
                " Thread not authored by the given user."
              ]
            },
            {
              "name": "ThreadDoesNotExist",
              "docs": [
                " Thread does not exist"
              ]
            },
            {
              "name": "ModeratorModerateOriginCategory",
              "docs": [
                " Moderator can't moderate category containing thread."
              ]
            },
            {
              "name": "ModeratorModerateDestinationCategory",
              "docs": [
                " Moderator can't moderate destination category."
              ]
            },
            {
              "name": "ThreadMoveInvalid",
              "docs": [
                " Origin is the same as the destination."
              ]
            },
            {
              "name": "ThreadNotBeingUpdated",
              "docs": [
                " Thread not being updated."
              ]
            },
            {
              "name": "InsufficientBalanceForThreadCreation",
              "docs": [
                " Not enough balance to create thread"
              ]
            },
            {
              "name": "PostDoesNotExist",
              "docs": [
                " Post does not exist."
              ]
            },
            {
              "name": "AccountDoesNotMatchPostAuthor",
              "docs": [
                " Account does not match post author."
              ]
            },
            {
              "name": "InsufficientBalanceForPost",
              "docs": [
                " Not enough balance to post"
              ]
            },
            {
              "name": "CategoryNotBeingUpdated",
              "docs": [
                " Category not being updated."
              ]
            },
            {
              "name": "AncestorCategoryImmutable",
              "docs": [
                " Ancestor category immutable, i.e. deleted or archived"
              ]
            },
            {
              "name": "MaxValidCategoryDepthExceeded",
              "docs": [
                " Maximum valid category depth exceeded."
              ]
            },
            {
              "name": "CategoryDoesNotExist",
              "docs": [
                " Category does not exist."
              ]
            },
            {
              "name": "CategoryModeratorDoesNotExist",
              "docs": [
                " Provided moderator is not given category moderator"
              ]
            },
            {
              "name": "CategoryNotEmptyThreads",
              "docs": [
                " Category still contains some threads."
              ]
            },
            {
              "name": "CategoryNotEmptyCategories",
              "docs": [
                " Category still contains some subcategories."
              ]
            },
            {
              "name": "ModeratorCantDeleteCategory",
              "docs": [
                " No permissions to delete category."
              ]
            },
            {
              "name": "ModeratorCantUpdateCategory",
              "docs": [
                " No permissions to update category."
              ]
            },
            {
              "name": "StickiedThreadIdsDuplicates",
              "docs": [
                " Duplicates for the stickied thread id collection."
              ]
            },
            {
              "name": "PollAlternativesTooShort",
              "docs": [
                " Poll items number too short."
              ]
            },
            {
              "name": "PollNotExist",
              "docs": [
                " Poll not exist."
              ]
            },
            {
              "name": "PollTimeSetting",
              "docs": [
                " Poll date setting is wrong."
              ]
            },
            {
              "name": "PollData",
              "docs": [
                " Poll data committed is wrong."
              ]
            },
            {
              "name": "PollCommitExpired",
              "docs": [
                " Poll data committed after poll expired."
              ]
            },
            {
              "name": "AlreadyVotedOnPoll",
              "docs": [
                " Forum user has already voted."
              ]
            },
            {
              "name": "DataMigrationNotDone",
              "docs": [
                " data migration not done yet."
              ]
            },
            {
              "name": "MapSizeLimit",
              "docs": [
                " Maximum size of storage map exceeded"
              ]
            },
            {
              "name": "PathLengthShouldBeGreaterThanZero",
              "docs": [
                " Category path len should be greater than zero"
              ]
            }
          ],
          "index": 21
        },
        {
          "name": "Constitution",
          "storage": {
            "prefix": "Constitution",
            "items": [
              {
                "name": "Constitution",
                "modifier": "Default",
                "type": {
                  "plain": "ConstitutionInfo"
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": [
            {
              "name": "amend_constitution",
              "args": [
                {
                  "name": "constitution_text",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Sets the current constitution hash. Requires root origin.",
                " # <weight>",
                " - Complexity: `O(C)` where C is the length of the constitution text.",
                " - Db reads: 0",
                " - Db writes: 1 (constant value)",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "ConstutionAmended",
              "args": [
                "Bytes",
                "Bytes"
              ],
              "docs": [
                " Emits on constitution amendment.",
                " Parameters:",
                " - constitution text hash",
                " - constitution text"
              ]
            }
          ],
          "constants": [],
          "errors": [],
          "index": 22
        },
        {
          "name": "Bounty",
          "storage": {
            "prefix": "Bounty",
            "items": [
              {
                "name": "Bounties",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "BountyId",
                    "value": "Bounty",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Bounty storage."
                ]
              },
              {
                "name": "BountyContributions",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "BountyId",
                    "key2": "BountyActor",
                    "value": "BalanceOf",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Double map for bounty funding. It stores a member or council funding for bounties."
                ]
              },
              {
                "name": "BountyCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of all bounties that have been created."
                ]
              },
              {
                "name": "Entries",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "EntryId",
                    "value": "Entry",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Work entry storage map."
                ]
              },
              {
                "name": "EntryCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of all work entries that have been created."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "create_bounty",
              "args": [
                {
                  "name": "params",
                  "type": "BountyCreationParameters"
                },
                {
                  "name": "metadata",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Creates a bounty. Metadata stored in the transaction log but discarded after that.",
                " <weight>",
                "",
                " ## Weight",
                " `O (W)` where:",
                " - `W` is the _metadata length.",
                " - `M` is closed contract member list length.",
                " - DB:",
                "    - O(M) (O(1) on open contract)",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_bounty",
              "args": [
                {
                  "name": "creator",
                  "type": "BountyActor"
                },
                {
                  "name": "bounty_id",
                  "type": "BountyId"
                }
              ],
              "docs": [
                " Cancels a bounty.",
                " It returns a cherry to creator and removes bounty.",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "veto_bounty",
              "args": [
                {
                  "name": "bounty_id",
                  "type": "BountyId"
                }
              ],
              "docs": [
                " Vetoes a bounty.",
                " It returns a cherry to creator and removes bounty.",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fund_bounty",
              "args": [
                {
                  "name": "funder",
                  "type": "BountyActor"
                },
                {
                  "name": "bounty_id",
                  "type": "BountyId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Provides bounty funding.",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_funding",
              "args": [
                {
                  "name": "funder",
                  "type": "BountyActor"
                },
                {
                  "name": "bounty_id",
                  "type": "BountyId"
                }
              ],
              "docs": [
                " Withdraw bounty funding by a member or a council.",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "announce_work_entry",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "bounty_id",
                  "type": "BountyId"
                },
                {
                  "name": "staking_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Announce work entry for a successful bounty.",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_work_entry",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "bounty_id",
                  "type": "BountyId"
                },
                {
                  "name": "entry_id",
                  "type": "EntryId"
                }
              ],
              "docs": [
                " Withdraw work entry for a bounty. Existing stake could be partially slashed.",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "submit_work",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "bounty_id",
                  "type": "BountyId"
                },
                {
                  "name": "entry_id",
                  "type": "EntryId"
                },
                {
                  "name": "work_data",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Submit work for a bounty.",
                " # <weight>",
                "",
                " ## weight",
                " `O (N)`",
                " - `N` is the work_data length,",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "submit_oracle_judgment",
              "args": [
                {
                  "name": "oracle",
                  "type": "BountyActor"
                },
                {
                  "name": "bounty_id",
                  "type": "BountyId"
                },
                {
                  "name": "judgment",
                  "type": "OracleJudgment"
                }
              ],
              "docs": [
                " Submits an oracle judgment for a bounty.",
                " # <weight>",
                "",
                " ## weight",
                " `O (N)`",
                " - `N` is the work_data length,",
                " - db:",
                "    - `O(N)`",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_work_entrant_funds",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "bounty_id",
                  "type": "BountyId"
                },
                {
                  "name": "entry_id",
                  "type": "EntryId"
                }
              ],
              "docs": [
                " Withdraw work entrant funds.",
                " Both legitimate participants and winners get their stake unlocked. Winners also get a",
                " bounty reward.",
                " # <weight>",
                "",
                " ## weight",
                " `O (1)`",
                " - db:",
                "    - `O(1)` doesn't depend on the state or parameters",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "BountyCreated",
              "args": [
                "BountyId",
                "BountyCreationParameters",
                "Bytes"
              ],
              "docs": [
                " A bounty was created.",
                " Params:",
                " - bounty ID",
                " - creation parameters",
                " - bounty metadata"
              ]
            },
            {
              "name": "BountyCanceled",
              "args": [
                "BountyId",
                "BountyActor"
              ],
              "docs": [
                " A bounty was canceled.",
                " Params:",
                " - bounty ID",
                " - bounty creator"
              ]
            },
            {
              "name": "BountyVetoed",
              "args": [
                "BountyId"
              ],
              "docs": [
                " A bounty was vetoed.",
                " Params:",
                " - bounty ID"
              ]
            },
            {
              "name": "BountyFunded",
              "args": [
                "BountyId",
                "BountyActor",
                "Balance"
              ],
              "docs": [
                " A bounty was funded by a member or a council.",
                " Params:",
                " - bounty ID",
                " - bounty funder",
                " - funding amount"
              ]
            },
            {
              "name": "BountyMaxFundingReached",
              "args": [
                "BountyId"
              ],
              "docs": [
                " A bounty has reached its maximum funding amount.",
                " Params:",
                " - bounty ID"
              ]
            },
            {
              "name": "BountyFundingWithdrawal",
              "args": [
                "BountyId",
                "BountyActor"
              ],
              "docs": [
                " A member or a council has withdrawn the funding.",
                " Params:",
                " - bounty ID",
                " - bounty funder"
              ]
            },
            {
              "name": "BountyCreatorCherryWithdrawal",
              "args": [
                "BountyId",
                "BountyActor"
              ],
              "docs": [
                " A bounty creator has withdrawn the cherry (member or council).",
                " Params:",
                " - bounty ID",
                " - bounty creator"
              ]
            },
            {
              "name": "BountyRemoved",
              "args": [
                "BountyId"
              ],
              "docs": [
                " A bounty was removed.",
                " Params:",
                " - bounty ID"
              ]
            },
            {
              "name": "WorkEntryAnnounced",
              "args": [
                "BountyId",
                "EntryId",
                "MemberId",
                "AccountId"
              ],
              "docs": [
                " Work entry was announced.",
                " Params:",
                " - bounty ID",
                " - created entry ID",
                " - entrant member ID",
                " - staking account ID"
              ]
            },
            {
              "name": "WorkEntryWithdrawn",
              "args": [
                "BountyId",
                "EntryId",
                "MemberId"
              ],
              "docs": [
                " Work entry was withdrawn.",
                " Params:",
                " - bounty ID",
                " - entry ID",
                " - entrant member ID"
              ]
            },
            {
              "name": "WorkEntrySlashed",
              "args": [
                "BountyId",
                "EntryId"
              ],
              "docs": [
                " Work entry was slashed.",
                " Params:",
                " - bounty ID",
                " - entry ID"
              ]
            },
            {
              "name": "WorkSubmitted",
              "args": [
                "BountyId",
                "EntryId",
                "MemberId",
                "Bytes"
              ],
              "docs": [
                " Submit work.",
                " Params:",
                " - bounty ID",
                " - created entry ID",
                " - entrant member ID",
                " - work data (description, URL, BLOB, etc.)"
              ]
            },
            {
              "name": "OracleJudgmentSubmitted",
              "args": [
                "BountyId",
                "BountyActor",
                "OracleJudgment"
              ],
              "docs": [
                " Submit oracle judgment.",
                " Params:",
                " - bounty ID",
                " - oracle",
                " - judgment data"
              ]
            },
            {
              "name": "WorkEntrantFundsWithdrawn",
              "args": [
                "BountyId",
                "EntryId",
                "MemberId"
              ],
              "docs": [
                " Work entry was slashed.",
                " Params:",
                " - bounty ID",
                " - entry ID",
                " - entrant member ID"
              ]
            }
          ],
          "constants": [
            {
              "name": "ClosedContractSizeLimit",
              "type": "u32",
              "value": "0x32000000",
              "docs": [
                " Exports const - max work entry number for a closed assurance type contract bounty."
              ]
            },
            {
              "name": "MinCherryLimit",
              "type": "BalanceOf",
              "value": "0x0a000000000000000000000000000000",
              "docs": [
                " Exports const - min cherry value limit for a bounty."
              ]
            },
            {
              "name": "MinFundingLimit",
              "type": "BalanceOf",
              "value": "0x0a000000000000000000000000000000",
              "docs": [
                " Exports const - min funding amount limit for a bounty."
              ]
            },
            {
              "name": "MinWorkEntrantStake",
              "type": "BalanceOf",
              "value": "0x64000000000000000000000000000000",
              "docs": [
                " Exports const - min work entrant stake for a bounty."
              ]
            },
            {
              "name": "BountyLockId",
              "type": "LockIdentifier",
              "value": "0x0c0c0c0c0c0c0c0c",
              "docs": [
                " Exports const - bounty lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "MinFundingAmountCannotBeGreaterThanMaxAmount",
              "docs": [
                " Min funding amount cannot be greater than max amount."
              ]
            },
            {
              "name": "BountyDoesntExist",
              "docs": [
                " Bounty doesnt exist."
              ]
            },
            {
              "name": "NotBountyActor",
              "docs": [
                " Operation can be performed only by a bounty creator."
              ]
            },
            {
              "name": "WorkPeriodCannotBeZero",
              "docs": [
                " Work period cannot be zero."
              ]
            },
            {
              "name": "JudgingPeriodCannotBeZero",
              "docs": [
                " Judging period cannot be zero."
              ]
            },
            {
              "name": "InvalidStageUnexpectedFunding",
              "docs": [
                " Unexpected bounty stage for an operation: Funding."
              ]
            },
            {
              "name": "InvalidStageUnexpectedFundingExpired",
              "docs": [
                " Unexpected bounty stage for an operation: FundingExpired."
              ]
            },
            {
              "name": "InvalidStageUnexpectedWorkSubmission",
              "docs": [
                " Unexpected bounty stage for an operation: WorkSubmission."
              ]
            },
            {
              "name": "InvalidStageUnexpectedJudgment",
              "docs": [
                " Unexpected bounty stage for an operation: Judgment."
              ]
            },
            {
              "name": "InvalidStageUnexpectedSuccessfulBountyWithdrawal",
              "docs": [
                " Unexpected bounty stage for an operation: SuccessfulBountyWithdrawal."
              ]
            },
            {
              "name": "InvalidStageUnexpectedFailedBountyWithdrawal",
              "docs": [
                " Unexpected bounty stage for an operation: FailedBountyWithdrawal."
              ]
            },
            {
              "name": "InsufficientBalanceForBounty",
              "docs": [
                " Insufficient balance for a bounty cherry."
              ]
            },
            {
              "name": "FundingPeriodNotExpired",
              "docs": [
                " Funding period is not expired for the bounty."
              ]
            },
            {
              "name": "NoBountyContributionFound",
              "docs": [
                " Cannot found bounty contribution."
              ]
            },
            {
              "name": "NothingToWithdraw",
              "docs": [
                " There is nothing to withdraw."
              ]
            },
            {
              "name": "ZeroFundingAmount",
              "docs": [
                " Incorrect funding amount."
              ]
            },
            {
              "name": "InsufficientBalanceForStake",
              "docs": [
                " There is not enough balance for a stake."
              ]
            },
            {
              "name": "ConflictingStakes",
              "docs": [
                " The conflicting stake discovered. Cannot stake."
              ]
            },
            {
              "name": "WorkEntryDoesntExist",
              "docs": [
                " Work entry doesnt exist."
              ]
            },
            {
              "name": "MaxWorkEntryLimitReached",
              "docs": [
                " Cannot add work entry because of the limit."
              ]
            },
            {
              "name": "CherryLessThenMinimumAllowed",
              "docs": [
                " Cherry less then minimum allowed."
              ]
            },
            {
              "name": "FundingLessThenMinimumAllowed",
              "docs": [
                " Funding amount less then minimum allowed."
              ]
            },
            {
              "name": "CannotSubmitWorkToClosedContractBounty",
              "docs": [
                " Incompatible assurance contract type for a member: cannot submit work to the 'closed",
                " assurance' bounty contract."
              ]
            },
            {
              "name": "ClosedContractMemberListIsEmpty",
              "docs": [
                " Cannot create a 'closed assurance contract' bounty with empty member list."
              ]
            },
            {
              "name": "ClosedContractMemberListIsTooLarge",
              "docs": [
                " Cannot create a 'closed assurance contract' bounty with member list larger",
                " than allowed max work entry limit."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ZeroWinnerReward",
              "docs": [
                " Cannot set zero reward for winners."
              ]
            },
            {
              "name": "TotalRewardShouldBeEqualToTotalFunding",
              "docs": [
                " The total reward for winners should be equal to total bounty funding."
              ]
            },
            {
              "name": "EntrantStakeIsLessThanMininum",
              "docs": [
                " Cannot create a bounty with an entrant stake is less than required minimum."
              ]
            },
            {
              "name": "FundingAmountCannotBeZero",
              "docs": [
                " Cannot create a bounty with zero funding amount parameter."
              ]
            },
            {
              "name": "FundingPeriodCannotBeZero",
              "docs": [
                " Cannot create a bounty with zero funding period parameter."
              ]
            },
            {
              "name": "NoActiveWorkEntries",
              "docs": [
                " Cannot submit a judgment without active work entries. A probable case for an error:",
                " an entry with a single submission for a bounty was withdrawn."
              ]
            },
            {
              "name": "WinnerShouldHasWorkSubmission",
              "docs": [
                " Invalid judgment - all winners should have work submissions."
              ]
            }
          ],
          "index": 23
        },
        {
          "name": "Blog",
          "storage": {
            "prefix": "Instance1BlogModule",
            "items": [
              {
                "name": "PostCount",
                "modifier": "Default",
                "type": {
                  "plain": "PostId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Maps, representing id => item relationship for blogs, posts and replies related structures",
                  " Post count"
                ]
              },
              {
                "name": "PostById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "PostId",
                    "value": "Post",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Post by unique blog and post identificators"
                ]
              },
              {
                "name": "ReplyById",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "PostId",
                    "key2": "ReplyId",
                    "value": "Reply",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Reply by unique blog, post and reply identificators"
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "create_post",
              "args": [
                {
                  "name": "title",
                  "type": "Bytes"
                },
                {
                  "name": "body",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Blog owner can create posts, related to a given blog, if related blog is unlocked",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (T + B)` where:",
                " - `T` is the length of the title",
                " - `B` is the length of the body",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "lock_post",
              "args": [
                {
                  "name": "post_id",
                  "type": "PostId"
                }
              ],
              "docs": [
                " Blog owner can lock posts, related to a given blog,",
                " making post immutable to any actions (replies creation, post editing, etc.)",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)` doesn't depends on the state or parameters",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "unlock_post",
              "args": [
                {
                  "name": "post_id",
                  "type": "PostId"
                }
              ],
              "docs": [
                " Blog owner can unlock posts, related to a given blog,",
                " making post accesible to previously forbidden actions",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)` doesn't depends on the state or parameters",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "edit_post",
              "args": [
                {
                  "name": "post_id",
                  "type": "PostId"
                },
                {
                  "name": "new_title",
                  "type": "Option<Bytes>"
                },
                {
                  "name": "new_body",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Blog owner can edit post, related to a given blog (if unlocked)",
                " with a new title and/or body",
                " <weight>",
                "",
                " ## Weight",
                " `O (T + B)` where:",
                " - `T` is the length of the `new_title`",
                " - `B` is the length of the `new_body`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "create_reply",
              "args": [
                {
                  "name": "participant_id",
                  "type": "ParticipantId"
                },
                {
                  "name": "post_id",
                  "type": "PostId"
                },
                {
                  "name": "reply_id",
                  "type": "Option<ReplyId>"
                },
                {
                  "name": "text",
                  "type": "Bytes"
                },
                {
                  "name": "editable",
                  "type": "bool"
                }
              ],
              "docs": [
                " Create either root post reply or direct reply to reply",
                " (Only accessible, if related blog and post are unlocked)",
                " <weight>",
                "",
                " ## Weight",
                " `O (T)` where:",
                " - `T` is the length of the `text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "edit_reply",
              "args": [
                {
                  "name": "participant_id",
                  "type": "ParticipantId"
                },
                {
                  "name": "post_id",
                  "type": "PostId"
                },
                {
                  "name": "reply_id",
                  "type": "ReplyId"
                },
                {
                  "name": "new_text",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Reply owner can edit reply with a new text",
                " (Only accessible, if related blog and post are unlocked)",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (T)` where:",
                " - `T` is the length of the `new_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "delete_replies",
              "args": [
                {
                  "name": "participant_id",
                  "type": "ParticipantId"
                },
                {
                  "name": "replies",
                  "type": "Vec<ReplyToDelete>"
                }
              ],
              "docs": [
                " Remove reply from storage",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (R)` where",
                " - R is the number of replies to be deleted",
                " - DB:",
                "    - O(R)",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "PostCreated",
              "args": [
                "PostId",
                "Title",
                "Text"
              ],
              "docs": [
                " A post was created"
              ]
            },
            {
              "name": "PostLocked",
              "args": [
                "PostId"
              ],
              "docs": [
                " A post was locked"
              ]
            },
            {
              "name": "PostUnlocked",
              "args": [
                "PostId"
              ],
              "docs": [
                " A post was unlocked"
              ]
            },
            {
              "name": "PostEdited",
              "args": [
                "PostId",
                "UpdatedTitle",
                "UpdatedBody"
              ],
              "docs": [
                " A post was edited"
              ]
            },
            {
              "name": "ReplyCreated",
              "args": [
                "ParticipantId",
                "PostId",
                "ReplyId",
                "Text",
                "bool"
              ],
              "docs": [
                " A reply to a post was created"
              ]
            },
            {
              "name": "DirectReplyCreated",
              "args": [
                "ParticipantId",
                "PostId",
                "ReplyId",
                "ReplyId",
                "Text",
                "bool"
              ],
              "docs": [
                " A reply to a reply was created"
              ]
            },
            {
              "name": "ReplyDeleted",
              "args": [
                "ParticipantId",
                "PostId",
                "ReplyId",
                "bool"
              ],
              "docs": [
                " A reply was deleted from storage"
              ]
            },
            {
              "name": "ReplyEdited",
              "args": [
                "ParticipantId",
                "PostId",
                "ReplyId",
                "Text"
              ],
              "docs": [
                " A reply was edited"
              ]
            }
          ],
          "constants": [],
          "errors": [
            {
              "name": "BlogOwnershipError",
              "docs": [
                " A non-owner is trying to do a privilegeded action."
              ]
            },
            {
              "name": "MembershipError",
              "docs": [
                " A non-member is trying to participate"
              ]
            },
            {
              "name": "PostNotFound",
              "docs": [
                " Post do not exists."
              ]
            },
            {
              "name": "PostLockedError",
              "docs": [
                " Post is locked for modifications."
              ]
            },
            {
              "name": "ReplyNotFound",
              "docs": [
                " Reply do no exists."
              ]
            },
            {
              "name": "ReplyOwnershipError",
              "docs": [
                " A non-owner of a reply is trying to do a privileged action."
              ]
            },
            {
              "name": "PostLimitReached",
              "docs": [
                " Number of posts exceeds limits."
              ]
            },
            {
              "name": "InvalidReactionIndex",
              "docs": [
                " Reaction doesn't exists"
              ]
            },
            {
              "name": "InsufficientBalanceForReply",
              "docs": [
                " Insuficient balance for reply creation"
              ]
            },
            {
              "name": "InsufficientBalanceInPostAccount",
              "docs": [
                " This error represent the invalid state where there is not enough funds in a post",
                " account to pay off its delete"
              ]
            }
          ],
          "index": 24
        },
        {
          "name": "JoystreamUtility",
          "storage": null,
          "calls": [
            {
              "name": "execute_signal_proposal",
              "args": [
                {
                  "name": "signal",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Signal proposal extrinsic. Should be used as callable object to pass to the `engine` module.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the signal",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "execute_runtime_upgrade_proposal",
              "args": [
                {
                  "name": "wasm",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Runtime upgrade proposal extrinsic.",
                " Should be used as callable object to pass to the `engine` module.",
                " <weight>",
                "",
                " ## Weight",
                " `O (C)` where:",
                " - `C` is the length of `wasm`",
                " However, we treat this as a full block as `frame_system::Module::set_code` does",
                " # </weight>"
              ]
            },
            {
              "name": "update_working_group_budget",
              "args": [
                {
                  "name": "working_group",
                  "type": "WorkingGroup"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "balance_kind",
                  "type": "BalanceKind"
                }
              ],
              "docs": [
                " Update working group budget",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)` Doesn't depend on the state or parameters",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "burn_account_tokens",
              "args": [
                {
                  "name": "amount",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Burns token for caller account",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)` Doesn't depend on the state or parameters",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Signaled",
              "args": [
                "Bytes"
              ],
              "docs": [
                " A signal proposal was executed",
                " Params:",
                " - Signal given when creating the corresponding proposal"
              ]
            },
            {
              "name": "RuntimeUpgraded",
              "args": [
                "Bytes"
              ],
              "docs": [
                " A runtime upgrade was executed",
                " Params:",
                " - New code encoded in bytes"
              ]
            },
            {
              "name": "UpdatedWorkingGroupBudget",
              "args": [
                "WorkingGroup",
                "Balance",
                "BalanceKind"
              ],
              "docs": [
                " An `Update Working Group Budget` proposal was executed",
                " Params:",
                " - Working group which budget is being updated",
                " - Amount of balance being moved",
                " - Enum variant with positive indicating funds moved torwards working group and negative",
                " and negative funds moving from the working group"
              ]
            },
            {
              "name": "TokensBurned",
              "args": [
                "AccountId",
                "Balance"
              ],
              "docs": [
                " An account burned tokens",
                " Params:",
                " - Account Id of the burning tokens",
                " - Balance burned from that account"
              ]
            }
          ],
          "constants": [],
          "errors": [
            {
              "name": "InsufficientFundsForBudgetUpdate",
              "docs": [
                " Insufficient funds for 'Update Working Group Budget' proposal execution"
              ]
            },
            {
              "name": "ZeroTokensBurn",
              "docs": [
                " Trying to burn zero tokens"
              ]
            },
            {
              "name": "InsufficientFundsForBurn",
              "docs": [
                " Insufficient funds for burning"
              ]
            }
          ],
          "index": 25
        },
        {
          "name": "Content",
          "storage": {
            "prefix": "Content",
            "items": [
              {
                "name": "ChannelById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ChannelId",
                    "value": "Channel",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "ChannelCategoryById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ChannelCategoryId",
                    "value": "ChannelCategory",
                    "linked": false
                  }
                },
                "fallback": "0x",
                "docs": []
              },
              {
                "name": "VideoById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "VideoId",
                    "value": "Video",
                    "linked": false
                  }
                },
                "fallback": "0x000000000000000000000000",
                "docs": []
              },
              {
                "name": "VideoCategoryById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "VideoCategoryId",
                    "value": "VideoCategory",
                    "linked": false
                  }
                },
                "fallback": "0x",
                "docs": []
              },
              {
                "name": "PlaylistById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "PlaylistId",
                    "value": "Playlist",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "SeriesById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "SeriesId",
                    "value": "Series",
                    "linked": false
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": []
              },
              {
                "name": "PersonById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "PersonId",
                    "value": "Person",
                    "linked": false
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": []
              },
              {
                "name": "NextChannelCategoryId",
                "modifier": "Default",
                "type": {
                  "plain": "ChannelCategoryId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "NextChannelId",
                "modifier": "Default",
                "type": {
                  "plain": "ChannelId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "NextVideoCategoryId",
                "modifier": "Default",
                "type": {
                  "plain": "VideoCategoryId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "NextVideoId",
                "modifier": "Default",
                "type": {
                  "plain": "VideoId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "NextPlaylistId",
                "modifier": "Default",
                "type": {
                  "plain": "PlaylistId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "NextPersonId",
                "modifier": "Default",
                "type": {
                  "plain": "PersonId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "NextSeriesId",
                "modifier": "Default",
                "type": {
                  "plain": "SeriesId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "NextChannelOwnershipTransferRequestId",
                "modifier": "Default",
                "type": {
                  "plain": "ChannelOwnershipTransferRequestId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "NextCuratorGroupId",
                "modifier": "Default",
                "type": {
                  "plain": "CuratorGroupId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "CuratorGroupById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "CuratorGroupId",
                    "value": "CuratorGroup",
                    "linked": false
                  }
                },
                "fallback": "0x0000",
                "docs": []
              },
              {
                "name": "VideoPostById",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "VideoId",
                    "key2": "VideoPostId",
                    "value": "VideoPost",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x02000000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "NextVideoPostId",
                "modifier": "Default",
                "type": {
                  "plain": "VideoPostId"
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "ChannelMigration",
                "modifier": "Default",
                "type": {
                  "plain": "ChannelMigrationConfig"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "VideoMigration",
                "modifier": "Default",
                "type": {
                  "plain": "VideoMigrationConfig"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Commitment",
                "modifier": "Default",
                "type": {
                  "plain": "Hash"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "MaxRewardAllowed",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "MinCashoutAllowed",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": [
            {
              "name": "create_curator_group",
              "args": [],
              "docs": [
                " Add new curator group to runtime storage"
              ]
            },
            {
              "name": "set_curator_group_status",
              "args": [
                {
                  "name": "curator_group_id",
                  "type": "CuratorGroupId"
                },
                {
                  "name": "is_active",
                  "type": "bool"
                }
              ],
              "docs": [
                " Set `is_active` status for curator group under given `curator_group_id`"
              ]
            },
            {
              "name": "add_curator_to_group",
              "args": [
                {
                  "name": "curator_group_id",
                  "type": "CuratorGroupId"
                },
                {
                  "name": "curator_id",
                  "type": "CuratorId"
                }
              ],
              "docs": [
                " Add curator to curator group under given `curator_group_id`"
              ]
            },
            {
              "name": "remove_curator_from_group",
              "args": [
                {
                  "name": "curator_group_id",
                  "type": "CuratorGroupId"
                },
                {
                  "name": "curator_id",
                  "type": "CuratorId"
                }
              ],
              "docs": [
                " Remove curator from a given curator group"
              ]
            },
            {
              "name": "create_channel",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "params",
                  "type": "ChannelCreationParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "update_channel",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "channel_id",
                  "type": "ChannelId"
                },
                {
                  "name": "params",
                  "type": "ChannelUpdateParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "delete_channel",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "channel_id",
                  "type": "ChannelId"
                },
                {
                  "name": "num_objects_to_delete",
                  "type": "u64"
                }
              ],
              "docs": []
            },
            {
              "name": "update_channel_censorship_status",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "channel_id",
                  "type": "ChannelId"
                },
                {
                  "name": "is_censored",
                  "type": "bool"
                },
                {
                  "name": "rationale",
                  "type": "Bytes"
                }
              ],
              "docs": []
            },
            {
              "name": "create_channel_category",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "params",
                  "type": "ChannelCategoryCreationParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "update_channel_category",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "category_id",
                  "type": "ChannelCategoryId"
                },
                {
                  "name": "params",
                  "type": "ChannelCategoryUpdateParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "delete_channel_category",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "category_id",
                  "type": "ChannelCategoryId"
                }
              ],
              "docs": []
            },
            {
              "name": "create_video",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "channel_id",
                  "type": "ChannelId"
                },
                {
                  "name": "params",
                  "type": "VideoCreationParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "update_video",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "video_id",
                  "type": "VideoId"
                },
                {
                  "name": "params",
                  "type": "VideoUpdateParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "delete_video",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "video_id",
                  "type": "VideoId"
                },
                {
                  "name": "assets_to_remove",
                  "type": "BTreeSet<DataObjectId>"
                }
              ],
              "docs": []
            },
            {
              "name": "create_playlist",
              "args": [
                {
                  "name": "_actor",
                  "type": "ContentActor"
                },
                {
                  "name": "_channel_id",
                  "type": "ChannelId"
                },
                {
                  "name": "_params",
                  "type": "PlaylistCreationParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "update_playlist",
              "args": [
                {
                  "name": "_actor",
                  "type": "ContentActor"
                },
                {
                  "name": "_playlist",
                  "type": "PlaylistId"
                },
                {
                  "name": "_params",
                  "type": "PlaylistUpdateParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "delete_playlist",
              "args": [
                {
                  "name": "_actor",
                  "type": "ContentActor"
                },
                {
                  "name": "_channel_id",
                  "type": "ChannelId"
                },
                {
                  "name": "_playlist",
                  "type": "PlaylistId"
                }
              ],
              "docs": []
            },
            {
              "name": "set_featured_videos",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "list",
                  "type": "Vec<VideoId>"
                }
              ],
              "docs": []
            },
            {
              "name": "create_video_category",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "params",
                  "type": "VideoCategoryCreationParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "update_video_category",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "category_id",
                  "type": "VideoCategoryId"
                },
                {
                  "name": "params",
                  "type": "VideoCategoryUpdateParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "delete_video_category",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "category_id",
                  "type": "VideoCategoryId"
                }
              ],
              "docs": []
            },
            {
              "name": "create_person",
              "args": [
                {
                  "name": "_actor",
                  "type": "PersonActor"
                },
                {
                  "name": "_params",
                  "type": "PersonCreationParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "update_person",
              "args": [
                {
                  "name": "_actor",
                  "type": "PersonActor"
                },
                {
                  "name": "_person",
                  "type": "PersonId"
                },
                {
                  "name": "_params",
                  "type": "PersonUpdateParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "delete_person",
              "args": [
                {
                  "name": "_actor",
                  "type": "PersonActor"
                },
                {
                  "name": "_person",
                  "type": "PersonId"
                }
              ],
              "docs": []
            },
            {
              "name": "add_person_to_video",
              "args": [
                {
                  "name": "_actor",
                  "type": "ContentActor"
                },
                {
                  "name": "_video_id",
                  "type": "VideoId"
                },
                {
                  "name": "_person",
                  "type": "PersonId"
                }
              ],
              "docs": []
            },
            {
              "name": "remove_person_from_video",
              "args": [
                {
                  "name": "_actor",
                  "type": "ContentActor"
                },
                {
                  "name": "_video_id",
                  "type": "VideoId"
                }
              ],
              "docs": []
            },
            {
              "name": "update_video_censorship_status",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "video_id",
                  "type": "VideoId"
                },
                {
                  "name": "is_censored",
                  "type": "bool"
                },
                {
                  "name": "rationale",
                  "type": "Bytes"
                }
              ],
              "docs": []
            },
            {
              "name": "create_series",
              "args": [
                {
                  "name": "_actor",
                  "type": "ContentActor"
                },
                {
                  "name": "_channel_id",
                  "type": "ChannelId"
                },
                {
                  "name": "_params",
                  "type": "SeriesParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "update_series",
              "args": [
                {
                  "name": "_actor",
                  "type": "ContentActor"
                },
                {
                  "name": "_channel_id",
                  "type": "ChannelId"
                },
                {
                  "name": "_params",
                  "type": "SeriesParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "delete_series",
              "args": [
                {
                  "name": "_actor",
                  "type": "ContentActor"
                },
                {
                  "name": "_series",
                  "type": "SeriesId"
                }
              ],
              "docs": []
            },
            {
              "name": "create_post",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "params",
                  "type": "VideoPostCreationParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "edit_post_text",
              "args": [
                {
                  "name": "video_id",
                  "type": "VideoId"
                },
                {
                  "name": "post_id",
                  "type": "VideoPostId"
                },
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "new_text",
                  "type": "Bytes"
                }
              ],
              "docs": []
            },
            {
              "name": "delete_post",
              "args": [
                {
                  "name": "post_id",
                  "type": "VideoPostId"
                },
                {
                  "name": "video_id",
                  "type": "VideoId"
                },
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "params",
                  "type": "VideoPostDeletionParameters"
                }
              ],
              "docs": []
            },
            {
              "name": "react_to_post",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "video_id",
                  "type": "VideoId"
                },
                {
                  "name": "post_id",
                  "type": "VideoPostId"
                },
                {
                  "name": "reaction_id",
                  "type": "ReactionId"
                }
              ],
              "docs": []
            },
            {
              "name": "react_to_video",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "video_id",
                  "type": "VideoId"
                },
                {
                  "name": "reaction_id",
                  "type": "ReactionId"
                }
              ],
              "docs": []
            },
            {
              "name": "update_moderator_set",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "new_moderators",
                  "type": "BTreeSet<MemberId>"
                },
                {
                  "name": "channel_id",
                  "type": "ChannelId"
                }
              ],
              "docs": []
            },
            {
              "name": "update_commitment",
              "args": [
                {
                  "name": "new_commitment",
                  "type": "Hash"
                }
              ],
              "docs": []
            },
            {
              "name": "claim_channel_reward",
              "args": [
                {
                  "name": "actor",
                  "type": "ContentActor"
                },
                {
                  "name": "proof",
                  "type": "Vec<ProofElement>"
                },
                {
                  "name": "item",
                  "type": "PullPayment"
                }
              ],
              "docs": []
            },
            {
              "name": "update_max_reward_allowed",
              "args": [
                {
                  "name": "amount",
                  "type": "BalanceOf"
                }
              ],
              "docs": []
            },
            {
              "name": "update_min_cashout_allowed",
              "args": [
                {
                  "name": "amount",
                  "type": "BalanceOf"
                }
              ],
              "docs": []
            }
          ],
          "events": [
            {
              "name": "CuratorGroupCreated",
              "args": [
                "CuratorGroupId"
              ],
              "docs": []
            },
            {
              "name": "CuratorGroupStatusSet",
              "args": [
                "CuratorGroupId",
                "bool"
              ],
              "docs": []
            },
            {
              "name": "CuratorAdded",
              "args": [
                "CuratorGroupId",
                "CuratorId"
              ],
              "docs": []
            },
            {
              "name": "CuratorRemoved",
              "args": [
                "CuratorGroupId",
                "CuratorId"
              ],
              "docs": []
            },
            {
              "name": "ChannelCreated",
              "args": [
                "ContentActor",
                "ChannelId",
                "Channel",
                "ChannelCreationParameters"
              ],
              "docs": []
            },
            {
              "name": "ChannelUpdated",
              "args": [
                "ContentActor",
                "ChannelId",
                "Channel",
                "ChannelUpdateParameters"
              ],
              "docs": []
            },
            {
              "name": "ChannelAssetsRemoved",
              "args": [
                "ContentActor",
                "ChannelId",
                "BTreeSet<DataObjectId>",
                "Channel"
              ],
              "docs": []
            },
            {
              "name": "ChannelCensorshipStatusUpdated",
              "args": [
                "ContentActor",
                "ChannelId",
                "IsCensored",
                "Bytes"
              ],
              "docs": []
            },
            {
              "name": "ChannelOwnershipTransferRequested",
              "args": [
                "ContentActor",
                "ChannelOwnershipTransferRequestId",
                "ChannelOwnershipTransferRequest"
              ],
              "docs": []
            },
            {
              "name": "ChannelOwnershipTransferRequestWithdrawn",
              "args": [
                "ContentActor",
                "ChannelOwnershipTransferRequestId"
              ],
              "docs": []
            },
            {
              "name": "ChannelOwnershipTransferred",
              "args": [
                "ContentActor",
                "ChannelOwnershipTransferRequestId"
              ],
              "docs": []
            },
            {
              "name": "ChannelCategoryCreated",
              "args": [
                "ChannelCategoryId",
                "ChannelCategory",
                "ChannelCategoryCreationParameters"
              ],
              "docs": []
            },
            {
              "name": "ChannelCategoryUpdated",
              "args": [
                "ContentActor",
                "ChannelCategoryId",
                "ChannelCategoryUpdateParameters"
              ],
              "docs": []
            },
            {
              "name": "ChannelCategoryDeleted",
              "args": [
                "ContentActor",
                "ChannelCategoryId"
              ],
              "docs": []
            },
            {
              "name": "VideoCategoryCreated",
              "args": [
                "ContentActor",
                "VideoCategoryId",
                "VideoCategoryCreationParameters"
              ],
              "docs": []
            },
            {
              "name": "VideoCategoryUpdated",
              "args": [
                "ContentActor",
                "VideoCategoryId",
                "VideoCategoryUpdateParameters"
              ],
              "docs": []
            },
            {
              "name": "VideoCategoryDeleted",
              "args": [
                "ContentActor",
                "VideoCategoryId"
              ],
              "docs": []
            },
            {
              "name": "VideoCreated",
              "args": [
                "ContentActor",
                "ChannelId",
                "VideoId",
                "VideoCreationParameters"
              ],
              "docs": []
            },
            {
              "name": "VideoUpdated",
              "args": [
                "ContentActor",
                "VideoId",
                "VideoUpdateParameters"
              ],
              "docs": []
            },
            {
              "name": "VideoDeleted",
              "args": [
                "ContentActor",
                "VideoId"
              ],
              "docs": []
            },
            {
              "name": "VideoCensorshipStatusUpdated",
              "args": [
                "ContentActor",
                "VideoId",
                "IsCensored",
                "Bytes"
              ],
              "docs": []
            },
            {
              "name": "FeaturedVideosSet",
              "args": [
                "ContentActor",
                "Vec<VideoId>"
              ],
              "docs": []
            },
            {
              "name": "PlaylistCreated",
              "args": [
                "ContentActor",
                "PlaylistId",
                "PlaylistCreationParameters"
              ],
              "docs": []
            },
            {
              "name": "PlaylistUpdated",
              "args": [
                "ContentActor",
                "PlaylistId",
                "PlaylistUpdateParameters"
              ],
              "docs": []
            },
            {
              "name": "PlaylistDeleted",
              "args": [
                "ContentActor",
                "PlaylistId"
              ],
              "docs": []
            },
            {
              "name": "SeriesCreated",
              "args": [
                "ContentActor",
                "SeriesId",
                "StorageAssets",
                "SeriesParameters",
                "Series"
              ],
              "docs": []
            },
            {
              "name": "SeriesUpdated",
              "args": [
                "ContentActor",
                "SeriesId",
                "StorageAssets",
                "SeriesParameters",
                "Series"
              ],
              "docs": []
            },
            {
              "name": "SeriesDeleted",
              "args": [
                "ContentActor",
                "SeriesId"
              ],
              "docs": []
            },
            {
              "name": "PersonCreated",
              "args": [
                "ContentActor",
                "PersonId",
                "StorageAssets",
                "PersonCreationParameters"
              ],
              "docs": []
            },
            {
              "name": "PersonUpdated",
              "args": [
                "ContentActor",
                "PersonId",
                "StorageAssets",
                "PersonUpdateParameters"
              ],
              "docs": []
            },
            {
              "name": "PersonDeleted",
              "args": [
                "ContentActor",
                "PersonId"
              ],
              "docs": []
            },
            {
              "name": "ChannelDeleted",
              "args": [
                "ContentActor",
                "ChannelId"
              ],
              "docs": []
            },
            {
              "name": "VideoPostCreated",
              "args": [
                "VideoPost",
                "VideoPostId"
              ],
              "docs": []
            },
            {
              "name": "VideoPostTextUpdated",
              "args": [
                "ContentActor",
                "Bytes",
                "VideoPostId",
                "VideoId"
              ],
              "docs": []
            },
            {
              "name": "VideoPostDeleted",
              "args": [
                "VideoPost",
                "VideoPostId",
                "ContentActor"
              ],
              "docs": []
            },
            {
              "name": "ReactionToVideoPost",
              "args": [
                "MemberId",
                "VideoId",
                "VideoPostId",
                "ReactionId"
              ],
              "docs": []
            },
            {
              "name": "ReactionToVideo",
              "args": [
                "MemberId",
                "VideoId",
                "ReactionId"
              ],
              "docs": []
            },
            {
              "name": "ModeratorSetUpdated",
              "args": [
                "ChannelId",
                "ModeratorSet"
              ],
              "docs": []
            },
            {
              "name": "CommitmentUpdated",
              "args": [
                "Hash"
              ],
              "docs": []
            },
            {
              "name": "ChannelRewardUpdated",
              "args": [
                "Balance",
                "ChannelId"
              ],
              "docs": []
            },
            {
              "name": "MaxRewardUpdated",
              "args": [
                "Balance"
              ],
              "docs": []
            },
            {
              "name": "MinCashoutUpdated",
              "args": [
                "Balance"
              ],
              "docs": []
            }
          ],
          "constants": [
            {
              "name": "MaxNumberOfCuratorsPerGroup",
              "type": "MaxNumber",
              "value": "0x32000000",
              "docs": [
                " Exports const -  max number of curators per group"
              ]
            }
          ],
          "errors": [
            {
              "name": "FeatureNotImplemented",
              "docs": [
                " Feature Not Implemented"
              ]
            },
            {
              "name": "CuratorIsNotAMemberOfGivenCuratorGroup",
              "docs": [
                " Curator under provided curator id is not a member of curaror group under given id"
              ]
            },
            {
              "name": "CuratorIsAlreadyAMemberOfGivenCuratorGroup",
              "docs": [
                " Curator under provided curator id is already a member of curaror group under given id"
              ]
            },
            {
              "name": "CuratorGroupDoesNotExist",
              "docs": [
                " Given curator group does not exist"
              ]
            },
            {
              "name": "CuratorsPerGroupLimitReached",
              "docs": [
                " Max number of curators per group limit reached"
              ]
            },
            {
              "name": "CuratorGroupIsNotActive",
              "docs": [
                " Curator group is not active"
              ]
            },
            {
              "name": "CuratorIdInvalid",
              "docs": [
                " Curator id is not a worker id in content working group"
              ]
            },
            {
              "name": "LeadAuthFailed",
              "docs": [
                " Lead authentication failed"
              ]
            },
            {
              "name": "MemberAuthFailed",
              "docs": [
                " Member authentication failed"
              ]
            },
            {
              "name": "CuratorAuthFailed",
              "docs": [
                " Curator authentication failed"
              ]
            },
            {
              "name": "BadOrigin",
              "docs": [
                " Expected root or signed origin"
              ]
            },
            {
              "name": "ActorNotAuthorized",
              "docs": [
                " Operation cannot be perfomed with this Actor"
              ]
            },
            {
              "name": "ActorCannotOwnChannel",
              "docs": [
                " This content actor cannot own a channel"
              ]
            },
            {
              "name": "CategoryDoesNotExist",
              "docs": [
                " A Channel or Video Category does not exist."
              ]
            },
            {
              "name": "ChannelDoesNotExist",
              "docs": [
                " Channel does not exist"
              ]
            },
            {
              "name": "VideoDoesNotExist",
              "docs": [
                " Video does not exist"
              ]
            },
            {
              "name": "VideoInSeason",
              "docs": [
                " Vfdeo in season can`t be removed (because order is important)"
              ]
            },
            {
              "name": "CannotCensoreCuratorGroupOwnedChannels",
              "docs": [
                " Curators can only censor non-curator group owned channels"
              ]
            },
            {
              "name": "NoAssetsSpecified",
              "docs": [
                " No assets to be removed have been specified"
              ]
            },
            {
              "name": "InvalidAssetsProvided",
              "docs": [
                " Channel assets feasibility"
              ]
            },
            {
              "name": "ChannelContainsVideos",
              "docs": [
                " Channel Contains Video"
              ]
            },
            {
              "name": "ChannelContainsAssets",
              "docs": [
                " Channel Contains Assets"
              ]
            },
            {
              "name": "InvalidBagSizeSpecified",
              "docs": [
                " Bag Size specified is not valid"
              ]
            },
            {
              "name": "VideoPostDoesNotExist",
              "docs": [
                " VideoPost does not exists"
              ]
            },
            {
              "name": "MigrationNotFinished",
              "docs": [
                " Migration not done yet"
              ]
            },
            {
              "name": "ReplyDoesNotExist",
              "docs": [
                " Partecipant is not a member"
              ]
            },
            {
              "name": "CommentsDisabled",
              "docs": [
                " comments disabled"
              ]
            },
            {
              "name": "ModeratorsLimitReached",
              "docs": [
                " moderators limit reached"
              ]
            },
            {
              "name": "CannotEditDescription",
              "docs": [
                " cannot edit video post"
              ]
            },
            {
              "name": "WitnessVerificationFailed",
              "docs": [
                " failed witness verification"
              ]
            },
            {
              "name": "WitnessNotProvided",
              "docs": [
                " witness not provided"
              ]
            },
            {
              "name": "RationaleNotProvidedByModerator",
              "docs": [
                " rationale not provided"
              ]
            },
            {
              "name": "UnsufficientBalance",
              "docs": [
                " Insufficient balance"
              ]
            },
            {
              "name": "InsufficientTreasuryBalance",
              "docs": [
                " Insufficient treasury balance"
              ]
            },
            {
              "name": "InvalidMemberProvided",
              "docs": [
                " Invalid member id  specified"
              ]
            },
            {
              "name": "ActorNotAMember",
              "docs": [
                " Actor is not A Member"
              ]
            },
            {
              "name": "PaymentProofVerificationFailed",
              "docs": [
                " Payment Proof verification failed"
              ]
            },
            {
              "name": "TotalRewardLimitExceeded",
              "docs": [
                " Total reward too high"
              ]
            },
            {
              "name": "UnsufficientCashoutAmount",
              "docs": [
                " Cashout amount too small"
              ]
            },
            {
              "name": "RewardAccountNotFoundInChannel",
              "docs": [
                " Reward account is none"
              ]
            }
          ],
          "index": 26
        },
        {
          "name": "Storage",
          "storage": {
            "prefix": "Storage",
            "items": [
              {
                "name": "UploadingBlocked",
                "modifier": "Default",
                "type": {
                  "plain": "bool"
                },
                "fallback": "0x00",
                "docs": [
                  " Defines whether all new uploads blocked"
                ]
              },
              {
                "name": "Bags",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "BagId",
                    "value": "Bag",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000",
                "docs": [
                  " Bags storage map."
                ]
              },
              {
                "name": "NextStorageBucketId",
                "modifier": "Default",
                "type": {
                  "plain": "StorageBucketId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Storage bucket id counter. Starts at zero."
                ]
              },
              {
                "name": "NextDataObjectId",
                "modifier": "Default",
                "type": {
                  "plain": "DataObjectId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Data object id counter. Starts at zero."
                ]
              },
              {
                "name": "StorageBucketById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "StorageBucketId",
                    "value": "StorageBucket",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Storage buckets."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "Cid",
                    "value": "()",
                    "linked": false
                  }
                },
                "fallback": "0x",
                "docs": [
                  " Blacklisted data object hashes."
                ]
              },
              {
                "name": "CurrentBlacklistSize",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Blacklist collection counter."
                ]
              },
              {
                "name": "DataObjectPerMegabyteFee",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Size based pricing of new objects uploaded."
                ]
              },
              {
                "name": "StorageBucketsPerBagLimit",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " \"Storage buckets per bag\" number limit."
                ]
              },
              {
                "name": "VoucherMaxObjectsSizeLimit",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " \"Max objects size for a storage bucket voucher\" number limit."
                ]
              },
              {
                "name": "VoucherMaxObjectsNumberLimit",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " \"Max objects number for a storage  bucket voucher\" number limit."
                ]
              },
              {
                "name": "DynamicBagCreationPolicies",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "DynamicBagType",
                    "value": "DynamicBagCreationPolicy",
                    "linked": false
                  }
                },
                "fallback": "0x000000000000000000",
                "docs": [
                  " DynamicBagCreationPolicy by bag type storage map."
                ]
              },
              {
                "name": "DataObjectsById",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "BagId",
                    "key2": "DataObjectId",
                    "value": "DataObject",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000",
                "docs": [
                  " 'Data objects for bags' storage double map."
                ]
              },
              {
                "name": "NextDistributionBucketFamilyId",
                "modifier": "Default",
                "type": {
                  "plain": "DistributionBucketFamilyId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Distribution bucket family id counter. Starts at zero."
                ]
              },
              {
                "name": "DistributionBucketFamilyById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "DistributionBucketFamilyId",
                    "value": "DistributionBucketFamily",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Distribution bucket families."
                ]
              },
              {
                "name": "DistributionBucketByFamilyIdById",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "DistributionBucketFamilyId",
                    "key2": "DistributionBucketIndex",
                    "value": "DistributionBucket",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x000000000000000000000000",
                "docs": [
                  " 'Distribution bucket' storage double map."
                ]
              },
              {
                "name": "DistributionBucketFamilyNumber",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Total number of distribution bucket families in the system."
                ]
              },
              {
                "name": "DistributionBucketsPerBagLimit",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " \"Distribution buckets per bag\" number limit."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "delete_storage_bucket",
              "args": [
                {
                  "name": "storage_bucket_id",
                  "type": "StorageBucketId"
                }
              ],
              "docs": [
                " Delete storage bucket. Must be empty. Storage operator must be missing."
              ]
            },
            {
              "name": "update_uploading_blocked_status",
              "args": [
                {
                  "name": "new_status",
                  "type": "bool"
                }
              ],
              "docs": [
                " Updates global uploading flag."
              ]
            },
            {
              "name": "update_data_size_fee",
              "args": [
                {
                  "name": "new_data_size_fee",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Updates size-based pricing of new objects uploaded."
              ]
            },
            {
              "name": "update_storage_buckets_per_bag_limit",
              "args": [
                {
                  "name": "new_limit",
                  "type": "u64"
                }
              ],
              "docs": [
                " Updates \"Storage buckets per bag\" number limit."
              ]
            },
            {
              "name": "update_storage_buckets_voucher_max_limits",
              "args": [
                {
                  "name": "new_objects_size",
                  "type": "u64"
                },
                {
                  "name": "new_objects_number",
                  "type": "u64"
                }
              ],
              "docs": [
                " Updates \"Storage buckets voucher max limits\"."
              ]
            },
            {
              "name": "update_number_of_storage_buckets_in_dynamic_bag_creation_policy",
              "args": [
                {
                  "name": "dynamic_bag_type",
                  "type": "DynamicBagType"
                },
                {
                  "name": "number_of_storage_buckets",
                  "type": "u64"
                }
              ],
              "docs": [
                " Update number of storage buckets used in given dynamic bag creation policy."
              ]
            },
            {
              "name": "update_blacklist",
              "args": [
                {
                  "name": "remove_hashes",
                  "type": "BTreeSet<Cid>"
                },
                {
                  "name": "add_hashes",
                  "type": "BTreeSet<Cid>"
                }
              ],
              "docs": [
                " Add and remove hashes to the current blacklist."
              ]
            },
            {
              "name": "create_storage_bucket",
              "args": [
                {
                  "name": "invite_worker",
                  "type": "Option<WorkerId>"
                },
                {
                  "name": "accepting_new_bags",
                  "type": "bool"
                },
                {
                  "name": "size_limit",
                  "type": "u64"
                },
                {
                  "name": "objects_limit",
                  "type": "u64"
                }
              ],
              "docs": [
                " Create storage bucket."
              ]
            },
            {
              "name": "update_storage_buckets_for_bag",
              "args": [
                {
                  "name": "bag_id",
                  "type": "BagId"
                },
                {
                  "name": "add_buckets",
                  "type": "BTreeSet<StorageBucketId>"
                },
                {
                  "name": "remove_buckets",
                  "type": "BTreeSet<StorageBucketId>"
                }
              ],
              "docs": [
                " Updates storage buckets for a bag.."
              ]
            },
            {
              "name": "cancel_storage_bucket_operator_invite",
              "args": [
                {
                  "name": "storage_bucket_id",
                  "type": "StorageBucketId"
                }
              ],
              "docs": [
                " Cancel pending storage bucket invite. An invitation must be pending."
              ]
            },
            {
              "name": "invite_storage_bucket_operator",
              "args": [
                {
                  "name": "storage_bucket_id",
                  "type": "StorageBucketId"
                },
                {
                  "name": "operator_id",
                  "type": "WorkerId"
                }
              ],
              "docs": [
                " Invite storage bucket operator. Must be missing."
              ]
            },
            {
              "name": "remove_storage_bucket_operator",
              "args": [
                {
                  "name": "storage_bucket_id",
                  "type": "StorageBucketId"
                }
              ],
              "docs": [
                " Removes storage bucket operator."
              ]
            },
            {
              "name": "update_storage_bucket_status",
              "args": [
                {
                  "name": "storage_bucket_id",
                  "type": "StorageBucketId"
                },
                {
                  "name": "accepting_new_bags",
                  "type": "bool"
                }
              ],
              "docs": [
                " Update whether new bags are being accepted for storage."
              ]
            },
            {
              "name": "set_storage_bucket_voucher_limits",
              "args": [
                {
                  "name": "storage_bucket_id",
                  "type": "StorageBucketId"
                },
                {
                  "name": "new_objects_size_limit",
                  "type": "u64"
                },
                {
                  "name": "new_objects_number_limit",
                  "type": "u64"
                }
              ],
              "docs": [
                " Sets storage bucket voucher limits."
              ]
            },
            {
              "name": "accept_storage_bucket_invitation",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage_bucket_id",
                  "type": "StorageBucketId"
                },
                {
                  "name": "transactor_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Accept the storage bucket invitation. An invitation must match the worker_id parameter.",
                " It accepts an additional account ID (transactor) for accepting data objects to prevent",
                " transaction nonce collisions."
              ]
            },
            {
              "name": "set_storage_operator_metadata",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage_bucket_id",
                  "type": "StorageBucketId"
                },
                {
                  "name": "metadata",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Sets storage operator metadata (eg.: storage node URL)."
              ]
            },
            {
              "name": "accept_pending_data_objects",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage_bucket_id",
                  "type": "StorageBucketId"
                },
                {
                  "name": "bag_id",
                  "type": "BagId"
                },
                {
                  "name": "data_objects",
                  "type": "BTreeSet<DataObjectId>"
                }
              ],
              "docs": [
                " A storage provider signals that the data object was successfully uploaded to its storage."
              ]
            },
            {
              "name": "create_distribution_bucket_family",
              "args": [],
              "docs": [
                " Create a distribution bucket family."
              ]
            },
            {
              "name": "delete_distribution_bucket_family",
              "args": [
                {
                  "name": "family_id",
                  "type": "DistributionBucketFamilyId"
                }
              ],
              "docs": [
                " Deletes a distribution bucket family."
              ]
            },
            {
              "name": "create_distribution_bucket",
              "args": [
                {
                  "name": "family_id",
                  "type": "DistributionBucketFamilyId"
                },
                {
                  "name": "accepting_new_bags",
                  "type": "bool"
                }
              ],
              "docs": [
                " Create a distribution bucket."
              ]
            },
            {
              "name": "update_distribution_bucket_status",
              "args": [
                {
                  "name": "bucket_id",
                  "type": "DistributionBucketId"
                },
                {
                  "name": "accepting_new_bags",
                  "type": "bool"
                }
              ],
              "docs": [
                " Updates a distribution bucket 'accepts new bags' flag."
              ]
            },
            {
              "name": "delete_distribution_bucket",
              "args": [
                {
                  "name": "bucket_id",
                  "type": "DistributionBucketId"
                }
              ],
              "docs": [
                " Delete distribution bucket. Must be empty."
              ]
            },
            {
              "name": "update_distribution_buckets_for_bag",
              "args": [
                {
                  "name": "bag_id",
                  "type": "BagId"
                },
                {
                  "name": "family_id",
                  "type": "DistributionBucketFamilyId"
                },
                {
                  "name": "add_buckets_indices",
                  "type": "BTreeSet<DistributionBucketIndex>"
                },
                {
                  "name": "remove_buckets_indices",
                  "type": "BTreeSet<DistributionBucketIndex>"
                }
              ],
              "docs": [
                " Updates distribution buckets for a bag."
              ]
            },
            {
              "name": "update_distribution_buckets_per_bag_limit",
              "args": [
                {
                  "name": "new_limit",
                  "type": "u64"
                }
              ],
              "docs": [
                " Updates \"Distribution buckets per bag\" number limit."
              ]
            },
            {
              "name": "update_distribution_bucket_mode",
              "args": [
                {
                  "name": "bucket_id",
                  "type": "DistributionBucketId"
                },
                {
                  "name": "distributing",
                  "type": "bool"
                }
              ],
              "docs": [
                " Updates 'distributing' flag for the distributing flag."
              ]
            },
            {
              "name": "update_families_in_dynamic_bag_creation_policy",
              "args": [
                {
                  "name": "dynamic_bag_type",
                  "type": "DynamicBagType"
                },
                {
                  "name": "families",
                  "type": "BTreeMap<DistributionBucketFamilyId,u32>"
                }
              ],
              "docs": [
                " Update number of distributed buckets used in given dynamic bag creation policy."
              ]
            },
            {
              "name": "invite_distribution_bucket_operator",
              "args": [
                {
                  "name": "bucket_id",
                  "type": "DistributionBucketId"
                },
                {
                  "name": "operator_worker_id",
                  "type": "WorkerId"
                }
              ],
              "docs": [
                " Invite an operator. Must be missing."
              ]
            },
            {
              "name": "cancel_distribution_bucket_operator_invite",
              "args": [
                {
                  "name": "bucket_id",
                  "type": "DistributionBucketId"
                },
                {
                  "name": "operator_worker_id",
                  "type": "WorkerId"
                }
              ],
              "docs": [
                " Cancel pending invite. Must be pending."
              ]
            },
            {
              "name": "remove_distribution_bucket_operator",
              "args": [
                {
                  "name": "bucket_id",
                  "type": "DistributionBucketId"
                },
                {
                  "name": "operator_worker_id",
                  "type": "WorkerId"
                }
              ],
              "docs": [
                " Removes distribution bucket operator."
              ]
            },
            {
              "name": "set_distribution_bucket_family_metadata",
              "args": [
                {
                  "name": "family_id",
                  "type": "DistributionBucketFamilyId"
                },
                {
                  "name": "metadata",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Set distribution bucket family metadata."
              ]
            },
            {
              "name": "accept_distribution_bucket_invitation",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "bucket_id",
                  "type": "DistributionBucketId"
                }
              ],
              "docs": [
                " Accept pending invite."
              ]
            },
            {
              "name": "set_distribution_operator_metadata",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "bucket_id",
                  "type": "DistributionBucketId"
                },
                {
                  "name": "metadata",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Set distribution operator metadata for the distribution bucket."
              ]
            },
            {
              "name": "sudo_upload_data_objects",
              "args": [
                {
                  "name": "params",
                  "type": "UploadParameters"
                }
              ],
              "docs": [
                " Upload new data objects. Development mode."
              ]
            },
            {
              "name": "sudo_create_dynamic_bag",
              "args": [
                {
                  "name": "bag_id",
                  "type": "DynamicBagId"
                },
                {
                  "name": "deletion_prize",
                  "type": "Option<DynamicBagDeletionPrize>"
                }
              ],
              "docs": [
                " Create a dynamic bag. Development mode."
              ]
            }
          ],
          "events": [
            {
              "name": "StorageBucketCreated",
              "args": [
                "StorageBucketId",
                "Option<WorkerId>",
                "bool",
                "u64",
                "u64"
              ],
              "docs": [
                " Emits on creating the storage bucket.",
                " Params",
                " - storage bucket ID",
                " - invited worker",
                " - flag \"accepting_new_bags\"",
                " - size limit for voucher,",
                " - objects limit for voucher,"
              ]
            },
            {
              "name": "StorageBucketInvitationAccepted",
              "args": [
                "StorageBucketId",
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on accepting the storage bucket invitation.",
                " Params",
                " - storage bucket ID",
                " - invited worker ID",
                " - transactor account ID"
              ]
            },
            {
              "name": "StorageBucketsUpdatedForBag",
              "args": [
                "BagId",
                "BTreeSet<StorageBucketId>",
                "BTreeSet<StorageBucketId>"
              ],
              "docs": [
                " Emits on updating storage buckets for bag.",
                " Params",
                " - bag ID",
                " - storage buckets to add ID collection",
                " - storage buckets to remove ID collection"
              ]
            },
            {
              "name": "DataObjectsUploaded",
              "args": [
                "Vec<DataObjectId>",
                "UploadParameters",
                "Balance"
              ],
              "docs": [
                " Emits on uploading data objects.",
                " Params",
                " - data objects IDs",
                " - initial uploading parameters",
                " - deletion prize for objects"
              ]
            },
            {
              "name": "StorageOperatorMetadataSet",
              "args": [
                "StorageBucketId",
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on setting the storage operator metadata.",
                " Params",
                " - storage bucket ID",
                " - invited worker ID",
                " - metadata"
              ]
            },
            {
              "name": "StorageBucketVoucherLimitsSet",
              "args": [
                "StorageBucketId",
                "u64",
                "u64"
              ],
              "docs": [
                " Emits on setting the storage bucket voucher limits.",
                " Params",
                " - storage bucket ID",
                " - new total objects size limit",
                " - new total objects number limit"
              ]
            },
            {
              "name": "PendingDataObjectsAccepted",
              "args": [
                "StorageBucketId",
                "WorkerId",
                "BagId",
                "BTreeSet<DataObjectId>"
              ],
              "docs": [
                " Emits on accepting pending data objects.",
                " Params",
                " - storage bucket ID",
                " - worker ID (storage provider ID)",
                " - bag ID",
                " - pending data objects"
              ]
            },
            {
              "name": "StorageBucketInvitationCancelled",
              "args": [
                "StorageBucketId"
              ],
              "docs": [
                " Emits on cancelling the storage bucket invitation.",
                " Params",
                " - storage bucket ID"
              ]
            },
            {
              "name": "StorageBucketOperatorInvited",
              "args": [
                "StorageBucketId",
                "WorkerId"
              ],
              "docs": [
                " Emits on the storage bucket operator invitation.",
                " Params",
                " - storage bucket ID",
                " - operator worker ID (storage provider ID)"
              ]
            },
            {
              "name": "StorageBucketOperatorRemoved",
              "args": [
                "StorageBucketId"
              ],
              "docs": [
                " Emits on the storage bucket operator removal.",
                " Params",
                " - storage bucket ID"
              ]
            },
            {
              "name": "UploadingBlockStatusUpdated",
              "args": [
                "bool"
              ],
              "docs": [
                " Emits on changing the size-based pricing of new objects uploaded.",
                " Params",
                " - new status"
              ]
            },
            {
              "name": "DataObjectPerMegabyteFeeUpdated",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on changing the size-based pricing of new objects uploaded.",
                " Params",
                " - new data size fee"
              ]
            },
            {
              "name": "StorageBucketsPerBagLimitUpdated",
              "args": [
                "u64"
              ],
              "docs": [
                " Emits on changing the \"Storage buckets per bag\" number limit.",
                " Params",
                " - new limit"
              ]
            },
            {
              "name": "StorageBucketsVoucherMaxLimitsUpdated",
              "args": [
                "u64",
                "u64"
              ],
              "docs": [
                " Emits on changing the \"Storage buckets voucher max limits\".",
                " Params",
                " - new objects size limit",
                " - new objects number limit"
              ]
            },
            {
              "name": "DataObjectsMoved",
              "args": [
                "BagId",
                "BagId",
                "BTreeSet<DataObjectId>"
              ],
              "docs": [
                " Emits on moving data objects between bags.",
                " Params",
                " - source bag ID",
                " - destination bag ID",
                " - data object IDs"
              ]
            },
            {
              "name": "DataObjectsDeleted",
              "args": [
                "AccountId",
                "BagId",
                "BTreeSet<DataObjectId>"
              ],
              "docs": [
                " Emits on data objects deletion from bags.",
                " Params",
                " - account ID for the deletion prize",
                " - bag ID",
                " - data object IDs"
              ]
            },
            {
              "name": "StorageBucketStatusUpdated",
              "args": [
                "StorageBucketId",
                "bool"
              ],
              "docs": [
                " Emits on storage bucket status update.",
                " Params",
                " - storage bucket ID",
                " - new status"
              ]
            },
            {
              "name": "UpdateBlacklist",
              "args": [
                "BTreeSet<Cid>",
                "BTreeSet<Cid>"
              ],
              "docs": [
                " Emits on updating the blacklist with data hashes.",
                " Params",
                " - hashes to remove from the blacklist",
                " - hashes to add to the blacklist"
              ]
            },
            {
              "name": "DynamicBagDeleted",
              "args": [
                "AccountId",
                "DynamicBagId"
              ],
              "docs": [
                " Emits on deleting a dynamic bag.",
                " Params",
                " - account ID for the deletion prize",
                " - dynamic bag ID"
              ]
            },
            {
              "name": "DynamicBagCreated",
              "args": [
                "DynamicBagId",
                "Option<DynamicBagDeletionPrizeRecord>",
                "BTreeSet<StorageBucketId>",
                "BTreeSet<DistributionBucketId>"
              ],
              "docs": [
                " Emits on creating a dynamic bag.",
                " Params",
                " - dynamic bag ID",
                " - optional DynamicBagDeletionPrize instance",
                " - assigned storage buckets' IDs",
                " - assigned distribution buckets' IDs"
              ]
            },
            {
              "name": "VoucherChanged",
              "args": [
                "StorageBucketId",
                "Voucher"
              ],
              "docs": [
                " Emits on changing the voucher for a storage bucket.",
                " Params",
                " - storage bucket ID",
                " - new voucher"
              ]
            },
            {
              "name": "StorageBucketDeleted",
              "args": [
                "StorageBucketId"
              ],
              "docs": [
                " Emits on storage bucket deleting.",
                " Params",
                " - storage bucket ID"
              ]
            },
            {
              "name": "NumberOfStorageBucketsInDynamicBagCreationPolicyUpdated",
              "args": [
                "DynamicBagType",
                "u64"
              ],
              "docs": [
                " Emits on updating the number of storage buckets in dynamic bag creation policy.",
                " Params",
                " - dynamic bag type",
                " - new number of storage buckets"
              ]
            },
            {
              "name": "BagObjectsChanged",
              "args": [
                "BagId",
                "u64",
                "u64"
              ],
              "docs": [
                " Bag objects changed.",
                " Params",
                " - bag id",
                " - new total objects size",
                " - new total objects number"
              ]
            },
            {
              "name": "DistributionBucketFamilyCreated",
              "args": [
                "DistributionBucketFamilyId"
              ],
              "docs": [
                " Emits on creating distribution bucket family.",
                " Params",
                " - distribution family bucket ID"
              ]
            },
            {
              "name": "DistributionBucketFamilyDeleted",
              "args": [
                "DistributionBucketFamilyId"
              ],
              "docs": [
                " Emits on deleting distribution bucket family.",
                " Params",
                " - distribution family bucket ID"
              ]
            },
            {
              "name": "DistributionBucketCreated",
              "args": [
                "DistributionBucketFamilyId",
                "bool",
                "DistributionBucketId"
              ],
              "docs": [
                " Emits on creating distribution bucket.",
                " Params",
                " - distribution bucket family ID",
                " - accepting new bags",
                " - distribution bucket ID"
              ]
            },
            {
              "name": "DistributionBucketStatusUpdated",
              "args": [
                "DistributionBucketId",
                "bool"
              ],
              "docs": [
                " Emits on storage bucket status update (accepting new bags).",
                " Params",
                " - distribution bucket ID",
                " - new status (accepting new bags)"
              ]
            },
            {
              "name": "DistributionBucketDeleted",
              "args": [
                "DistributionBucketId"
              ],
              "docs": [
                " Emits on deleting distribution bucket.",
                " Params",
                " - distribution bucket ID"
              ]
            },
            {
              "name": "DistributionBucketsUpdatedForBag",
              "args": [
                "BagId",
                "DistributionBucketFamilyId",
                "BTreeSet<DistributionBucketIndex>",
                "BTreeSet<DistributionBucketIndex>"
              ],
              "docs": [
                " Emits on updating distribution buckets for bag.",
                " Params",
                " - bag ID",
                " - storage buckets to add ID collection",
                " - storage buckets to remove ID collection"
              ]
            },
            {
              "name": "DistributionBucketsPerBagLimitUpdated",
              "args": [
                "u64"
              ],
              "docs": [
                " Emits on changing the \"Distribution buckets per bag\" number limit.",
                " Params",
                " - new limit"
              ]
            },
            {
              "name": "DistributionBucketModeUpdated",
              "args": [
                "DistributionBucketId",
                "bool"
              ],
              "docs": [
                " Emits on storage bucket mode update (distributing flag).",
                " Params",
                " - distribution bucket ID",
                " - distributing"
              ]
            },
            {
              "name": "FamiliesInDynamicBagCreationPolicyUpdated",
              "args": [
                "DynamicBagType",
                "BTreeMap<DistributionBucketFamilyId,u32>"
              ],
              "docs": [
                " Emits on dynamic bag creation policy update (distribution bucket families).",
                " Params",
                " - dynamic bag type",
                " - families and bucket numbers"
              ]
            },
            {
              "name": "DistributionBucketOperatorInvited",
              "args": [
                "DistributionBucketId",
                "WorkerId"
              ],
              "docs": [
                " Emits on creating a distribution bucket invitation for the operator.",
                " Params",
                " - distribution bucket ID",
                " - worker ID"
              ]
            },
            {
              "name": "DistributionBucketInvitationCancelled",
              "args": [
                "DistributionBucketId",
                "WorkerId"
              ],
              "docs": [
                " Emits on canceling a distribution bucket invitation for the operator.",
                " Params",
                " - distribution bucket ID",
                " - operator worker ID"
              ]
            },
            {
              "name": "DistributionBucketInvitationAccepted",
              "args": [
                "WorkerId",
                "DistributionBucketId"
              ],
              "docs": [
                " Emits on accepting a distribution bucket invitation for the operator.",
                " Params",
                " - worker ID",
                " - distribution bucket ID"
              ]
            },
            {
              "name": "DistributionBucketMetadataSet",
              "args": [
                "WorkerId",
                "DistributionBucketId",
                "Bytes"
              ],
              "docs": [
                " Emits on setting the metadata by a distribution bucket operator.",
                " Params",
                " - worker ID",
                " - distribution bucket ID",
                " - metadata"
              ]
            },
            {
              "name": "DistributionBucketOperatorRemoved",
              "args": [
                "DistributionBucketId",
                "WorkerId"
              ],
              "docs": [
                " Emits on the distribution bucket operator removal.",
                " Params",
                " - distribution bucket ID",
                " - distribution bucket operator ID"
              ]
            },
            {
              "name": "DistributionBucketFamilyMetadataSet",
              "args": [
                "DistributionBucketFamilyId",
                "Bytes"
              ],
              "docs": [
                " Emits on setting the metadata by a distribution bucket family.",
                " Params",
                " - distribution bucket family ID",
                " - metadata"
              ]
            }
          ],
          "constants": [
            {
              "name": "DataObjectDeletionPrize",
              "type": "BalanceOf",
              "value": "0x01000000000000000000000000000000",
              "docs": [
                " Exports const - a prize for a data object deletion."
              ]
            },
            {
              "name": "BlacklistSizeLimit",
              "type": "u64",
              "value": "0x1027000000000000",
              "docs": [
                " Exports const - maximum size of the \"hash blacklist\" collection."
              ]
            },
            {
              "name": "StorageBucketsPerBagValueConstraint",
              "type": "StorageBucketsPerBagValueConstraint",
              "value": "0x05000000000000000f00000000000000",
              "docs": [
                " Exports const - \"Storage buckets per bag\" value constraint."
              ]
            },
            {
              "name": "DefaultMemberDynamicBagNumberOfStorageBuckets",
              "type": "u64",
              "value": "0x0500000000000000",
              "docs": [
                " Exports const - the default dynamic bag creation policy for members (storage bucket",
                " number)."
              ]
            },
            {
              "name": "DefaultChannelDynamicBagNumberOfStorageBuckets",
              "type": "u64",
              "value": "0x0500000000000000",
              "docs": [
                " Exports const - the default dynamic bag creation policy for channels (storage bucket",
                " number)."
              ]
            },
            {
              "name": "MaxDistributionBucketFamilyNumber",
              "type": "u64",
              "value": "0xc800000000000000",
              "docs": [
                " Exports const - max allowed distribution bucket family number."
              ]
            },
            {
              "name": "DistributionBucketsPerBagValueConstraint",
              "type": "StorageBucketsPerBagValueConstraint",
              "value": "0x01000000000000006400000000000000",
              "docs": [
                " Exports const - \"Distribution buckets per bag\" value constraint."
              ]
            },
            {
              "name": "MaxNumberOfPendingInvitationsPerDistributionBucket",
              "type": "u64",
              "value": "0x1400000000000000",
              "docs": [
                " Exports const - max number of pending invitations per distribution bucket."
              ]
            },
            {
              "name": "MaxDataObjectSize",
              "type": "u64",
              "value": "0x0000008002000000",
              "docs": [
                " Exports const - max data object size in bytes."
              ]
            }
          ],
          "errors": [
            {
              "name": "NoObjectsOnUpload",
              "docs": [
                " Empty \"data object creation\" collection."
              ]
            },
            {
              "name": "StorageBucketDoesntExist",
              "docs": [
                " The requested storage bucket doesn't exist."
              ]
            },
            {
              "name": "StorageBucketIsNotBoundToBag",
              "docs": [
                " The requested storage bucket is not bound to a bag."
              ]
            },
            {
              "name": "StorageBucketIsBoundToBag",
              "docs": [
                " The requested storage bucket is already bound to a bag."
              ]
            },
            {
              "name": "NoStorageBucketInvitation",
              "docs": [
                " Invalid operation with invites: there is no storage bucket invitation."
              ]
            },
            {
              "name": "StorageProviderAlreadySet",
              "docs": [
                " Invalid operation with invites: storage provider was already set."
              ]
            },
            {
              "name": "StorageProviderMustBeSet",
              "docs": [
                " Storage provider must be set."
              ]
            },
            {
              "name": "DifferentStorageProviderInvited",
              "docs": [
                " Invalid operation with invites: another storage provider was invited."
              ]
            },
            {
              "name": "InvitedStorageProvider",
              "docs": [
                " Invalid operation with invites: storage provider was already invited."
              ]
            },
            {
              "name": "StorageBucketIdCollectionsAreEmpty",
              "docs": [
                " Storage bucket id collections are empty."
              ]
            },
            {
              "name": "EmptyContentId",
              "docs": [
                " Upload data error: empty content ID provided."
              ]
            },
            {
              "name": "ZeroObjectSize",
              "docs": [
                " Upload data error: zero object size."
              ]
            },
            {
              "name": "InvalidDeletionPrizeSourceAccount",
              "docs": [
                " Upload data error: invalid deletion prize source account."
              ]
            },
            {
              "name": "InvalidStorageProvider",
              "docs": [
                " Invalid storage provider for bucket."
              ]
            },
            {
              "name": "InsufficientBalance",
              "docs": [
                " Insufficient balance for an operation."
              ]
            },
            {
              "name": "DataObjectDoesntExist",
              "docs": [
                " Data object doesn't exist."
              ]
            },
            {
              "name": "UploadingBlocked",
              "docs": [
                " Uploading of the new object is blocked."
              ]
            },
            {
              "name": "DataObjectIdCollectionIsEmpty",
              "docs": [
                " Data object id collection is empty."
              ]
            },
            {
              "name": "SourceAndDestinationBagsAreEqual",
              "docs": [
                " Cannot move objects within the same bag."
              ]
            },
            {
              "name": "DataObjectBlacklisted",
              "docs": [
                " Data object hash is part of the blacklist."
              ]
            },
            {
              "name": "BlacklistSizeLimitExceeded",
              "docs": [
                " Blacklist size limit exceeded."
              ]
            },
            {
              "name": "VoucherMaxObjectSizeLimitExceeded",
              "docs": [
                " Max object size limit exceeded for voucher."
              ]
            },
            {
              "name": "VoucherMaxObjectNumberLimitExceeded",
              "docs": [
                " Max object number limit exceeded for voucher."
              ]
            },
            {
              "name": "StorageBucketObjectNumberLimitReached",
              "docs": [
                " Object number limit for the storage bucket reached."
              ]
            },
            {
              "name": "StorageBucketObjectSizeLimitReached",
              "docs": [
                " Objects total size limit for the storage bucket reached."
              ]
            },
            {
              "name": "InsufficientTreasuryBalance",
              "docs": [
                " Insufficient module treasury balance for an operation."
              ]
            },
            {
              "name": "CannotDeleteNonEmptyStorageBucket",
              "docs": [
                " Cannot delete a non-empty storage bucket."
              ]
            },
            {
              "name": "DataObjectIdParamsAreEmpty",
              "docs": [
                " The `data_object_ids` extrinsic parameter collection is empty."
              ]
            },
            {
              "name": "StorageBucketsPerBagLimitTooLow",
              "docs": [
                " The new `StorageBucketsPerBagLimit` number is too low."
              ]
            },
            {
              "name": "StorageBucketsPerBagLimitTooHigh",
              "docs": [
                " The new `StorageBucketsPerBagLimit` number is too high."
              ]
            },
            {
              "name": "StorageBucketPerBagLimitExceeded",
              "docs": [
                " `StorageBucketsPerBagLimit` was exceeded for a bag."
              ]
            },
            {
              "name": "StorageBucketDoesntAcceptNewBags",
              "docs": [
                " The storage bucket doesn't accept new bags."
              ]
            },
            {
              "name": "DynamicBagExists",
              "docs": [
                " Cannot create the dynamic bag: dynamic bag exists."
              ]
            },
            {
              "name": "DynamicBagDoesntExist",
              "docs": [
                " Dynamic bag doesn't exist."
              ]
            },
            {
              "name": "StorageProviderOperatorDoesntExist",
              "docs": [
                " Storage provider operator doesn't exist."
              ]
            },
            {
              "name": "DataSizeFeeChanged",
              "docs": [
                " Invalid extrinsic call: data size fee changed."
              ]
            },
            {
              "name": "CannotDeleteNonEmptyDynamicBag",
              "docs": [
                " Cannot delete non empty dynamic bag."
              ]
            },
            {
              "name": "MaxDistributionBucketFamilyNumberLimitExceeded",
              "docs": [
                " Max distribution bucket family number limit exceeded."
              ]
            },
            {
              "name": "DistributionBucketFamilyDoesntExist",
              "docs": [
                " Distribution bucket family doesn't exist."
              ]
            },
            {
              "name": "DistributionBucketDoesntExist",
              "docs": [
                " Distribution bucket doesn't exist."
              ]
            },
            {
              "name": "DistributionBucketIdCollectionsAreEmpty",
              "docs": [
                " Distribution bucket id collections are empty."
              ]
            },
            {
              "name": "DistributionBucketDoesntAcceptNewBags",
              "docs": [
                " Distribution bucket doesn't accept new bags."
              ]
            },
            {
              "name": "MaxDistributionBucketNumberPerBagLimitExceeded",
              "docs": [
                " Max distribution bucket number per bag limit exceeded."
              ]
            },
            {
              "name": "DistributionBucketIsNotBoundToBag",
              "docs": [
                " Distribution bucket is not bound to a bag."
              ]
            },
            {
              "name": "DistributionBucketIsBoundToBag",
              "docs": [
                " Distribution bucket is bound to a bag."
              ]
            },
            {
              "name": "DistributionBucketsPerBagLimitTooLow",
              "docs": [
                " The new `DistributionBucketsPerBagLimit` number is too low."
              ]
            },
            {
              "name": "DistributionBucketsPerBagLimitTooHigh",
              "docs": [
                " The new `DistributionBucketsPerBagLimit` number is too high."
              ]
            },
            {
              "name": "DistributionProviderOperatorDoesntExist",
              "docs": [
                " Distribution provider operator doesn't exist."
              ]
            },
            {
              "name": "DistributionProviderOperatorAlreadyInvited",
              "docs": [
                " Distribution provider operator already invited."
              ]
            },
            {
              "name": "DistributionProviderOperatorSet",
              "docs": [
                " Distribution provider operator already set."
              ]
            },
            {
              "name": "NoDistributionBucketInvitation",
              "docs": [
                " No distribution bucket invitation."
              ]
            },
            {
              "name": "MustBeDistributionProviderOperatorForBucket",
              "docs": [
                " Invalid operations: must be a distribution provider operator for a bucket."
              ]
            },
            {
              "name": "MaxNumberOfPendingInvitationsLimitForDistributionBucketReached",
              "docs": [
                " Max number of pending invitations limit for a distribution bucket reached."
              ]
            },
            {
              "name": "DistributionFamilyBoundToBagCreationPolicy",
              "docs": [
                " Distribution family bound to a bag creation policy."
              ]
            },
            {
              "name": "MaxDataObjectSizeExceeded",
              "docs": [
                " Max data object size exceeded."
              ]
            },
            {
              "name": "AccountsNotCoherent",
              "docs": [
                " Different Accounts for dynamic bag deletion prize and upload fees"
              ]
            },
            {
              "name": "InvalidTransactorAccount",
              "docs": [
                " Invalid transactor account ID for this bucket."
              ]
            }
          ],
          "index": 27
        },
        {
          "name": "ProposalsEngine",
          "storage": {
            "prefix": "ProposalEngine",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ProposalId",
                    "value": "ProposalOf",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map proposal by its id."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of all proposals that have been created."
                ]
              },
              {
                "name": "DispatchableCallCode",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ProposalId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Map proposal executable code by proposal id."
                ]
              },
              {
                "name": "ActiveProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active proposals."
                ]
              },
              {
                "name": "VoteExistsByProposalByVoter",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "ProposalId",
                    "key2": "MemberId",
                    "value": "VoteKind",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x01",
                "docs": [
                  " Double map for preventing duplicate votes. Should be cleaned after usage."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "vote",
              "args": [
                {
                  "name": "voter_id",
                  "type": "MemberId"
                },
                {
                  "name": "proposal_id",
                  "type": "ProposalId"
                },
                {
                  "name": "vote",
                  "type": "VoteKind"
                },
                {
                  "name": "rationale",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Vote extrinsic. Conditions:  origin must allow votes.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (R)` where:",
                " - `R` is the length of `rationale`",
                " - DB:",
                "    - O(1) doesn't depend on the state or paraemters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_proposal",
              "args": [
                {
                  "name": "proposer_id",
                  "type": "MemberId"
                },
                {
                  "name": "proposal_id",
                  "type": "ProposalId"
                }
              ],
              "docs": [
                " Cancel a proposal by its original proposer.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (L)` where:",
                " - `L` is the total number of locks in `Balances`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "veto_proposal",
              "args": [
                {
                  "name": "proposal_id",
                  "type": "ProposalId"
                }
              ],
              "docs": [
                " Veto a proposal. Must be root.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)` doesn't depend on the state or parameters",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "ProposalStatusUpdated",
              "args": [
                "ProposalId",
                "ProposalStatus"
              ],
              "docs": [
                " Emits on proposal creation.",
                " Params:",
                " - Id of a proposal.",
                " - New proposal status."
              ]
            },
            {
              "name": "ProposalDecisionMade",
              "args": [
                "ProposalId",
                "ProposalDecision"
              ],
              "docs": [
                " Emits on getting a proposal status decision.",
                " Params:",
                " - Id of a proposal.",
                " - Proposal decision"
              ]
            },
            {
              "name": "ProposalExecuted",
              "args": [
                "ProposalId",
                "ExecutionStatus"
              ],
              "docs": [
                " Emits on proposal execution.",
                " Params:",
                " - Id of a updated proposal.",
                " - Proposal execution status."
              ]
            },
            {
              "name": "Voted",
              "args": [
                "MemberId",
                "ProposalId",
                "VoteKind",
                "Bytes"
              ],
              "docs": [
                " Emits on voting for the proposal",
                " Params:",
                " - Voter - member id of a voter.",
                " - Id of a proposal.",
                " - Kind of vote.",
                " - Rationale."
              ]
            },
            {
              "name": "ProposalCancelled",
              "args": [
                "MemberId",
                "ProposalId"
              ],
              "docs": [
                " Emits on a proposal being cancelled",
                " Params:",
                " - Member Id of the proposer",
                " - Id of the proposal"
              ]
            }
          ],
          "constants": [
            {
              "name": "CancellationFee",
              "type": "BalanceOf",
              "value": "0x10270000000000000000000000000000",
              "docs": [
                " Exports const - the fee is applied when cancel the proposal. A fee would be slashed (burned)."
              ]
            },
            {
              "name": "RejectionFee",
              "type": "BalanceOf",
              "value": "0x88130000000000000000000000000000",
              "docs": [
                " Exports const -  the fee is applied when the proposal gets rejected. A fee would",
                " be slashed (burned)."
              ]
            },
            {
              "name": "TitleMaxLength",
              "type": "u32",
              "value": "0x28000000",
              "docs": [
                " Exports const -  max allowed proposal title length."
              ]
            },
            {
              "name": "DescriptionMaxLength",
              "type": "u32",
              "value": "0xb80b0000",
              "docs": [
                " Exports const -  max allowed proposal description length."
              ]
            },
            {
              "name": "MaxActiveProposalLimit",
              "type": "u32",
              "value": "0x14000000",
              "docs": [
                " Exports const -  max simultaneous active proposals number."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0505050505050505",
              "docs": [
                " Exports const - staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "EmptyTitleProvided",
              "docs": [
                " Proposal cannot have an empty title\""
              ]
            },
            {
              "name": "EmptyDescriptionProvided",
              "docs": [
                " Proposal cannot have an empty body"
              ]
            },
            {
              "name": "TitleIsTooLong",
              "docs": [
                " Title is too long"
              ]
            },
            {
              "name": "DescriptionIsTooLong",
              "docs": [
                " Description is too long"
              ]
            },
            {
              "name": "ProposalNotFound",
              "docs": [
                " The proposal does not exist"
              ]
            },
            {
              "name": "ProposalFinalized",
              "docs": [
                " Proposal is finalized already"
              ]
            },
            {
              "name": "AlreadyVoted",
              "docs": [
                " The proposal have been already voted on"
              ]
            },
            {
              "name": "NotAuthor",
              "docs": [
                " Not an author"
              ]
            },
            {
              "name": "MaxActiveProposalNumberExceeded",
              "docs": [
                " Max active proposals number exceeded"
              ]
            },
            {
              "name": "EmptyStake",
              "docs": [
                " Stake cannot be empty with this proposal"
              ]
            },
            {
              "name": "StakeShouldBeEmpty",
              "docs": [
                " Stake should be empty for this proposal"
              ]
            },
            {
              "name": "StakeDiffersFromRequired",
              "docs": [
                " Stake differs from the proposal requirements"
              ]
            },
            {
              "name": "InvalidParameterApprovalThreshold",
              "docs": [
                " Approval threshold cannot be zero"
              ]
            },
            {
              "name": "InvalidParameterSlashingThreshold",
              "docs": [
                " Slashing threshold cannot be zero"
              ]
            },
            {
              "name": "RequireRootOrigin",
              "docs": [
                " Require root origin in extrinsics"
              ]
            },
            {
              "name": "ProposalHasVotes",
              "docs": [
                " Disallow to cancel the proposal if there are any votes on it."
              ]
            },
            {
              "name": "ZeroExactExecutionBlock",
              "docs": [
                " Exact execution block cannot be zero."
              ]
            },
            {
              "name": "InvalidExactExecutionBlock",
              "docs": [
                " Exact execution block cannot be less than current_block."
              ]
            },
            {
              "name": "InsufficientBalanceForStake",
              "docs": [
                " There is not enough balance for a stake."
              ]
            },
            {
              "name": "ConflictingStakes",
              "docs": [
                " The conflicting stake discovered. Cannot stake."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            }
          ],
          "index": 30
        },
        {
          "name": "ProposalsDiscussion",
          "storage": {
            "prefix": "ProposalDiscussion",
            "items": [
              {
                "name": "ThreadById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ThreadId",
                    "value": "DiscussionThread",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000",
                "docs": [
                  " Map thread identifier to corresponding thread."
                ]
              },
              {
                "name": "ThreadCount",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Count of all threads that have been created."
                ]
              },
              {
                "name": "PostThreadIdByPostId",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": "ThreadId",
                    "key2": "PostId",
                    "value": "DiscussionPost",
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Map thread id and post id to corresponding post."
                ]
              },
              {
                "name": "PostCount",
                "modifier": "Default",
                "type": {
                  "plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Count of all posts that have been created."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_post",
              "args": [
                {
                  "name": "post_author_id",
                  "type": "MemberId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "text",
                  "type": "Bytes"
                },
                {
                  "name": "editable",
                  "type": "bool"
                }
              ],
              "docs": [
                " Adds a post with author origin check.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (L)` where:",
                " - `L` is the length of `text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "delete_post",
              "args": [
                {
                  "name": "deleter_id",
                  "type": "MemberId"
                },
                {
                  "name": "post_id",
                  "type": "PostId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "hide",
                  "type": "bool"
                }
              ],
              "docs": [
                " Remove post from storage, with the last parameter indicating whether to also hide it",
                " in the UI.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_post",
              "args": [
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "post_id",
                  "type": "PostId"
                },
                {
                  "name": "text",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Updates a post with author origin check. Update attempts number is limited.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (L)` where:",
                " - `L` is the length of `text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "change_thread_mode",
              "args": [
                {
                  "name": "member_id",
                  "type": "MemberId"
                },
                {
                  "name": "thread_id",
                  "type": "ThreadId"
                },
                {
                  "name": "mode",
                  "type": "ThreadMode"
                }
              ],
              "docs": [
                " Changes thread permission mode.",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (W)` if ThreadMode is close or O(1) otherwise where:",
                " - `W` is the number of whitelisted members in `mode`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "ThreadCreated",
              "args": [
                "ThreadId",
                "MemberId"
              ],
              "docs": [
                " Emits on thread creation."
              ]
            },
            {
              "name": "PostCreated",
              "args": [
                "PostId",
                "MemberId",
                "ThreadId",
                "Bytes",
                "bool"
              ],
              "docs": [
                " Emits on post creation."
              ]
            },
            {
              "name": "PostUpdated",
              "args": [
                "PostId",
                "MemberId",
                "ThreadId",
                "Bytes"
              ],
              "docs": [
                " Emits on post update."
              ]
            },
            {
              "name": "ThreadModeChanged",
              "args": [
                "ThreadId",
                "ThreadMode",
                "MemberId"
              ],
              "docs": [
                " Emits on thread mode change."
              ]
            },
            {
              "name": "PostDeleted",
              "args": [
                "MemberId",
                "ThreadId",
                "PostId",
                "bool"
              ],
              "docs": [
                " Emits on post deleted"
              ]
            }
          ],
          "constants": [],
          "errors": [
            {
              "name": "ThreadDoesntExist",
              "docs": [
                " Thread doesn't exist"
              ]
            },
            {
              "name": "PostDoesntExist",
              "docs": [
                " Post doesn't exist"
              ]
            },
            {
              "name": "RequireRootOrigin",
              "docs": [
                " Require root origin in extrinsics"
              ]
            },
            {
              "name": "CannotPostOnClosedThread",
              "docs": [
                " The thread has Closed mode. And post author doesn't belong to council or allowed members."
              ]
            },
            {
              "name": "NotAuthorOrCouncilor",
              "docs": [
                " Should be thread author or councilor."
              ]
            },
            {
              "name": "MaxWhiteListSizeExceeded",
              "docs": [
                " Max allowed authors list limit exceeded."
              ]
            },
            {
              "name": "InsufficientBalanceForPost",
              "docs": [
                " Account has insufficient balance to create a post"
              ]
            },
            {
              "name": "CannotDeletePost",
              "docs": [
                " Account can't delete post at the moment"
              ]
            }
          ],
          "index": 31
        },
        {
          "name": "ProposalsCodex",
          "storage": {
            "prefix": "ProposalCodex",
            "items": [
              {
                "name": "ThreadIdByProposalId",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ProposalId",
                    "value": "ThreadId",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Map proposal id to its discussion thread id"
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "create_proposal",
              "args": [
                {
                  "name": "general_proposal_parameters",
                  "type": "GeneralProposalParameters"
                },
                {
                  "name": "proposal_details",
                  "type": "ProposalDetailsOf"
                }
              ],
              "docs": [
                " Create a proposal, the type of proposal depends on the `proposal_details` variant",
                "",
                " <weight>",
                "",
                " ## Weight",
                " `O (T + D + I)` where:",
                " - `T` is the length of the title",
                " - `D` is the length of the description",
                " - `I` is the length of any parameter in `proposal_details`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "ProposalCreated",
              "args": [
                "ProposalId",
                "GeneralProposalParameters",
                "ProposalDetailsOf"
              ],
              "docs": [
                " A proposal was created",
                " Params:",
                " - Id of a newly created proposal after it was saved in storage.",
                " - General proposal parameter. Parameters shared by all proposals",
                " - Proposal Details. Parameter of proposal with a variant for each kind of proposal"
              ]
            }
          ],
          "constants": [
            {
              "name": "SetMaxValidatorCountProposalParameters",
              "type": "ProposalParameters",
              "value": "0xc0a800000000000042000000500000003c0000005000000001a086010000000000000000000000000001000000",
              "docs": [
                " Exports 'Set Max Validator Count' proposal parameters."
              ]
            },
            {
              "name": "RuntimeUpgradeProposalParameters",
              "type": "ProposalParameters",
              "value": "0x401901004019010050000000640000003c000000500000000140420f0000000000000000000000000001000000",
              "docs": [
                " Exports 'Runtime Upgrade' proposal parameters."
              ]
            },
            {
              "name": "SignalProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100000000003c000000500000003c0000005000000001a861000000000000000000000000000001000000",
              "docs": [
                " Exports 'Signal' proposal parameters."
              ]
            },
            {
              "name": "FundingRequestProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100403800003c000000500000003c0000005000000001a861000000000000000000000000000001000000",
              "docs": [
                " Exports 'Funding Request' proposal parameters."
              ]
            },
            {
              "name": "CreateWorkingGroupLeadOpeningProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100000000003c000000500000003c0000005000000001a086010000000000000000000000000001000000",
              "docs": [
                " Exports 'Create Working Group Lead Opening' proposal parameters."
              ]
            },
            {
              "name": "FillWorkingGroupOpeningProposalParameters",
              "type": "ProposalParameters",
              "value": "0xc0a80000000000003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": [
                " Exports 'Fill Working Group Lead Opening' proposal parameters."
              ]
            },
            {
              "name": "UpdateWorkingGroupBudgetProposalParameters",
              "type": "ProposalParameters",
              "value": "0xc0a80000000000003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": [
                " Exports 'Update Working Group Budget' proposal parameters."
              ]
            },
            {
              "name": "DecreaseWorkingGroupLeadStakeProposalParameters",
              "type": "ProposalParameters",
              "value": "0xc0a80000000000003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": [
                " Exports 'Decrease Working Group Lead Stake' proposal parameters."
              ]
            },
            {
              "name": "SlashWorkingGroupLeadProposalParameters",
              "type": "ProposalParameters",
              "value": "0xc0a80000000000003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": [
                " Exports 'Slash Working Group Lead' proposal parameters."
              ]
            },
            {
              "name": "SetWorkingGroupLeadRewardProposalParameters",
              "type": "ProposalParameters",
              "value": "0xc0a80000000000003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": [
                " Exports 'Set Working Group Lead Reward' proposal parameters."
              ]
            },
            {
              "name": "TerminateWorkingGroupLeadProposalParameters",
              "type": "ProposalParameters",
              "value": "0x081a01000000000042000000500000003c0000005000000001a086010000000000000000000000000001000000",
              "docs": [
                " Exports 'Terminate Working Group Lead' proposal parameters."
              ]
            },
            {
              "name": "AmendConstitutionProposalParameters",
              "type": "ProposalParameters",
              "value": "0x081a0100081a010050000000640000003c000000500000000140420f0000000000000000000000000001000000",
              "docs": [
                " Exports 'Amend Constitution' proposal parameters."
              ]
            },
            {
              "name": "CancelWorkingGroupLeadOpeningProposalParameters",
              "type": "ProposalParameters",
              "value": "0xc0a80000000000003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": [
                " Exports 'Cancel Working Group Lead Opening' proposal parameters."
              ]
            },
            {
              "name": "SetMembershipPriceProposalParameters",
              "type": "ProposalParameters",
              "value": "0xc0a80000403800003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": [
                " Exports 'Set Membership Price' proposal parameters."
              ]
            },
            {
              "name": "SetCouncilBudgetIncrementProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100c0a8000042000000500000003c0000005000000001400d030000000000000000000000000001000000",
              "docs": [
                " Exports `Set Council Budget Increment` proposal parameters."
              ]
            },
            {
              "name": "SetCouncilorRewardProposalParameters",
              "type": "ProposalParameters",
              "value": "0x401901008013030042000000500000003c0000005000000001400d030000000000000000000000000001000000",
              "docs": [
                " Exports `Set Councilor Reward Proposal Parameters` proposal parameters."
              ]
            },
            {
              "name": "SetInitialInvitationBalanceProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100c0a800003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": [
                " Exports `Set Initial Invitation Balance` proposal parameters."
              ]
            },
            {
              "name": "SetInvitationCountProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100c0a800003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": []
            },
            {
              "name": "SetMembershipLeadInvitationQuotaProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100c0a800003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": []
            },
            {
              "name": "SetReferralCutProposalParameters",
              "type": "ProposalParameters",
              "value": "0xc0a80000403800003c0000004b0000003c000000500000000150c3000000000000000000000000000001000000",
              "docs": []
            },
            {
              "name": "CreateBlogPostProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100403800003c000000500000003c0000005000000001a861000000000000000000000000000001000000",
              "docs": []
            },
            {
              "name": "EditBlogPostProoposalParamters",
              "type": "ProposalParameters",
              "value": "0x40190100403800003c000000500000003c0000005000000001a861000000000000000000000000000001000000",
              "docs": []
            },
            {
              "name": "LockBlogPostProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100403800003c000000500000003c0000005000000001a861000000000000000000000000000001000000",
              "docs": []
            },
            {
              "name": "UnlockBlogPostProposalParameters",
              "type": "ProposalParameters",
              "value": "0x40190100403800003c000000500000003c0000005000000001a861000000000000000000000000000001000000",
              "docs": []
            },
            {
              "name": "VetoProposalProposalParameters",
              "type": "ProposalParameters",
              "value": "0x081a0100000000004b000000500000003c000000420000000140420f0000000000000000000000000001000000",
              "docs": []
            }
          ],
          "errors": [
            {
              "name": "SignalProposalIsEmpty",
              "docs": [
                " Provided text for text proposal is empty"
              ]
            },
            {
              "name": "RuntimeProposalIsEmpty",
              "docs": [
                " Provided WASM code for the runtime upgrade proposal is empty"
              ]
            },
            {
              "name": "InvalidFundingRequestProposalBalance",
              "docs": [
                " Invalid balance value for the spending proposal"
              ]
            },
            {
              "name": "InvalidValidatorCount",
              "docs": [
                " Invalid validator count for the 'set validator count' proposal"
              ]
            },
            {
              "name": "RequireRootOrigin",
              "docs": [
                " Require root origin in extrinsics"
              ]
            },
            {
              "name": "InvalidCouncilElectionParameterCouncilSize",
              "docs": [
                " Invalid council election parameter - council_size"
              ]
            },
            {
              "name": "InvalidCouncilElectionParameterCandidacyLimit",
              "docs": [
                " Invalid council election parameter - candidacy-limit"
              ]
            },
            {
              "name": "InvalidCouncilElectionParameterMinVotingStake",
              "docs": [
                " Invalid council election parameter - min-voting_stake"
              ]
            },
            {
              "name": "InvalidCouncilElectionParameterNewTermDuration",
              "docs": [
                " Invalid council election parameter - new_term_duration"
              ]
            },
            {
              "name": "InvalidCouncilElectionParameterMinCouncilStake",
              "docs": [
                " Invalid council election parameter - min_council_stake"
              ]
            },
            {
              "name": "InvalidCouncilElectionParameterRevealingPeriod",
              "docs": [
                " Invalid council election parameter - revealing_period"
              ]
            },
            {
              "name": "InvalidCouncilElectionParameterVotingPeriod",
              "docs": [
                " Invalid council election parameter - voting_period"
              ]
            },
            {
              "name": "InvalidCouncilElectionParameterAnnouncingPeriod",
              "docs": [
                " Invalid council election parameter - announcing_period"
              ]
            },
            {
              "name": "InvalidWorkingGroupBudgetCapacity",
              "docs": [
                " Invalid working group budget capacity parameter"
              ]
            },
            {
              "name": "InvalidSetLeadParameterCannotBeCouncilor",
              "docs": [
                " Invalid 'set lead proposal' parameter - proposed lead cannot be a councilor"
              ]
            },
            {
              "name": "SlashingStakeIsZero",
              "docs": [
                " Invalid 'slash stake proposal' parameter - cannot slash by zero balance."
              ]
            },
            {
              "name": "DecreasingStakeIsZero",
              "docs": [
                " Invalid 'decrease stake proposal' parameter - cannot decrease by zero balance."
              ]
            },
            {
              "name": "InsufficientFundsForBudgetUpdate",
              "docs": [
                " Insufficient funds for 'Update Working Group Budget' proposal execution"
              ]
            },
            {
              "name": "InvalidFundingRequestProposalNumberOfAccount",
              "docs": [
                " Invalid number of accounts recieving funding request for 'Funding Request' proposal."
              ]
            },
            {
              "name": "InvalidFundingRequestProposalRepeatedAccount",
              "docs": [
                " Repeated account in 'Funding Request' proposal."
              ]
            }
          ],
          "index": 32
        },
        {
          "name": "ForumWorkingGroup",
          "storage": {
            "prefix": "Instance1WorkingGroup",
            "items": [
              {
                "name": "NextOpeningId",
                "modifier": "Default",
                "type": {
                  "plain": "OpeningId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new job opening."
                ]
              },
              {
                "name": "OpeningById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "OpeningId",
                    "value": "Opening",
                    "linked": false
                  }
                },
                "fallback": "0x01000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to job opening."
                ]
              },
              {
                "name": "ActiveWorkerCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active workers."
                ]
              },
              {
                "name": "ApplicationById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ApplicationId",
                    "value": "Application",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to worker application on opening."
                ]
              },
              {
                "name": "NextApplicationId",
                "modifier": "Default",
                "type": {
                  "plain": "ApplicationId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new worker application."
                ]
              },
              {
                "name": "NextWorkerId",
                "modifier": "Default",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier for a new worker."
                ]
              },
              {
                "name": "WorkerById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Worker",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to corresponding worker."
                ]
              },
              {
                "name": "CurrentLead",
                "modifier": "Optional",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x00",
                "docs": [
                  " Current group lead."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the working group."
                ]
              },
              {
                "name": "StatusTextHash",
                "modifier": "Default",
                "type": {
                  "plain": "Bytes"
                },
                "fallback": "0x00",
                "docs": [
                  " Status text hash."
                ]
              },
              {
                "name": "WorkerStorage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps identifier to corresponding worker storage."
                ]
              },
              {
                "name": "WorkerStorageSize",
                "modifier": "Default",
                "type": {
                  "plain": "u16"
                },
                "fallback": "0x0008",
                "docs": [
                  " Worker storage size upper bound."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_opening",
              "args": [
                {
                  "name": "description",
                  "type": "Bytes"
                },
                {
                  "name": "opening_type",
                  "type": "OpeningType"
                },
                {
                  "name": "stake_policy",
                  "type": "StakePolicy"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Add a job opening for a regular worker/lead role.",
                " Require signed leader origin or the root (to add opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "apply_on_opening",
              "args": [
                {
                  "name": "p",
                  "type": "ApplyOnOpeningParameters"
                }
              ],
              "docs": [
                " Apply on a worker opening.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `p.description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fill_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                },
                {
                  "name": "successful_application_ids",
                  "type": "BTreeSet<ApplicationId>"
                }
              ],
              "docs": [
                " Fill opening for the regular/lead position.",
                " Require signed leader origin or the root (to fill opening for the leader position).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (A)` where:",
                " - `A` is the length of `successful_application_ids`",
                " - DB:",
                "    - O(A)",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_role_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the associated role account of the active regular worker/lead.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "leave_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Leave the role by the active worker.",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "terminate_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "Option<BalanceOf>"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Terminate the active worker by the lead.",
                " Requires signed leader origin or the root (to terminate the leader role).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penalty.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "slash_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.",
                " If slashing balance greater than the existing stake - stake is slashed to zero.",
                " Requires signed leader origin or the root (to slash the leader stake).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penality.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "decrease_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Decreases the regular worker/lead stake and returns the remainder to the",
                " worker staking_account_id. Can be decreased to zero, no actions on zero stake.",
                " Accepts the stake amount to decrease.",
                " Requires signed leader origin or the root (to decrease the leader stake).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "increase_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Increases the regular worker/lead stake, demands a worker origin.",
                " Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_application",
              "args": [
                {
                  "name": "application_id",
                  "type": "ApplicationId"
                }
              ],
              "docs": [
                " Withdraw the worker application. Can be done by the worker only.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                }
              ],
              "docs": [
                " Cancel an opening for the regular worker/lead position.",
                " Require signed leader origin or the root (to cancel opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "new_budget",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Sets a new budget for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_reward_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the reward account associated with a set reward relationship for the active worker.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_amount",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Update the reward per block for the active worker.",
                " Require signed leader origin or the root (to update leader's reward amount).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_status_text",
              "args": [
                {
                  "name": "status_text",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Sets a new status text for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the contents of `status_text` when it is not none",
                "",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "spend_from_budget",
              "args": [
                {
                  "name": "account_id",
                  "type": "AccountId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Transfers specified amount to any account.",
                " Requires leader origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_storage",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update the associated role storage."
              ]
            }
          ],
          "events": [
            {
              "name": "OpeningAdded",
              "args": [
                "OpeningId",
                "Bytes",
                "OpeningType",
                "StakePolicy",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on adding new job opening.",
                " Params:",
                " - Opening id",
                " - Description",
                " - Opening Type(Lead or Worker)",
                " - Stake Policy for the opening",
                " - Reward per block"
              ]
            },
            {
              "name": "AppliedOnOpening",
              "args": [
                "ApplyOnOpeningParameters",
                "ApplicationId"
              ],
              "docs": [
                " Emits on adding the application for the worker opening.",
                " Params:",
                " - Opening parameteres",
                " - Application id"
              ]
            },
            {
              "name": "OpeningFilled",
              "args": [
                "OpeningId",
                "ApplicationIdToWorkerIdMap",
                "BTreeSet<ApplicationId>"
              ],
              "docs": [
                " Emits on filling the job opening.",
                " Params:",
                " - Worker opening id",
                " - Worker application id to the worker id dictionary",
                " - Applicationd ids used to fill the opening"
              ]
            },
            {
              "name": "LeaderSet",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on setting the group leader.",
                " Params:",
                " - Group worker id."
              ]
            },
            {
              "name": "WorkerRoleAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the role account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Role account id of the worker."
              ]
            },
            {
              "name": "LeaderUnset",
              "args": [],
              "docs": [
                " Emits on un-setting the leader."
              ]
            },
            {
              "name": "WorkerExited",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on exiting the worker.",
                " Params:",
                " - worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "WorkerStartedLeaving",
              "args": [
                "WorkerId",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits when worker started leaving their role.",
                " Params:",
                " - Worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedWorker",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the worker.",
                " Params:",
                " - worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedLeader",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the leader.",
                " Params:",
                " - leader worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeSlashed",
              "args": [
                "WorkerId",
                "Balance",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on slashing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - actual slashed balance.",
                " - Requested slashed balance.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeDecreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on decreasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "StakeIncreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on increasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "ApplicationWithdrawn",
              "args": [
                "ApplicationId"
              ],
              "docs": [
                " Emits on withdrawing the application for the regular worker/lead opening.",
                " Params:",
                " - Job application id"
              ]
            },
            {
              "name": "OpeningCanceled",
              "args": [
                "OpeningId"
              ],
              "docs": [
                " Emits on canceling the job opening.",
                " Params:",
                " - Opening id"
              ]
            },
            {
              "name": "BudgetSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on setting the budget for the working group.",
                " Params:",
                " - new budget"
              ]
            },
            {
              "name": "WorkerRewardAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the reward account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward account id of the worker."
              ]
            },
            {
              "name": "WorkerRewardAmountUpdated",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on updating the reward amount of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward per block"
              ]
            },
            {
              "name": "StatusTextChanged",
              "args": [
                "Bytes",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on updating the status text of the working group.",
                " Params:",
                " - status text hash",
                " - status text"
              ]
            },
            {
              "name": "BudgetSpending",
              "args": [
                "AccountId",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on budget from the working group being spent",
                " Params:",
                " - Receiver Account Id.",
                " - Balance spent.",
                " - Rationale."
              ]
            },
            {
              "name": "RewardPaid",
              "args": [
                "WorkerId",
                "AccountId",
                "Balance",
                "RewardPaymentType"
              ],
              "docs": [
                " Emits on paying the reward.",
                " Params:",
                " - Id of the worker.",
                " - Receiver Account Id.",
                " - Reward",
                " - Payment type (missed reward or regular one)"
              ]
            },
            {
              "name": "NewMissedRewardLevelReached",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on reaching new missed reward.",
                " Params:",
                " - Worker ID.",
                " - Missed reward (optional). None means 'no missed reward'."
              ]
            },
            {
              "name": "WorkerStorageUpdated",
              "args": [
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on updating the worker storage role.",
                " Params:",
                " - Id of the worker.",
                " - Raw storage field."
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxWorkerNumberLimit",
              "type": "u32",
              "value": "0x64000000",
              "docs": [
                " Exports const",
                " Max simultaneous active worker number."
              ]
            },
            {
              "name": "MinUnstakingPeriodLimit",
              "type": "BlockNumber",
              "value": "0xc0a80000",
              "docs": [
                " Defines min unstaking period in the group."
              ]
            },
            {
              "name": "MinimumApplicationStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Minimum stake required for applying into an opening."
              ]
            },
            {
              "name": "LeaderOpeningStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Stake needed to create an opening."
              ]
            },
            {
              "name": "RewardPeriod",
              "type": "u32",
              "value": "0x4a380000",
              "docs": [
                " Defines the period every worker gets paid in blocks."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0808080808080808",
              "docs": [
                " Staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "StakeBalanceCannotBeZero",
              "docs": [
                " Provided stake balance cannot be zero."
              ]
            },
            {
              "name": "OpeningDoesNotExist",
              "docs": [
                " Opening does not exist."
              ]
            },
            {
              "name": "CannotHireMultipleLeaders",
              "docs": [
                " Cannot fill opening with multiple applications."
              ]
            },
            {
              "name": "WorkerApplicationDoesNotExist",
              "docs": [
                " Worker application does not exist."
              ]
            },
            {
              "name": "MaxActiveWorkerNumberExceeded",
              "docs": [
                " Working group size limit exceeded."
              ]
            },
            {
              "name": "SuccessfulWorkerApplicationDoesNotExist",
              "docs": [
                " Successful worker application does not exist."
              ]
            },
            {
              "name": "CannotHireLeaderWhenLeaderExists",
              "docs": [
                " There is leader already, cannot hire another one."
              ]
            },
            {
              "name": "IsNotLeadAccount",
              "docs": [
                " Not a lead account."
              ]
            },
            {
              "name": "CurrentLeadNotSet",
              "docs": [
                " Current lead is not set."
              ]
            },
            {
              "name": "WorkerDoesNotExist",
              "docs": [
                " Worker does not exist."
              ]
            },
            {
              "name": "InvalidMemberOrigin",
              "docs": [
                " Invalid origin for a member."
              ]
            },
            {
              "name": "SignerIsNotWorkerRoleAccount",
              "docs": [
                " Signer is not worker role account."
              ]
            },
            {
              "name": "BelowMinimumStakes",
              "docs": [
                " Staking less than the lower bound."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            },
            {
              "name": "ApplicationStakeDoesntMatchOpening",
              "docs": [
                " Application stake is less than required opening stake."
              ]
            },
            {
              "name": "OriginIsNotApplicant",
              "docs": [
                " Origin is not applicant."
              ]
            },
            {
              "name": "WorkerIsLeaving",
              "docs": [
                " Invalid operation - worker is leaving."
              ]
            },
            {
              "name": "CannotRewardWithZero",
              "docs": [
                " Reward could not be zero."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "WorkerHasNoReward",
              "docs": [
                " Worker has no recurring reward."
              ]
            },
            {
              "name": "UnstakingPeriodLessThanMinimum",
              "docs": [
                " Specified unstaking period is less then minimum set for the group."
              ]
            },
            {
              "name": "CannotSpendZero",
              "docs": [
                " Invalid spending amount."
              ]
            },
            {
              "name": "InsufficientBudgetForSpending",
              "docs": [
                " It's not enough budget for this spending."
              ]
            },
            {
              "name": "NoApplicationsProvided",
              "docs": [
                " Cannot fill opening - no applications provided."
              ]
            },
            {
              "name": "CannotDecreaseStakeDeltaGreaterThanStake",
              "docs": [
                " Cannot decrease stake - stake delta greater than initial stake."
              ]
            },
            {
              "name": "ApplicationsNotForOpening",
              "docs": [
                " Trying to fill opening with an application for other opening"
              ]
            },
            {
              "name": "WorkerStorageValueTooLong",
              "docs": [
                " Worker storage text is too long."
              ]
            }
          ],
          "index": 33
        },
        {
          "name": "StorageWorkingGroup",
          "storage": {
            "prefix": "Instance2WorkingGroup",
            "items": [
              {
                "name": "NextOpeningId",
                "modifier": "Default",
                "type": {
                  "plain": "OpeningId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new job opening."
                ]
              },
              {
                "name": "OpeningById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "OpeningId",
                    "value": "Opening",
                    "linked": false
                  }
                },
                "fallback": "0x01000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to job opening."
                ]
              },
              {
                "name": "ActiveWorkerCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active workers."
                ]
              },
              {
                "name": "ApplicationById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ApplicationId",
                    "value": "Application",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to worker application on opening."
                ]
              },
              {
                "name": "NextApplicationId",
                "modifier": "Default",
                "type": {
                  "plain": "ApplicationId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new worker application."
                ]
              },
              {
                "name": "NextWorkerId",
                "modifier": "Default",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier for a new worker."
                ]
              },
              {
                "name": "WorkerById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Worker",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to corresponding worker."
                ]
              },
              {
                "name": "CurrentLead",
                "modifier": "Optional",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x00",
                "docs": [
                  " Current group lead."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the working group."
                ]
              },
              {
                "name": "StatusTextHash",
                "modifier": "Default",
                "type": {
                  "plain": "Bytes"
                },
                "fallback": "0x00",
                "docs": [
                  " Status text hash."
                ]
              },
              {
                "name": "WorkerStorage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps identifier to corresponding worker storage."
                ]
              },
              {
                "name": "WorkerStorageSize",
                "modifier": "Default",
                "type": {
                  "plain": "u16"
                },
                "fallback": "0x0008",
                "docs": [
                  " Worker storage size upper bound."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_opening",
              "args": [
                {
                  "name": "description",
                  "type": "Bytes"
                },
                {
                  "name": "opening_type",
                  "type": "OpeningType"
                },
                {
                  "name": "stake_policy",
                  "type": "StakePolicy"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Add a job opening for a regular worker/lead role.",
                " Require signed leader origin or the root (to add opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "apply_on_opening",
              "args": [
                {
                  "name": "p",
                  "type": "ApplyOnOpeningParameters"
                }
              ],
              "docs": [
                " Apply on a worker opening.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `p.description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fill_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                },
                {
                  "name": "successful_application_ids",
                  "type": "BTreeSet<ApplicationId>"
                }
              ],
              "docs": [
                " Fill opening for the regular/lead position.",
                " Require signed leader origin or the root (to fill opening for the leader position).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (A)` where:",
                " - `A` is the length of `successful_application_ids`",
                " - DB:",
                "    - O(A)",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_role_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the associated role account of the active regular worker/lead.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "leave_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Leave the role by the active worker.",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "terminate_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "Option<BalanceOf>"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Terminate the active worker by the lead.",
                " Requires signed leader origin or the root (to terminate the leader role).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penalty.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "slash_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.",
                " If slashing balance greater than the existing stake - stake is slashed to zero.",
                " Requires signed leader origin or the root (to slash the leader stake).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penality.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "decrease_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Decreases the regular worker/lead stake and returns the remainder to the",
                " worker staking_account_id. Can be decreased to zero, no actions on zero stake.",
                " Accepts the stake amount to decrease.",
                " Requires signed leader origin or the root (to decrease the leader stake).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "increase_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Increases the regular worker/lead stake, demands a worker origin.",
                " Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_application",
              "args": [
                {
                  "name": "application_id",
                  "type": "ApplicationId"
                }
              ],
              "docs": [
                " Withdraw the worker application. Can be done by the worker only.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                }
              ],
              "docs": [
                " Cancel an opening for the regular worker/lead position.",
                " Require signed leader origin or the root (to cancel opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "new_budget",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Sets a new budget for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_reward_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the reward account associated with a set reward relationship for the active worker.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_amount",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Update the reward per block for the active worker.",
                " Require signed leader origin or the root (to update leader's reward amount).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_status_text",
              "args": [
                {
                  "name": "status_text",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Sets a new status text for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the contents of `status_text` when it is not none",
                "",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "spend_from_budget",
              "args": [
                {
                  "name": "account_id",
                  "type": "AccountId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Transfers specified amount to any account.",
                " Requires leader origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_storage",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update the associated role storage."
              ]
            }
          ],
          "events": [
            {
              "name": "OpeningAdded",
              "args": [
                "OpeningId",
                "Bytes",
                "OpeningType",
                "StakePolicy",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on adding new job opening.",
                " Params:",
                " - Opening id",
                " - Description",
                " - Opening Type(Lead or Worker)",
                " - Stake Policy for the opening",
                " - Reward per block"
              ]
            },
            {
              "name": "AppliedOnOpening",
              "args": [
                "ApplyOnOpeningParameters",
                "ApplicationId"
              ],
              "docs": [
                " Emits on adding the application for the worker opening.",
                " Params:",
                " - Opening parameteres",
                " - Application id"
              ]
            },
            {
              "name": "OpeningFilled",
              "args": [
                "OpeningId",
                "ApplicationIdToWorkerIdMap",
                "BTreeSet<ApplicationId>"
              ],
              "docs": [
                " Emits on filling the job opening.",
                " Params:",
                " - Worker opening id",
                " - Worker application id to the worker id dictionary",
                " - Applicationd ids used to fill the opening"
              ]
            },
            {
              "name": "LeaderSet",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on setting the group leader.",
                " Params:",
                " - Group worker id."
              ]
            },
            {
              "name": "WorkerRoleAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the role account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Role account id of the worker."
              ]
            },
            {
              "name": "LeaderUnset",
              "args": [],
              "docs": [
                " Emits on un-setting the leader."
              ]
            },
            {
              "name": "WorkerExited",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on exiting the worker.",
                " Params:",
                " - worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "WorkerStartedLeaving",
              "args": [
                "WorkerId",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits when worker started leaving their role.",
                " Params:",
                " - Worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedWorker",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the worker.",
                " Params:",
                " - worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedLeader",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the leader.",
                " Params:",
                " - leader worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeSlashed",
              "args": [
                "WorkerId",
                "Balance",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on slashing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - actual slashed balance.",
                " - Requested slashed balance.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeDecreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on decreasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "StakeIncreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on increasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "ApplicationWithdrawn",
              "args": [
                "ApplicationId"
              ],
              "docs": [
                " Emits on withdrawing the application for the regular worker/lead opening.",
                " Params:",
                " - Job application id"
              ]
            },
            {
              "name": "OpeningCanceled",
              "args": [
                "OpeningId"
              ],
              "docs": [
                " Emits on canceling the job opening.",
                " Params:",
                " - Opening id"
              ]
            },
            {
              "name": "BudgetSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on setting the budget for the working group.",
                " Params:",
                " - new budget"
              ]
            },
            {
              "name": "WorkerRewardAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the reward account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward account id of the worker."
              ]
            },
            {
              "name": "WorkerRewardAmountUpdated",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on updating the reward amount of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward per block"
              ]
            },
            {
              "name": "StatusTextChanged",
              "args": [
                "Bytes",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on updating the status text of the working group.",
                " Params:",
                " - status text hash",
                " - status text"
              ]
            },
            {
              "name": "BudgetSpending",
              "args": [
                "AccountId",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on budget from the working group being spent",
                " Params:",
                " - Receiver Account Id.",
                " - Balance spent.",
                " - Rationale."
              ]
            },
            {
              "name": "RewardPaid",
              "args": [
                "WorkerId",
                "AccountId",
                "Balance",
                "RewardPaymentType"
              ],
              "docs": [
                " Emits on paying the reward.",
                " Params:",
                " - Id of the worker.",
                " - Receiver Account Id.",
                " - Reward",
                " - Payment type (missed reward or regular one)"
              ]
            },
            {
              "name": "NewMissedRewardLevelReached",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on reaching new missed reward.",
                " Params:",
                " - Worker ID.",
                " - Missed reward (optional). None means 'no missed reward'."
              ]
            },
            {
              "name": "WorkerStorageUpdated",
              "args": [
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on updating the worker storage role.",
                " Params:",
                " - Id of the worker.",
                " - Raw storage field."
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxWorkerNumberLimit",
              "type": "u32",
              "value": "0x64000000",
              "docs": [
                " Exports const",
                " Max simultaneous active worker number."
              ]
            },
            {
              "name": "MinUnstakingPeriodLimit",
              "type": "BlockNumber",
              "value": "0xc0a80000",
              "docs": [
                " Defines min unstaking period in the group."
              ]
            },
            {
              "name": "MinimumApplicationStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Minimum stake required for applying into an opening."
              ]
            },
            {
              "name": "LeaderOpeningStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Stake needed to create an opening."
              ]
            },
            {
              "name": "RewardPeriod",
              "type": "u32",
              "value": "0x54380000",
              "docs": [
                " Defines the period every worker gets paid in blocks."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0606060606060606",
              "docs": [
                " Staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "StakeBalanceCannotBeZero",
              "docs": [
                " Provided stake balance cannot be zero."
              ]
            },
            {
              "name": "OpeningDoesNotExist",
              "docs": [
                " Opening does not exist."
              ]
            },
            {
              "name": "CannotHireMultipleLeaders",
              "docs": [
                " Cannot fill opening with multiple applications."
              ]
            },
            {
              "name": "WorkerApplicationDoesNotExist",
              "docs": [
                " Worker application does not exist."
              ]
            },
            {
              "name": "MaxActiveWorkerNumberExceeded",
              "docs": [
                " Working group size limit exceeded."
              ]
            },
            {
              "name": "SuccessfulWorkerApplicationDoesNotExist",
              "docs": [
                " Successful worker application does not exist."
              ]
            },
            {
              "name": "CannotHireLeaderWhenLeaderExists",
              "docs": [
                " There is leader already, cannot hire another one."
              ]
            },
            {
              "name": "IsNotLeadAccount",
              "docs": [
                " Not a lead account."
              ]
            },
            {
              "name": "CurrentLeadNotSet",
              "docs": [
                " Current lead is not set."
              ]
            },
            {
              "name": "WorkerDoesNotExist",
              "docs": [
                " Worker does not exist."
              ]
            },
            {
              "name": "InvalidMemberOrigin",
              "docs": [
                " Invalid origin for a member."
              ]
            },
            {
              "name": "SignerIsNotWorkerRoleAccount",
              "docs": [
                " Signer is not worker role account."
              ]
            },
            {
              "name": "BelowMinimumStakes",
              "docs": [
                " Staking less than the lower bound."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            },
            {
              "name": "ApplicationStakeDoesntMatchOpening",
              "docs": [
                " Application stake is less than required opening stake."
              ]
            },
            {
              "name": "OriginIsNotApplicant",
              "docs": [
                " Origin is not applicant."
              ]
            },
            {
              "name": "WorkerIsLeaving",
              "docs": [
                " Invalid operation - worker is leaving."
              ]
            },
            {
              "name": "CannotRewardWithZero",
              "docs": [
                " Reward could not be zero."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "WorkerHasNoReward",
              "docs": [
                " Worker has no recurring reward."
              ]
            },
            {
              "name": "UnstakingPeriodLessThanMinimum",
              "docs": [
                " Specified unstaking period is less then minimum set for the group."
              ]
            },
            {
              "name": "CannotSpendZero",
              "docs": [
                " Invalid spending amount."
              ]
            },
            {
              "name": "InsufficientBudgetForSpending",
              "docs": [
                " It's not enough budget for this spending."
              ]
            },
            {
              "name": "NoApplicationsProvided",
              "docs": [
                " Cannot fill opening - no applications provided."
              ]
            },
            {
              "name": "CannotDecreaseStakeDeltaGreaterThanStake",
              "docs": [
                " Cannot decrease stake - stake delta greater than initial stake."
              ]
            },
            {
              "name": "ApplicationsNotForOpening",
              "docs": [
                " Trying to fill opening with an application for other opening"
              ]
            },
            {
              "name": "WorkerStorageValueTooLong",
              "docs": [
                " Worker storage text is too long."
              ]
            }
          ],
          "index": 34
        },
        {
          "name": "ContentDirectoryWorkingGroup",
          "storage": {
            "prefix": "Instance3WorkingGroup",
            "items": [
              {
                "name": "NextOpeningId",
                "modifier": "Default",
                "type": {
                  "plain": "OpeningId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new job opening."
                ]
              },
              {
                "name": "OpeningById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "OpeningId",
                    "value": "Opening",
                    "linked": false
                  }
                },
                "fallback": "0x01000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to job opening."
                ]
              },
              {
                "name": "ActiveWorkerCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active workers."
                ]
              },
              {
                "name": "ApplicationById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ApplicationId",
                    "value": "Application",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to worker application on opening."
                ]
              },
              {
                "name": "NextApplicationId",
                "modifier": "Default",
                "type": {
                  "plain": "ApplicationId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new worker application."
                ]
              },
              {
                "name": "NextWorkerId",
                "modifier": "Default",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier for a new worker."
                ]
              },
              {
                "name": "WorkerById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Worker",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to corresponding worker."
                ]
              },
              {
                "name": "CurrentLead",
                "modifier": "Optional",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x00",
                "docs": [
                  " Current group lead."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the working group."
                ]
              },
              {
                "name": "StatusTextHash",
                "modifier": "Default",
                "type": {
                  "plain": "Bytes"
                },
                "fallback": "0x00",
                "docs": [
                  " Status text hash."
                ]
              },
              {
                "name": "WorkerStorage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps identifier to corresponding worker storage."
                ]
              },
              {
                "name": "WorkerStorageSize",
                "modifier": "Default",
                "type": {
                  "plain": "u16"
                },
                "fallback": "0x0008",
                "docs": [
                  " Worker storage size upper bound."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_opening",
              "args": [
                {
                  "name": "description",
                  "type": "Bytes"
                },
                {
                  "name": "opening_type",
                  "type": "OpeningType"
                },
                {
                  "name": "stake_policy",
                  "type": "StakePolicy"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Add a job opening for a regular worker/lead role.",
                " Require signed leader origin or the root (to add opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "apply_on_opening",
              "args": [
                {
                  "name": "p",
                  "type": "ApplyOnOpeningParameters"
                }
              ],
              "docs": [
                " Apply on a worker opening.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `p.description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fill_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                },
                {
                  "name": "successful_application_ids",
                  "type": "BTreeSet<ApplicationId>"
                }
              ],
              "docs": [
                " Fill opening for the regular/lead position.",
                " Require signed leader origin or the root (to fill opening for the leader position).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (A)` where:",
                " - `A` is the length of `successful_application_ids`",
                " - DB:",
                "    - O(A)",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_role_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the associated role account of the active regular worker/lead.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "leave_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Leave the role by the active worker.",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "terminate_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "Option<BalanceOf>"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Terminate the active worker by the lead.",
                " Requires signed leader origin or the root (to terminate the leader role).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penalty.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "slash_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.",
                " If slashing balance greater than the existing stake - stake is slashed to zero.",
                " Requires signed leader origin or the root (to slash the leader stake).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penality.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "decrease_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Decreases the regular worker/lead stake and returns the remainder to the",
                " worker staking_account_id. Can be decreased to zero, no actions on zero stake.",
                " Accepts the stake amount to decrease.",
                " Requires signed leader origin or the root (to decrease the leader stake).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "increase_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Increases the regular worker/lead stake, demands a worker origin.",
                " Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_application",
              "args": [
                {
                  "name": "application_id",
                  "type": "ApplicationId"
                }
              ],
              "docs": [
                " Withdraw the worker application. Can be done by the worker only.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                }
              ],
              "docs": [
                " Cancel an opening for the regular worker/lead position.",
                " Require signed leader origin or the root (to cancel opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "new_budget",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Sets a new budget for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_reward_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the reward account associated with a set reward relationship for the active worker.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_amount",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Update the reward per block for the active worker.",
                " Require signed leader origin or the root (to update leader's reward amount).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_status_text",
              "args": [
                {
                  "name": "status_text",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Sets a new status text for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the contents of `status_text` when it is not none",
                "",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "spend_from_budget",
              "args": [
                {
                  "name": "account_id",
                  "type": "AccountId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Transfers specified amount to any account.",
                " Requires leader origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_storage",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update the associated role storage."
              ]
            }
          ],
          "events": [
            {
              "name": "OpeningAdded",
              "args": [
                "OpeningId",
                "Bytes",
                "OpeningType",
                "StakePolicy",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on adding new job opening.",
                " Params:",
                " - Opening id",
                " - Description",
                " - Opening Type(Lead or Worker)",
                " - Stake Policy for the opening",
                " - Reward per block"
              ]
            },
            {
              "name": "AppliedOnOpening",
              "args": [
                "ApplyOnOpeningParameters",
                "ApplicationId"
              ],
              "docs": [
                " Emits on adding the application for the worker opening.",
                " Params:",
                " - Opening parameteres",
                " - Application id"
              ]
            },
            {
              "name": "OpeningFilled",
              "args": [
                "OpeningId",
                "ApplicationIdToWorkerIdMap",
                "BTreeSet<ApplicationId>"
              ],
              "docs": [
                " Emits on filling the job opening.",
                " Params:",
                " - Worker opening id",
                " - Worker application id to the worker id dictionary",
                " - Applicationd ids used to fill the opening"
              ]
            },
            {
              "name": "LeaderSet",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on setting the group leader.",
                " Params:",
                " - Group worker id."
              ]
            },
            {
              "name": "WorkerRoleAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the role account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Role account id of the worker."
              ]
            },
            {
              "name": "LeaderUnset",
              "args": [],
              "docs": [
                " Emits on un-setting the leader."
              ]
            },
            {
              "name": "WorkerExited",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on exiting the worker.",
                " Params:",
                " - worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "WorkerStartedLeaving",
              "args": [
                "WorkerId",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits when worker started leaving their role.",
                " Params:",
                " - Worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedWorker",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the worker.",
                " Params:",
                " - worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedLeader",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the leader.",
                " Params:",
                " - leader worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeSlashed",
              "args": [
                "WorkerId",
                "Balance",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on slashing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - actual slashed balance.",
                " - Requested slashed balance.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeDecreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on decreasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "StakeIncreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on increasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "ApplicationWithdrawn",
              "args": [
                "ApplicationId"
              ],
              "docs": [
                " Emits on withdrawing the application for the regular worker/lead opening.",
                " Params:",
                " - Job application id"
              ]
            },
            {
              "name": "OpeningCanceled",
              "args": [
                "OpeningId"
              ],
              "docs": [
                " Emits on canceling the job opening.",
                " Params:",
                " - Opening id"
              ]
            },
            {
              "name": "BudgetSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on setting the budget for the working group.",
                " Params:",
                " - new budget"
              ]
            },
            {
              "name": "WorkerRewardAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the reward account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward account id of the worker."
              ]
            },
            {
              "name": "WorkerRewardAmountUpdated",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on updating the reward amount of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward per block"
              ]
            },
            {
              "name": "StatusTextChanged",
              "args": [
                "Bytes",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on updating the status text of the working group.",
                " Params:",
                " - status text hash",
                " - status text"
              ]
            },
            {
              "name": "BudgetSpending",
              "args": [
                "AccountId",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on budget from the working group being spent",
                " Params:",
                " - Receiver Account Id.",
                " - Balance spent.",
                " - Rationale."
              ]
            },
            {
              "name": "RewardPaid",
              "args": [
                "WorkerId",
                "AccountId",
                "Balance",
                "RewardPaymentType"
              ],
              "docs": [
                " Emits on paying the reward.",
                " Params:",
                " - Id of the worker.",
                " - Receiver Account Id.",
                " - Reward",
                " - Payment type (missed reward or regular one)"
              ]
            },
            {
              "name": "NewMissedRewardLevelReached",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on reaching new missed reward.",
                " Params:",
                " - Worker ID.",
                " - Missed reward (optional). None means 'no missed reward'."
              ]
            },
            {
              "name": "WorkerStorageUpdated",
              "args": [
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on updating the worker storage role.",
                " Params:",
                " - Id of the worker.",
                " - Raw storage field."
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxWorkerNumberLimit",
              "type": "u32",
              "value": "0x64000000",
              "docs": [
                " Exports const",
                " Max simultaneous active worker number."
              ]
            },
            {
              "name": "MinUnstakingPeriodLimit",
              "type": "BlockNumber",
              "value": "0xc0a80000",
              "docs": [
                " Defines min unstaking period in the group."
              ]
            },
            {
              "name": "MinimumApplicationStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Minimum stake required for applying into an opening."
              ]
            },
            {
              "name": "LeaderOpeningStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Stake needed to create an opening."
              ]
            },
            {
              "name": "RewardPeriod",
              "type": "u32",
              "value": "0x5e380000",
              "docs": [
                " Defines the period every worker gets paid in blocks."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0707070707070707",
              "docs": [
                " Staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "StakeBalanceCannotBeZero",
              "docs": [
                " Provided stake balance cannot be zero."
              ]
            },
            {
              "name": "OpeningDoesNotExist",
              "docs": [
                " Opening does not exist."
              ]
            },
            {
              "name": "CannotHireMultipleLeaders",
              "docs": [
                " Cannot fill opening with multiple applications."
              ]
            },
            {
              "name": "WorkerApplicationDoesNotExist",
              "docs": [
                " Worker application does not exist."
              ]
            },
            {
              "name": "MaxActiveWorkerNumberExceeded",
              "docs": [
                " Working group size limit exceeded."
              ]
            },
            {
              "name": "SuccessfulWorkerApplicationDoesNotExist",
              "docs": [
                " Successful worker application does not exist."
              ]
            },
            {
              "name": "CannotHireLeaderWhenLeaderExists",
              "docs": [
                " There is leader already, cannot hire another one."
              ]
            },
            {
              "name": "IsNotLeadAccount",
              "docs": [
                " Not a lead account."
              ]
            },
            {
              "name": "CurrentLeadNotSet",
              "docs": [
                " Current lead is not set."
              ]
            },
            {
              "name": "WorkerDoesNotExist",
              "docs": [
                " Worker does not exist."
              ]
            },
            {
              "name": "InvalidMemberOrigin",
              "docs": [
                " Invalid origin for a member."
              ]
            },
            {
              "name": "SignerIsNotWorkerRoleAccount",
              "docs": [
                " Signer is not worker role account."
              ]
            },
            {
              "name": "BelowMinimumStakes",
              "docs": [
                " Staking less than the lower bound."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            },
            {
              "name": "ApplicationStakeDoesntMatchOpening",
              "docs": [
                " Application stake is less than required opening stake."
              ]
            },
            {
              "name": "OriginIsNotApplicant",
              "docs": [
                " Origin is not applicant."
              ]
            },
            {
              "name": "WorkerIsLeaving",
              "docs": [
                " Invalid operation - worker is leaving."
              ]
            },
            {
              "name": "CannotRewardWithZero",
              "docs": [
                " Reward could not be zero."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "WorkerHasNoReward",
              "docs": [
                " Worker has no recurring reward."
              ]
            },
            {
              "name": "UnstakingPeriodLessThanMinimum",
              "docs": [
                " Specified unstaking period is less then minimum set for the group."
              ]
            },
            {
              "name": "CannotSpendZero",
              "docs": [
                " Invalid spending amount."
              ]
            },
            {
              "name": "InsufficientBudgetForSpending",
              "docs": [
                " It's not enough budget for this spending."
              ]
            },
            {
              "name": "NoApplicationsProvided",
              "docs": [
                " Cannot fill opening - no applications provided."
              ]
            },
            {
              "name": "CannotDecreaseStakeDeltaGreaterThanStake",
              "docs": [
                " Cannot decrease stake - stake delta greater than initial stake."
              ]
            },
            {
              "name": "ApplicationsNotForOpening",
              "docs": [
                " Trying to fill opening with an application for other opening"
              ]
            },
            {
              "name": "WorkerStorageValueTooLong",
              "docs": [
                " Worker storage text is too long."
              ]
            }
          ],
          "index": 35
        },
        {
          "name": "OperationsWorkingGroupAlpha",
          "storage": {
            "prefix": "Instance4WorkingGroup",
            "items": [
              {
                "name": "NextOpeningId",
                "modifier": "Default",
                "type": {
                  "plain": "OpeningId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new job opening."
                ]
              },
              {
                "name": "OpeningById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "OpeningId",
                    "value": "Opening",
                    "linked": false
                  }
                },
                "fallback": "0x01000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to job opening."
                ]
              },
              {
                "name": "ActiveWorkerCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active workers."
                ]
              },
              {
                "name": "ApplicationById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ApplicationId",
                    "value": "Application",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to worker application on opening."
                ]
              },
              {
                "name": "NextApplicationId",
                "modifier": "Default",
                "type": {
                  "plain": "ApplicationId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new worker application."
                ]
              },
              {
                "name": "NextWorkerId",
                "modifier": "Default",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier for a new worker."
                ]
              },
              {
                "name": "WorkerById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Worker",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to corresponding worker."
                ]
              },
              {
                "name": "CurrentLead",
                "modifier": "Optional",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x00",
                "docs": [
                  " Current group lead."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the working group."
                ]
              },
              {
                "name": "StatusTextHash",
                "modifier": "Default",
                "type": {
                  "plain": "Bytes"
                },
                "fallback": "0x00",
                "docs": [
                  " Status text hash."
                ]
              },
              {
                "name": "WorkerStorage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps identifier to corresponding worker storage."
                ]
              },
              {
                "name": "WorkerStorageSize",
                "modifier": "Default",
                "type": {
                  "plain": "u16"
                },
                "fallback": "0x0008",
                "docs": [
                  " Worker storage size upper bound."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_opening",
              "args": [
                {
                  "name": "description",
                  "type": "Bytes"
                },
                {
                  "name": "opening_type",
                  "type": "OpeningType"
                },
                {
                  "name": "stake_policy",
                  "type": "StakePolicy"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Add a job opening for a regular worker/lead role.",
                " Require signed leader origin or the root (to add opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "apply_on_opening",
              "args": [
                {
                  "name": "p",
                  "type": "ApplyOnOpeningParameters"
                }
              ],
              "docs": [
                " Apply on a worker opening.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `p.description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fill_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                },
                {
                  "name": "successful_application_ids",
                  "type": "BTreeSet<ApplicationId>"
                }
              ],
              "docs": [
                " Fill opening for the regular/lead position.",
                " Require signed leader origin or the root (to fill opening for the leader position).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (A)` where:",
                " - `A` is the length of `successful_application_ids`",
                " - DB:",
                "    - O(A)",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_role_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the associated role account of the active regular worker/lead.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "leave_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Leave the role by the active worker.",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "terminate_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "Option<BalanceOf>"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Terminate the active worker by the lead.",
                " Requires signed leader origin or the root (to terminate the leader role).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penalty.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "slash_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.",
                " If slashing balance greater than the existing stake - stake is slashed to zero.",
                " Requires signed leader origin or the root (to slash the leader stake).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penality.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "decrease_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Decreases the regular worker/lead stake and returns the remainder to the",
                " worker staking_account_id. Can be decreased to zero, no actions on zero stake.",
                " Accepts the stake amount to decrease.",
                " Requires signed leader origin or the root (to decrease the leader stake).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "increase_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Increases the regular worker/lead stake, demands a worker origin.",
                " Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_application",
              "args": [
                {
                  "name": "application_id",
                  "type": "ApplicationId"
                }
              ],
              "docs": [
                " Withdraw the worker application. Can be done by the worker only.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                }
              ],
              "docs": [
                " Cancel an opening for the regular worker/lead position.",
                " Require signed leader origin or the root (to cancel opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "new_budget",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Sets a new budget for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_reward_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the reward account associated with a set reward relationship for the active worker.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_amount",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Update the reward per block for the active worker.",
                " Require signed leader origin or the root (to update leader's reward amount).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_status_text",
              "args": [
                {
                  "name": "status_text",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Sets a new status text for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the contents of `status_text` when it is not none",
                "",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "spend_from_budget",
              "args": [
                {
                  "name": "account_id",
                  "type": "AccountId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Transfers specified amount to any account.",
                " Requires leader origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_storage",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update the associated role storage."
              ]
            }
          ],
          "events": [
            {
              "name": "OpeningAdded",
              "args": [
                "OpeningId",
                "Bytes",
                "OpeningType",
                "StakePolicy",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on adding new job opening.",
                " Params:",
                " - Opening id",
                " - Description",
                " - Opening Type(Lead or Worker)",
                " - Stake Policy for the opening",
                " - Reward per block"
              ]
            },
            {
              "name": "AppliedOnOpening",
              "args": [
                "ApplyOnOpeningParameters",
                "ApplicationId"
              ],
              "docs": [
                " Emits on adding the application for the worker opening.",
                " Params:",
                " - Opening parameteres",
                " - Application id"
              ]
            },
            {
              "name": "OpeningFilled",
              "args": [
                "OpeningId",
                "ApplicationIdToWorkerIdMap",
                "BTreeSet<ApplicationId>"
              ],
              "docs": [
                " Emits on filling the job opening.",
                " Params:",
                " - Worker opening id",
                " - Worker application id to the worker id dictionary",
                " - Applicationd ids used to fill the opening"
              ]
            },
            {
              "name": "LeaderSet",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on setting the group leader.",
                " Params:",
                " - Group worker id."
              ]
            },
            {
              "name": "WorkerRoleAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the role account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Role account id of the worker."
              ]
            },
            {
              "name": "LeaderUnset",
              "args": [],
              "docs": [
                " Emits on un-setting the leader."
              ]
            },
            {
              "name": "WorkerExited",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on exiting the worker.",
                " Params:",
                " - worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "WorkerStartedLeaving",
              "args": [
                "WorkerId",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits when worker started leaving their role.",
                " Params:",
                " - Worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedWorker",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the worker.",
                " Params:",
                " - worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedLeader",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the leader.",
                " Params:",
                " - leader worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeSlashed",
              "args": [
                "WorkerId",
                "Balance",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on slashing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - actual slashed balance.",
                " - Requested slashed balance.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeDecreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on decreasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "StakeIncreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on increasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "ApplicationWithdrawn",
              "args": [
                "ApplicationId"
              ],
              "docs": [
                " Emits on withdrawing the application for the regular worker/lead opening.",
                " Params:",
                " - Job application id"
              ]
            },
            {
              "name": "OpeningCanceled",
              "args": [
                "OpeningId"
              ],
              "docs": [
                " Emits on canceling the job opening.",
                " Params:",
                " - Opening id"
              ]
            },
            {
              "name": "BudgetSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on setting the budget for the working group.",
                " Params:",
                " - new budget"
              ]
            },
            {
              "name": "WorkerRewardAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the reward account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward account id of the worker."
              ]
            },
            {
              "name": "WorkerRewardAmountUpdated",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on updating the reward amount of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward per block"
              ]
            },
            {
              "name": "StatusTextChanged",
              "args": [
                "Bytes",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on updating the status text of the working group.",
                " Params:",
                " - status text hash",
                " - status text"
              ]
            },
            {
              "name": "BudgetSpending",
              "args": [
                "AccountId",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on budget from the working group being spent",
                " Params:",
                " - Receiver Account Id.",
                " - Balance spent.",
                " - Rationale."
              ]
            },
            {
              "name": "RewardPaid",
              "args": [
                "WorkerId",
                "AccountId",
                "Balance",
                "RewardPaymentType"
              ],
              "docs": [
                " Emits on paying the reward.",
                " Params:",
                " - Id of the worker.",
                " - Receiver Account Id.",
                " - Reward",
                " - Payment type (missed reward or regular one)"
              ]
            },
            {
              "name": "NewMissedRewardLevelReached",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on reaching new missed reward.",
                " Params:",
                " - Worker ID.",
                " - Missed reward (optional). None means 'no missed reward'."
              ]
            },
            {
              "name": "WorkerStorageUpdated",
              "args": [
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on updating the worker storage role.",
                " Params:",
                " - Id of the worker.",
                " - Raw storage field."
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxWorkerNumberLimit",
              "type": "u32",
              "value": "0x64000000",
              "docs": [
                " Exports const",
                " Max simultaneous active worker number."
              ]
            },
            {
              "name": "MinUnstakingPeriodLimit",
              "type": "BlockNumber",
              "value": "0xc0a80000",
              "docs": [
                " Defines min unstaking period in the group."
              ]
            },
            {
              "name": "MinimumApplicationStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Minimum stake required for applying into an opening."
              ]
            },
            {
              "name": "LeaderOpeningStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Stake needed to create an opening."
              ]
            },
            {
              "name": "RewardPeriod",
              "type": "u32",
              "value": "0x7c380000",
              "docs": [
                " Defines the period every worker gets paid in blocks."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0d0d0d0d0d0d0d0d",
              "docs": [
                " Staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "StakeBalanceCannotBeZero",
              "docs": [
                " Provided stake balance cannot be zero."
              ]
            },
            {
              "name": "OpeningDoesNotExist",
              "docs": [
                " Opening does not exist."
              ]
            },
            {
              "name": "CannotHireMultipleLeaders",
              "docs": [
                " Cannot fill opening with multiple applications."
              ]
            },
            {
              "name": "WorkerApplicationDoesNotExist",
              "docs": [
                " Worker application does not exist."
              ]
            },
            {
              "name": "MaxActiveWorkerNumberExceeded",
              "docs": [
                " Working group size limit exceeded."
              ]
            },
            {
              "name": "SuccessfulWorkerApplicationDoesNotExist",
              "docs": [
                " Successful worker application does not exist."
              ]
            },
            {
              "name": "CannotHireLeaderWhenLeaderExists",
              "docs": [
                " There is leader already, cannot hire another one."
              ]
            },
            {
              "name": "IsNotLeadAccount",
              "docs": [
                " Not a lead account."
              ]
            },
            {
              "name": "CurrentLeadNotSet",
              "docs": [
                " Current lead is not set."
              ]
            },
            {
              "name": "WorkerDoesNotExist",
              "docs": [
                " Worker does not exist."
              ]
            },
            {
              "name": "InvalidMemberOrigin",
              "docs": [
                " Invalid origin for a member."
              ]
            },
            {
              "name": "SignerIsNotWorkerRoleAccount",
              "docs": [
                " Signer is not worker role account."
              ]
            },
            {
              "name": "BelowMinimumStakes",
              "docs": [
                " Staking less than the lower bound."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            },
            {
              "name": "ApplicationStakeDoesntMatchOpening",
              "docs": [
                " Application stake is less than required opening stake."
              ]
            },
            {
              "name": "OriginIsNotApplicant",
              "docs": [
                " Origin is not applicant."
              ]
            },
            {
              "name": "WorkerIsLeaving",
              "docs": [
                " Invalid operation - worker is leaving."
              ]
            },
            {
              "name": "CannotRewardWithZero",
              "docs": [
                " Reward could not be zero."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "WorkerHasNoReward",
              "docs": [
                " Worker has no recurring reward."
              ]
            },
            {
              "name": "UnstakingPeriodLessThanMinimum",
              "docs": [
                " Specified unstaking period is less then minimum set for the group."
              ]
            },
            {
              "name": "CannotSpendZero",
              "docs": [
                " Invalid spending amount."
              ]
            },
            {
              "name": "InsufficientBudgetForSpending",
              "docs": [
                " It's not enough budget for this spending."
              ]
            },
            {
              "name": "NoApplicationsProvided",
              "docs": [
                " Cannot fill opening - no applications provided."
              ]
            },
            {
              "name": "CannotDecreaseStakeDeltaGreaterThanStake",
              "docs": [
                " Cannot decrease stake - stake delta greater than initial stake."
              ]
            },
            {
              "name": "ApplicationsNotForOpening",
              "docs": [
                " Trying to fill opening with an application for other opening"
              ]
            },
            {
              "name": "WorkerStorageValueTooLong",
              "docs": [
                " Worker storage text is too long."
              ]
            }
          ],
          "index": 36
        },
        {
          "name": "GatewayWorkingGroup",
          "storage": {
            "prefix": "Instance5WorkingGroup",
            "items": [
              {
                "name": "NextOpeningId",
                "modifier": "Default",
                "type": {
                  "plain": "OpeningId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new job opening."
                ]
              },
              {
                "name": "OpeningById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "OpeningId",
                    "value": "Opening",
                    "linked": false
                  }
                },
                "fallback": "0x01000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to job opening."
                ]
              },
              {
                "name": "ActiveWorkerCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active workers."
                ]
              },
              {
                "name": "ApplicationById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ApplicationId",
                    "value": "Application",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to worker application on opening."
                ]
              },
              {
                "name": "NextApplicationId",
                "modifier": "Default",
                "type": {
                  "plain": "ApplicationId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new worker application."
                ]
              },
              {
                "name": "NextWorkerId",
                "modifier": "Default",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier for a new worker."
                ]
              },
              {
                "name": "WorkerById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Worker",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to corresponding worker."
                ]
              },
              {
                "name": "CurrentLead",
                "modifier": "Optional",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x00",
                "docs": [
                  " Current group lead."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the working group."
                ]
              },
              {
                "name": "StatusTextHash",
                "modifier": "Default",
                "type": {
                  "plain": "Bytes"
                },
                "fallback": "0x00",
                "docs": [
                  " Status text hash."
                ]
              },
              {
                "name": "WorkerStorage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps identifier to corresponding worker storage."
                ]
              },
              {
                "name": "WorkerStorageSize",
                "modifier": "Default",
                "type": {
                  "plain": "u16"
                },
                "fallback": "0x0008",
                "docs": [
                  " Worker storage size upper bound."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_opening",
              "args": [
                {
                  "name": "description",
                  "type": "Bytes"
                },
                {
                  "name": "opening_type",
                  "type": "OpeningType"
                },
                {
                  "name": "stake_policy",
                  "type": "StakePolicy"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Add a job opening for a regular worker/lead role.",
                " Require signed leader origin or the root (to add opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "apply_on_opening",
              "args": [
                {
                  "name": "p",
                  "type": "ApplyOnOpeningParameters"
                }
              ],
              "docs": [
                " Apply on a worker opening.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `p.description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fill_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                },
                {
                  "name": "successful_application_ids",
                  "type": "BTreeSet<ApplicationId>"
                }
              ],
              "docs": [
                " Fill opening for the regular/lead position.",
                " Require signed leader origin or the root (to fill opening for the leader position).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (A)` where:",
                " - `A` is the length of `successful_application_ids`",
                " - DB:",
                "    - O(A)",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_role_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the associated role account of the active regular worker/lead.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "leave_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Leave the role by the active worker.",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "terminate_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "Option<BalanceOf>"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Terminate the active worker by the lead.",
                " Requires signed leader origin or the root (to terminate the leader role).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penalty.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "slash_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.",
                " If slashing balance greater than the existing stake - stake is slashed to zero.",
                " Requires signed leader origin or the root (to slash the leader stake).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penality.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "decrease_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Decreases the regular worker/lead stake and returns the remainder to the",
                " worker staking_account_id. Can be decreased to zero, no actions on zero stake.",
                " Accepts the stake amount to decrease.",
                " Requires signed leader origin or the root (to decrease the leader stake).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "increase_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Increases the regular worker/lead stake, demands a worker origin.",
                " Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_application",
              "args": [
                {
                  "name": "application_id",
                  "type": "ApplicationId"
                }
              ],
              "docs": [
                " Withdraw the worker application. Can be done by the worker only.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                }
              ],
              "docs": [
                " Cancel an opening for the regular worker/lead position.",
                " Require signed leader origin or the root (to cancel opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "new_budget",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Sets a new budget for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_reward_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the reward account associated with a set reward relationship for the active worker.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_amount",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Update the reward per block for the active worker.",
                " Require signed leader origin or the root (to update leader's reward amount).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_status_text",
              "args": [
                {
                  "name": "status_text",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Sets a new status text for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the contents of `status_text` when it is not none",
                "",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "spend_from_budget",
              "args": [
                {
                  "name": "account_id",
                  "type": "AccountId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Transfers specified amount to any account.",
                " Requires leader origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_storage",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update the associated role storage."
              ]
            }
          ],
          "events": [
            {
              "name": "OpeningAdded",
              "args": [
                "OpeningId",
                "Bytes",
                "OpeningType",
                "StakePolicy",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on adding new job opening.",
                " Params:",
                " - Opening id",
                " - Description",
                " - Opening Type(Lead or Worker)",
                " - Stake Policy for the opening",
                " - Reward per block"
              ]
            },
            {
              "name": "AppliedOnOpening",
              "args": [
                "ApplyOnOpeningParameters",
                "ApplicationId"
              ],
              "docs": [
                " Emits on adding the application for the worker opening.",
                " Params:",
                " - Opening parameteres",
                " - Application id"
              ]
            },
            {
              "name": "OpeningFilled",
              "args": [
                "OpeningId",
                "ApplicationIdToWorkerIdMap",
                "BTreeSet<ApplicationId>"
              ],
              "docs": [
                " Emits on filling the job opening.",
                " Params:",
                " - Worker opening id",
                " - Worker application id to the worker id dictionary",
                " - Applicationd ids used to fill the opening"
              ]
            },
            {
              "name": "LeaderSet",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on setting the group leader.",
                " Params:",
                " - Group worker id."
              ]
            },
            {
              "name": "WorkerRoleAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the role account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Role account id of the worker."
              ]
            },
            {
              "name": "LeaderUnset",
              "args": [],
              "docs": [
                " Emits on un-setting the leader."
              ]
            },
            {
              "name": "WorkerExited",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on exiting the worker.",
                " Params:",
                " - worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "WorkerStartedLeaving",
              "args": [
                "WorkerId",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits when worker started leaving their role.",
                " Params:",
                " - Worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedWorker",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the worker.",
                " Params:",
                " - worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedLeader",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the leader.",
                " Params:",
                " - leader worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeSlashed",
              "args": [
                "WorkerId",
                "Balance",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on slashing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - actual slashed balance.",
                " - Requested slashed balance.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeDecreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on decreasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "StakeIncreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on increasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "ApplicationWithdrawn",
              "args": [
                "ApplicationId"
              ],
              "docs": [
                " Emits on withdrawing the application for the regular worker/lead opening.",
                " Params:",
                " - Job application id"
              ]
            },
            {
              "name": "OpeningCanceled",
              "args": [
                "OpeningId"
              ],
              "docs": [
                " Emits on canceling the job opening.",
                " Params:",
                " - Opening id"
              ]
            },
            {
              "name": "BudgetSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on setting the budget for the working group.",
                " Params:",
                " - new budget"
              ]
            },
            {
              "name": "WorkerRewardAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the reward account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward account id of the worker."
              ]
            },
            {
              "name": "WorkerRewardAmountUpdated",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on updating the reward amount of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward per block"
              ]
            },
            {
              "name": "StatusTextChanged",
              "args": [
                "Bytes",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on updating the status text of the working group.",
                " Params:",
                " - status text hash",
                " - status text"
              ]
            },
            {
              "name": "BudgetSpending",
              "args": [
                "AccountId",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on budget from the working group being spent",
                " Params:",
                " - Receiver Account Id.",
                " - Balance spent.",
                " - Rationale."
              ]
            },
            {
              "name": "RewardPaid",
              "args": [
                "WorkerId",
                "AccountId",
                "Balance",
                "RewardPaymentType"
              ],
              "docs": [
                " Emits on paying the reward.",
                " Params:",
                " - Id of the worker.",
                " - Receiver Account Id.",
                " - Reward",
                " - Payment type (missed reward or regular one)"
              ]
            },
            {
              "name": "NewMissedRewardLevelReached",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on reaching new missed reward.",
                " Params:",
                " - Worker ID.",
                " - Missed reward (optional). None means 'no missed reward'."
              ]
            },
            {
              "name": "WorkerStorageUpdated",
              "args": [
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on updating the worker storage role.",
                " Params:",
                " - Id of the worker.",
                " - Raw storage field."
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxWorkerNumberLimit",
              "type": "u32",
              "value": "0x64000000",
              "docs": [
                " Exports const",
                " Max simultaneous active worker number."
              ]
            },
            {
              "name": "MinUnstakingPeriodLimit",
              "type": "BlockNumber",
              "value": "0xc0a80000",
              "docs": [
                " Defines min unstaking period in the group."
              ]
            },
            {
              "name": "MinimumApplicationStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Minimum stake required for applying into an opening."
              ]
            },
            {
              "name": "LeaderOpeningStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Stake needed to create an opening."
              ]
            },
            {
              "name": "RewardPeriod",
              "type": "u32",
              "value": "0x72380000",
              "docs": [
                " Defines the period every worker gets paid in blocks."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0e0e0e0e0e0e0e0e",
              "docs": [
                " Staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "StakeBalanceCannotBeZero",
              "docs": [
                " Provided stake balance cannot be zero."
              ]
            },
            {
              "name": "OpeningDoesNotExist",
              "docs": [
                " Opening does not exist."
              ]
            },
            {
              "name": "CannotHireMultipleLeaders",
              "docs": [
                " Cannot fill opening with multiple applications."
              ]
            },
            {
              "name": "WorkerApplicationDoesNotExist",
              "docs": [
                " Worker application does not exist."
              ]
            },
            {
              "name": "MaxActiveWorkerNumberExceeded",
              "docs": [
                " Working group size limit exceeded."
              ]
            },
            {
              "name": "SuccessfulWorkerApplicationDoesNotExist",
              "docs": [
                " Successful worker application does not exist."
              ]
            },
            {
              "name": "CannotHireLeaderWhenLeaderExists",
              "docs": [
                " There is leader already, cannot hire another one."
              ]
            },
            {
              "name": "IsNotLeadAccount",
              "docs": [
                " Not a lead account."
              ]
            },
            {
              "name": "CurrentLeadNotSet",
              "docs": [
                " Current lead is not set."
              ]
            },
            {
              "name": "WorkerDoesNotExist",
              "docs": [
                " Worker does not exist."
              ]
            },
            {
              "name": "InvalidMemberOrigin",
              "docs": [
                " Invalid origin for a member."
              ]
            },
            {
              "name": "SignerIsNotWorkerRoleAccount",
              "docs": [
                " Signer is not worker role account."
              ]
            },
            {
              "name": "BelowMinimumStakes",
              "docs": [
                " Staking less than the lower bound."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            },
            {
              "name": "ApplicationStakeDoesntMatchOpening",
              "docs": [
                " Application stake is less than required opening stake."
              ]
            },
            {
              "name": "OriginIsNotApplicant",
              "docs": [
                " Origin is not applicant."
              ]
            },
            {
              "name": "WorkerIsLeaving",
              "docs": [
                " Invalid operation - worker is leaving."
              ]
            },
            {
              "name": "CannotRewardWithZero",
              "docs": [
                " Reward could not be zero."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "WorkerHasNoReward",
              "docs": [
                " Worker has no recurring reward."
              ]
            },
            {
              "name": "UnstakingPeriodLessThanMinimum",
              "docs": [
                " Specified unstaking period is less then minimum set for the group."
              ]
            },
            {
              "name": "CannotSpendZero",
              "docs": [
                " Invalid spending amount."
              ]
            },
            {
              "name": "InsufficientBudgetForSpending",
              "docs": [
                " It's not enough budget for this spending."
              ]
            },
            {
              "name": "NoApplicationsProvided",
              "docs": [
                " Cannot fill opening - no applications provided."
              ]
            },
            {
              "name": "CannotDecreaseStakeDeltaGreaterThanStake",
              "docs": [
                " Cannot decrease stake - stake delta greater than initial stake."
              ]
            },
            {
              "name": "ApplicationsNotForOpening",
              "docs": [
                " Trying to fill opening with an application for other opening"
              ]
            },
            {
              "name": "WorkerStorageValueTooLong",
              "docs": [
                " Worker storage text is too long."
              ]
            }
          ],
          "index": 37
        },
        {
          "name": "MembershipWorkingGroup",
          "storage": {
            "prefix": "Instance6WorkingGroup",
            "items": [
              {
                "name": "NextOpeningId",
                "modifier": "Default",
                "type": {
                  "plain": "OpeningId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new job opening."
                ]
              },
              {
                "name": "OpeningById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "OpeningId",
                    "value": "Opening",
                    "linked": false
                  }
                },
                "fallback": "0x01000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to job opening."
                ]
              },
              {
                "name": "ActiveWorkerCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active workers."
                ]
              },
              {
                "name": "ApplicationById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ApplicationId",
                    "value": "Application",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to worker application on opening."
                ]
              },
              {
                "name": "NextApplicationId",
                "modifier": "Default",
                "type": {
                  "plain": "ApplicationId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new worker application."
                ]
              },
              {
                "name": "NextWorkerId",
                "modifier": "Default",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier for a new worker."
                ]
              },
              {
                "name": "WorkerById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Worker",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to corresponding worker."
                ]
              },
              {
                "name": "CurrentLead",
                "modifier": "Optional",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x00",
                "docs": [
                  " Current group lead."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the working group."
                ]
              },
              {
                "name": "StatusTextHash",
                "modifier": "Default",
                "type": {
                  "plain": "Bytes"
                },
                "fallback": "0x00",
                "docs": [
                  " Status text hash."
                ]
              },
              {
                "name": "WorkerStorage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps identifier to corresponding worker storage."
                ]
              },
              {
                "name": "WorkerStorageSize",
                "modifier": "Default",
                "type": {
                  "plain": "u16"
                },
                "fallback": "0x0008",
                "docs": [
                  " Worker storage size upper bound."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_opening",
              "args": [
                {
                  "name": "description",
                  "type": "Bytes"
                },
                {
                  "name": "opening_type",
                  "type": "OpeningType"
                },
                {
                  "name": "stake_policy",
                  "type": "StakePolicy"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Add a job opening for a regular worker/lead role.",
                " Require signed leader origin or the root (to add opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "apply_on_opening",
              "args": [
                {
                  "name": "p",
                  "type": "ApplyOnOpeningParameters"
                }
              ],
              "docs": [
                " Apply on a worker opening.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `p.description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fill_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                },
                {
                  "name": "successful_application_ids",
                  "type": "BTreeSet<ApplicationId>"
                }
              ],
              "docs": [
                " Fill opening for the regular/lead position.",
                " Require signed leader origin or the root (to fill opening for the leader position).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (A)` where:",
                " - `A` is the length of `successful_application_ids`",
                " - DB:",
                "    - O(A)",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_role_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the associated role account of the active regular worker/lead.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "leave_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Leave the role by the active worker.",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "terminate_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "Option<BalanceOf>"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Terminate the active worker by the lead.",
                " Requires signed leader origin or the root (to terminate the leader role).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penalty.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "slash_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.",
                " If slashing balance greater than the existing stake - stake is slashed to zero.",
                " Requires signed leader origin or the root (to slash the leader stake).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penality.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "decrease_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Decreases the regular worker/lead stake and returns the remainder to the",
                " worker staking_account_id. Can be decreased to zero, no actions on zero stake.",
                " Accepts the stake amount to decrease.",
                " Requires signed leader origin or the root (to decrease the leader stake).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "increase_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Increases the regular worker/lead stake, demands a worker origin.",
                " Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_application",
              "args": [
                {
                  "name": "application_id",
                  "type": "ApplicationId"
                }
              ],
              "docs": [
                " Withdraw the worker application. Can be done by the worker only.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                }
              ],
              "docs": [
                " Cancel an opening for the regular worker/lead position.",
                " Require signed leader origin or the root (to cancel opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "new_budget",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Sets a new budget for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_reward_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the reward account associated with a set reward relationship for the active worker.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_amount",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Update the reward per block for the active worker.",
                " Require signed leader origin or the root (to update leader's reward amount).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_status_text",
              "args": [
                {
                  "name": "status_text",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Sets a new status text for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the contents of `status_text` when it is not none",
                "",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "spend_from_budget",
              "args": [
                {
                  "name": "account_id",
                  "type": "AccountId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Transfers specified amount to any account.",
                " Requires leader origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_storage",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update the associated role storage."
              ]
            }
          ],
          "events": [
            {
              "name": "OpeningAdded",
              "args": [
                "OpeningId",
                "Bytes",
                "OpeningType",
                "StakePolicy",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on adding new job opening.",
                " Params:",
                " - Opening id",
                " - Description",
                " - Opening Type(Lead or Worker)",
                " - Stake Policy for the opening",
                " - Reward per block"
              ]
            },
            {
              "name": "AppliedOnOpening",
              "args": [
                "ApplyOnOpeningParameters",
                "ApplicationId"
              ],
              "docs": [
                " Emits on adding the application for the worker opening.",
                " Params:",
                " - Opening parameteres",
                " - Application id"
              ]
            },
            {
              "name": "OpeningFilled",
              "args": [
                "OpeningId",
                "ApplicationIdToWorkerIdMap",
                "BTreeSet<ApplicationId>"
              ],
              "docs": [
                " Emits on filling the job opening.",
                " Params:",
                " - Worker opening id",
                " - Worker application id to the worker id dictionary",
                " - Applicationd ids used to fill the opening"
              ]
            },
            {
              "name": "LeaderSet",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on setting the group leader.",
                " Params:",
                " - Group worker id."
              ]
            },
            {
              "name": "WorkerRoleAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the role account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Role account id of the worker."
              ]
            },
            {
              "name": "LeaderUnset",
              "args": [],
              "docs": [
                " Emits on un-setting the leader."
              ]
            },
            {
              "name": "WorkerExited",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on exiting the worker.",
                " Params:",
                " - worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "WorkerStartedLeaving",
              "args": [
                "WorkerId",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits when worker started leaving their role.",
                " Params:",
                " - Worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedWorker",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the worker.",
                " Params:",
                " - worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedLeader",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the leader.",
                " Params:",
                " - leader worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeSlashed",
              "args": [
                "WorkerId",
                "Balance",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on slashing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - actual slashed balance.",
                " - Requested slashed balance.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeDecreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on decreasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "StakeIncreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on increasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "ApplicationWithdrawn",
              "args": [
                "ApplicationId"
              ],
              "docs": [
                " Emits on withdrawing the application for the regular worker/lead opening.",
                " Params:",
                " - Job application id"
              ]
            },
            {
              "name": "OpeningCanceled",
              "args": [
                "OpeningId"
              ],
              "docs": [
                " Emits on canceling the job opening.",
                " Params:",
                " - Opening id"
              ]
            },
            {
              "name": "BudgetSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on setting the budget for the working group.",
                " Params:",
                " - new budget"
              ]
            },
            {
              "name": "WorkerRewardAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the reward account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward account id of the worker."
              ]
            },
            {
              "name": "WorkerRewardAmountUpdated",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on updating the reward amount of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward per block"
              ]
            },
            {
              "name": "StatusTextChanged",
              "args": [
                "Bytes",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on updating the status text of the working group.",
                " Params:",
                " - status text hash",
                " - status text"
              ]
            },
            {
              "name": "BudgetSpending",
              "args": [
                "AccountId",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on budget from the working group being spent",
                " Params:",
                " - Receiver Account Id.",
                " - Balance spent.",
                " - Rationale."
              ]
            },
            {
              "name": "RewardPaid",
              "args": [
                "WorkerId",
                "AccountId",
                "Balance",
                "RewardPaymentType"
              ],
              "docs": [
                " Emits on paying the reward.",
                " Params:",
                " - Id of the worker.",
                " - Receiver Account Id.",
                " - Reward",
                " - Payment type (missed reward or regular one)"
              ]
            },
            {
              "name": "NewMissedRewardLevelReached",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on reaching new missed reward.",
                " Params:",
                " - Worker ID.",
                " - Missed reward (optional). None means 'no missed reward'."
              ]
            },
            {
              "name": "WorkerStorageUpdated",
              "args": [
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on updating the worker storage role.",
                " Params:",
                " - Id of the worker.",
                " - Raw storage field."
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxWorkerNumberLimit",
              "type": "u32",
              "value": "0x64000000",
              "docs": [
                " Exports const",
                " Max simultaneous active worker number."
              ]
            },
            {
              "name": "MinUnstakingPeriodLimit",
              "type": "BlockNumber",
              "value": "0xc0a80000",
              "docs": [
                " Defines min unstaking period in the group."
              ]
            },
            {
              "name": "MinimumApplicationStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Minimum stake required for applying into an opening."
              ]
            },
            {
              "name": "LeaderOpeningStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Stake needed to create an opening."
              ]
            },
            {
              "name": "RewardPeriod",
              "type": "u32",
              "value": "0x68380000",
              "docs": [
                " Defines the period every worker gets paid in blocks."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0909090909090909",
              "docs": [
                " Staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "StakeBalanceCannotBeZero",
              "docs": [
                " Provided stake balance cannot be zero."
              ]
            },
            {
              "name": "OpeningDoesNotExist",
              "docs": [
                " Opening does not exist."
              ]
            },
            {
              "name": "CannotHireMultipleLeaders",
              "docs": [
                " Cannot fill opening with multiple applications."
              ]
            },
            {
              "name": "WorkerApplicationDoesNotExist",
              "docs": [
                " Worker application does not exist."
              ]
            },
            {
              "name": "MaxActiveWorkerNumberExceeded",
              "docs": [
                " Working group size limit exceeded."
              ]
            },
            {
              "name": "SuccessfulWorkerApplicationDoesNotExist",
              "docs": [
                " Successful worker application does not exist."
              ]
            },
            {
              "name": "CannotHireLeaderWhenLeaderExists",
              "docs": [
                " There is leader already, cannot hire another one."
              ]
            },
            {
              "name": "IsNotLeadAccount",
              "docs": [
                " Not a lead account."
              ]
            },
            {
              "name": "CurrentLeadNotSet",
              "docs": [
                " Current lead is not set."
              ]
            },
            {
              "name": "WorkerDoesNotExist",
              "docs": [
                " Worker does not exist."
              ]
            },
            {
              "name": "InvalidMemberOrigin",
              "docs": [
                " Invalid origin for a member."
              ]
            },
            {
              "name": "SignerIsNotWorkerRoleAccount",
              "docs": [
                " Signer is not worker role account."
              ]
            },
            {
              "name": "BelowMinimumStakes",
              "docs": [
                " Staking less than the lower bound."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            },
            {
              "name": "ApplicationStakeDoesntMatchOpening",
              "docs": [
                " Application stake is less than required opening stake."
              ]
            },
            {
              "name": "OriginIsNotApplicant",
              "docs": [
                " Origin is not applicant."
              ]
            },
            {
              "name": "WorkerIsLeaving",
              "docs": [
                " Invalid operation - worker is leaving."
              ]
            },
            {
              "name": "CannotRewardWithZero",
              "docs": [
                " Reward could not be zero."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "WorkerHasNoReward",
              "docs": [
                " Worker has no recurring reward."
              ]
            },
            {
              "name": "UnstakingPeriodLessThanMinimum",
              "docs": [
                " Specified unstaking period is less then minimum set for the group."
              ]
            },
            {
              "name": "CannotSpendZero",
              "docs": [
                " Invalid spending amount."
              ]
            },
            {
              "name": "InsufficientBudgetForSpending",
              "docs": [
                " It's not enough budget for this spending."
              ]
            },
            {
              "name": "NoApplicationsProvided",
              "docs": [
                " Cannot fill opening - no applications provided."
              ]
            },
            {
              "name": "CannotDecreaseStakeDeltaGreaterThanStake",
              "docs": [
                " Cannot decrease stake - stake delta greater than initial stake."
              ]
            },
            {
              "name": "ApplicationsNotForOpening",
              "docs": [
                " Trying to fill opening with an application for other opening"
              ]
            },
            {
              "name": "WorkerStorageValueTooLong",
              "docs": [
                " Worker storage text is too long."
              ]
            }
          ],
          "index": 38
        },
        {
          "name": "DistributionWorkingGroup",
          "storage": {
            "prefix": "Instance7WorkingGroup",
            "items": [
              {
                "name": "NextOpeningId",
                "modifier": "Default",
                "type": {
                  "plain": "OpeningId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new job opening."
                ]
              },
              {
                "name": "OpeningById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "OpeningId",
                    "value": "Opening",
                    "linked": false
                  }
                },
                "fallback": "0x01000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to job opening."
                ]
              },
              {
                "name": "ActiveWorkerCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active workers."
                ]
              },
              {
                "name": "ApplicationById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ApplicationId",
                    "value": "Application",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to worker application on opening."
                ]
              },
              {
                "name": "NextApplicationId",
                "modifier": "Default",
                "type": {
                  "plain": "ApplicationId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new worker application."
                ]
              },
              {
                "name": "NextWorkerId",
                "modifier": "Default",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier for a new worker."
                ]
              },
              {
                "name": "WorkerById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Worker",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to corresponding worker."
                ]
              },
              {
                "name": "CurrentLead",
                "modifier": "Optional",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x00",
                "docs": [
                  " Current group lead."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the working group."
                ]
              },
              {
                "name": "StatusTextHash",
                "modifier": "Default",
                "type": {
                  "plain": "Bytes"
                },
                "fallback": "0x00",
                "docs": [
                  " Status text hash."
                ]
              },
              {
                "name": "WorkerStorage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps identifier to corresponding worker storage."
                ]
              },
              {
                "name": "WorkerStorageSize",
                "modifier": "Default",
                "type": {
                  "plain": "u16"
                },
                "fallback": "0x0008",
                "docs": [
                  " Worker storage size upper bound."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_opening",
              "args": [
                {
                  "name": "description",
                  "type": "Bytes"
                },
                {
                  "name": "opening_type",
                  "type": "OpeningType"
                },
                {
                  "name": "stake_policy",
                  "type": "StakePolicy"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Add a job opening for a regular worker/lead role.",
                " Require signed leader origin or the root (to add opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "apply_on_opening",
              "args": [
                {
                  "name": "p",
                  "type": "ApplyOnOpeningParameters"
                }
              ],
              "docs": [
                " Apply on a worker opening.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `p.description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fill_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                },
                {
                  "name": "successful_application_ids",
                  "type": "BTreeSet<ApplicationId>"
                }
              ],
              "docs": [
                " Fill opening for the regular/lead position.",
                " Require signed leader origin or the root (to fill opening for the leader position).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (A)` where:",
                " - `A` is the length of `successful_application_ids`",
                " - DB:",
                "    - O(A)",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_role_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the associated role account of the active regular worker/lead.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "leave_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Leave the role by the active worker.",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "terminate_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "Option<BalanceOf>"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Terminate the active worker by the lead.",
                " Requires signed leader origin or the root (to terminate the leader role).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penalty.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "slash_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.",
                " If slashing balance greater than the existing stake - stake is slashed to zero.",
                " Requires signed leader origin or the root (to slash the leader stake).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penality.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "decrease_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Decreases the regular worker/lead stake and returns the remainder to the",
                " worker staking_account_id. Can be decreased to zero, no actions on zero stake.",
                " Accepts the stake amount to decrease.",
                " Requires signed leader origin or the root (to decrease the leader stake).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "increase_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Increases the regular worker/lead stake, demands a worker origin.",
                " Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_application",
              "args": [
                {
                  "name": "application_id",
                  "type": "ApplicationId"
                }
              ],
              "docs": [
                " Withdraw the worker application. Can be done by the worker only.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                }
              ],
              "docs": [
                " Cancel an opening for the regular worker/lead position.",
                " Require signed leader origin or the root (to cancel opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "new_budget",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Sets a new budget for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_reward_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the reward account associated with a set reward relationship for the active worker.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_amount",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Update the reward per block for the active worker.",
                " Require signed leader origin or the root (to update leader's reward amount).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_status_text",
              "args": [
                {
                  "name": "status_text",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Sets a new status text for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the contents of `status_text` when it is not none",
                "",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "spend_from_budget",
              "args": [
                {
                  "name": "account_id",
                  "type": "AccountId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Transfers specified amount to any account.",
                " Requires leader origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_storage",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update the associated role storage."
              ]
            }
          ],
          "events": [
            {
              "name": "OpeningAdded",
              "args": [
                "OpeningId",
                "Bytes",
                "OpeningType",
                "StakePolicy",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on adding new job opening.",
                " Params:",
                " - Opening id",
                " - Description",
                " - Opening Type(Lead or Worker)",
                " - Stake Policy for the opening",
                " - Reward per block"
              ]
            },
            {
              "name": "AppliedOnOpening",
              "args": [
                "ApplyOnOpeningParameters",
                "ApplicationId"
              ],
              "docs": [
                " Emits on adding the application for the worker opening.",
                " Params:",
                " - Opening parameteres",
                " - Application id"
              ]
            },
            {
              "name": "OpeningFilled",
              "args": [
                "OpeningId",
                "ApplicationIdToWorkerIdMap",
                "BTreeSet<ApplicationId>"
              ],
              "docs": [
                " Emits on filling the job opening.",
                " Params:",
                " - Worker opening id",
                " - Worker application id to the worker id dictionary",
                " - Applicationd ids used to fill the opening"
              ]
            },
            {
              "name": "LeaderSet",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on setting the group leader.",
                " Params:",
                " - Group worker id."
              ]
            },
            {
              "name": "WorkerRoleAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the role account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Role account id of the worker."
              ]
            },
            {
              "name": "LeaderUnset",
              "args": [],
              "docs": [
                " Emits on un-setting the leader."
              ]
            },
            {
              "name": "WorkerExited",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on exiting the worker.",
                " Params:",
                " - worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "WorkerStartedLeaving",
              "args": [
                "WorkerId",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits when worker started leaving their role.",
                " Params:",
                " - Worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedWorker",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the worker.",
                " Params:",
                " - worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedLeader",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the leader.",
                " Params:",
                " - leader worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeSlashed",
              "args": [
                "WorkerId",
                "Balance",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on slashing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - actual slashed balance.",
                " - Requested slashed balance.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeDecreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on decreasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "StakeIncreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on increasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "ApplicationWithdrawn",
              "args": [
                "ApplicationId"
              ],
              "docs": [
                " Emits on withdrawing the application for the regular worker/lead opening.",
                " Params:",
                " - Job application id"
              ]
            },
            {
              "name": "OpeningCanceled",
              "args": [
                "OpeningId"
              ],
              "docs": [
                " Emits on canceling the job opening.",
                " Params:",
                " - Opening id"
              ]
            },
            {
              "name": "BudgetSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on setting the budget for the working group.",
                " Params:",
                " - new budget"
              ]
            },
            {
              "name": "WorkerRewardAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the reward account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward account id of the worker."
              ]
            },
            {
              "name": "WorkerRewardAmountUpdated",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on updating the reward amount of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward per block"
              ]
            },
            {
              "name": "StatusTextChanged",
              "args": [
                "Bytes",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on updating the status text of the working group.",
                " Params:",
                " - status text hash",
                " - status text"
              ]
            },
            {
              "name": "BudgetSpending",
              "args": [
                "AccountId",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on budget from the working group being spent",
                " Params:",
                " - Receiver Account Id.",
                " - Balance spent.",
                " - Rationale."
              ]
            },
            {
              "name": "RewardPaid",
              "args": [
                "WorkerId",
                "AccountId",
                "Balance",
                "RewardPaymentType"
              ],
              "docs": [
                " Emits on paying the reward.",
                " Params:",
                " - Id of the worker.",
                " - Receiver Account Id.",
                " - Reward",
                " - Payment type (missed reward or regular one)"
              ]
            },
            {
              "name": "NewMissedRewardLevelReached",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on reaching new missed reward.",
                " Params:",
                " - Worker ID.",
                " - Missed reward (optional). None means 'no missed reward'."
              ]
            },
            {
              "name": "WorkerStorageUpdated",
              "args": [
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on updating the worker storage role.",
                " Params:",
                " - Id of the worker.",
                " - Raw storage field."
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxWorkerNumberLimit",
              "type": "u32",
              "value": "0x64000000",
              "docs": [
                " Exports const",
                " Max simultaneous active worker number."
              ]
            },
            {
              "name": "MinUnstakingPeriodLimit",
              "type": "BlockNumber",
              "value": "0xc0a80000",
              "docs": [
                " Defines min unstaking period in the group."
              ]
            },
            {
              "name": "MinimumApplicationStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Minimum stake required for applying into an opening."
              ]
            },
            {
              "name": "LeaderOpeningStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Stake needed to create an opening."
              ]
            },
            {
              "name": "RewardPeriod",
              "type": "u32",
              "value": "0x7c380000",
              "docs": [
                " Defines the period every worker gets paid in blocks."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0d0d0d0d0d0d0d0d",
              "docs": [
                " Staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "StakeBalanceCannotBeZero",
              "docs": [
                " Provided stake balance cannot be zero."
              ]
            },
            {
              "name": "OpeningDoesNotExist",
              "docs": [
                " Opening does not exist."
              ]
            },
            {
              "name": "CannotHireMultipleLeaders",
              "docs": [
                " Cannot fill opening with multiple applications."
              ]
            },
            {
              "name": "WorkerApplicationDoesNotExist",
              "docs": [
                " Worker application does not exist."
              ]
            },
            {
              "name": "MaxActiveWorkerNumberExceeded",
              "docs": [
                " Working group size limit exceeded."
              ]
            },
            {
              "name": "SuccessfulWorkerApplicationDoesNotExist",
              "docs": [
                " Successful worker application does not exist."
              ]
            },
            {
              "name": "CannotHireLeaderWhenLeaderExists",
              "docs": [
                " There is leader already, cannot hire another one."
              ]
            },
            {
              "name": "IsNotLeadAccount",
              "docs": [
                " Not a lead account."
              ]
            },
            {
              "name": "CurrentLeadNotSet",
              "docs": [
                " Current lead is not set."
              ]
            },
            {
              "name": "WorkerDoesNotExist",
              "docs": [
                " Worker does not exist."
              ]
            },
            {
              "name": "InvalidMemberOrigin",
              "docs": [
                " Invalid origin for a member."
              ]
            },
            {
              "name": "SignerIsNotWorkerRoleAccount",
              "docs": [
                " Signer is not worker role account."
              ]
            },
            {
              "name": "BelowMinimumStakes",
              "docs": [
                " Staking less than the lower bound."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            },
            {
              "name": "ApplicationStakeDoesntMatchOpening",
              "docs": [
                " Application stake is less than required opening stake."
              ]
            },
            {
              "name": "OriginIsNotApplicant",
              "docs": [
                " Origin is not applicant."
              ]
            },
            {
              "name": "WorkerIsLeaving",
              "docs": [
                " Invalid operation - worker is leaving."
              ]
            },
            {
              "name": "CannotRewardWithZero",
              "docs": [
                " Reward could not be zero."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "WorkerHasNoReward",
              "docs": [
                " Worker has no recurring reward."
              ]
            },
            {
              "name": "UnstakingPeriodLessThanMinimum",
              "docs": [
                " Specified unstaking period is less then minimum set for the group."
              ]
            },
            {
              "name": "CannotSpendZero",
              "docs": [
                " Invalid spending amount."
              ]
            },
            {
              "name": "InsufficientBudgetForSpending",
              "docs": [
                " It's not enough budget for this spending."
              ]
            },
            {
              "name": "NoApplicationsProvided",
              "docs": [
                " Cannot fill opening - no applications provided."
              ]
            },
            {
              "name": "CannotDecreaseStakeDeltaGreaterThanStake",
              "docs": [
                " Cannot decrease stake - stake delta greater than initial stake."
              ]
            },
            {
              "name": "ApplicationsNotForOpening",
              "docs": [
                " Trying to fill opening with an application for other opening"
              ]
            },
            {
              "name": "WorkerStorageValueTooLong",
              "docs": [
                " Worker storage text is too long."
              ]
            }
          ],
          "index": 39
        },
        {
          "name": "OperationsWorkingGroupBeta",
          "storage": {
            "prefix": "Instance8WorkingGroup",
            "items": [
              {
                "name": "NextOpeningId",
                "modifier": "Default",
                "type": {
                  "plain": "OpeningId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new job opening."
                ]
              },
              {
                "name": "OpeningById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "OpeningId",
                    "value": "Opening",
                    "linked": false
                  }
                },
                "fallback": "0x01000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to job opening."
                ]
              },
              {
                "name": "ActiveWorkerCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active workers."
                ]
              },
              {
                "name": "ApplicationById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ApplicationId",
                    "value": "Application",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to worker application on opening."
                ]
              },
              {
                "name": "NextApplicationId",
                "modifier": "Default",
                "type": {
                  "plain": "ApplicationId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new worker application."
                ]
              },
              {
                "name": "NextWorkerId",
                "modifier": "Default",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier for a new worker."
                ]
              },
              {
                "name": "WorkerById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Worker",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to corresponding worker."
                ]
              },
              {
                "name": "CurrentLead",
                "modifier": "Optional",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x00",
                "docs": [
                  " Current group lead."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the working group."
                ]
              },
              {
                "name": "StatusTextHash",
                "modifier": "Default",
                "type": {
                  "plain": "Bytes"
                },
                "fallback": "0x00",
                "docs": [
                  " Status text hash."
                ]
              },
              {
                "name": "WorkerStorage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps identifier to corresponding worker storage."
                ]
              },
              {
                "name": "WorkerStorageSize",
                "modifier": "Default",
                "type": {
                  "plain": "u16"
                },
                "fallback": "0x0008",
                "docs": [
                  " Worker storage size upper bound."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_opening",
              "args": [
                {
                  "name": "description",
                  "type": "Bytes"
                },
                {
                  "name": "opening_type",
                  "type": "OpeningType"
                },
                {
                  "name": "stake_policy",
                  "type": "StakePolicy"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Add a job opening for a regular worker/lead role.",
                " Require signed leader origin or the root (to add opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "apply_on_opening",
              "args": [
                {
                  "name": "p",
                  "type": "ApplyOnOpeningParameters"
                }
              ],
              "docs": [
                " Apply on a worker opening.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `p.description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fill_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                },
                {
                  "name": "successful_application_ids",
                  "type": "BTreeSet<ApplicationId>"
                }
              ],
              "docs": [
                " Fill opening for the regular/lead position.",
                " Require signed leader origin or the root (to fill opening for the leader position).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (A)` where:",
                " - `A` is the length of `successful_application_ids`",
                " - DB:",
                "    - O(A)",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_role_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the associated role account of the active regular worker/lead.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "leave_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Leave the role by the active worker.",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "terminate_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "Option<BalanceOf>"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Terminate the active worker by the lead.",
                " Requires signed leader origin or the root (to terminate the leader role).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penalty.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "slash_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.",
                " If slashing balance greater than the existing stake - stake is slashed to zero.",
                " Requires signed leader origin or the root (to slash the leader stake).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penality.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "decrease_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Decreases the regular worker/lead stake and returns the remainder to the",
                " worker staking_account_id. Can be decreased to zero, no actions on zero stake.",
                " Accepts the stake amount to decrease.",
                " Requires signed leader origin or the root (to decrease the leader stake).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "increase_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Increases the regular worker/lead stake, demands a worker origin.",
                " Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_application",
              "args": [
                {
                  "name": "application_id",
                  "type": "ApplicationId"
                }
              ],
              "docs": [
                " Withdraw the worker application. Can be done by the worker only.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                }
              ],
              "docs": [
                " Cancel an opening for the regular worker/lead position.",
                " Require signed leader origin or the root (to cancel opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "new_budget",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Sets a new budget for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_reward_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the reward account associated with a set reward relationship for the active worker.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_amount",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Update the reward per block for the active worker.",
                " Require signed leader origin or the root (to update leader's reward amount).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_status_text",
              "args": [
                {
                  "name": "status_text",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Sets a new status text for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the contents of `status_text` when it is not none",
                "",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "spend_from_budget",
              "args": [
                {
                  "name": "account_id",
                  "type": "AccountId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Transfers specified amount to any account.",
                " Requires leader origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_storage",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update the associated role storage."
              ]
            }
          ],
          "events": [
            {
              "name": "OpeningAdded",
              "args": [
                "OpeningId",
                "Bytes",
                "OpeningType",
                "StakePolicy",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on adding new job opening.",
                " Params:",
                " - Opening id",
                " - Description",
                " - Opening Type(Lead or Worker)",
                " - Stake Policy for the opening",
                " - Reward per block"
              ]
            },
            {
              "name": "AppliedOnOpening",
              "args": [
                "ApplyOnOpeningParameters",
                "ApplicationId"
              ],
              "docs": [
                " Emits on adding the application for the worker opening.",
                " Params:",
                " - Opening parameteres",
                " - Application id"
              ]
            },
            {
              "name": "OpeningFilled",
              "args": [
                "OpeningId",
                "ApplicationIdToWorkerIdMap",
                "BTreeSet<ApplicationId>"
              ],
              "docs": [
                " Emits on filling the job opening.",
                " Params:",
                " - Worker opening id",
                " - Worker application id to the worker id dictionary",
                " - Applicationd ids used to fill the opening"
              ]
            },
            {
              "name": "LeaderSet",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on setting the group leader.",
                " Params:",
                " - Group worker id."
              ]
            },
            {
              "name": "WorkerRoleAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the role account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Role account id of the worker."
              ]
            },
            {
              "name": "LeaderUnset",
              "args": [],
              "docs": [
                " Emits on un-setting the leader."
              ]
            },
            {
              "name": "WorkerExited",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on exiting the worker.",
                " Params:",
                " - worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "WorkerStartedLeaving",
              "args": [
                "WorkerId",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits when worker started leaving their role.",
                " Params:",
                " - Worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedWorker",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the worker.",
                " Params:",
                " - worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedLeader",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the leader.",
                " Params:",
                " - leader worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeSlashed",
              "args": [
                "WorkerId",
                "Balance",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on slashing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - actual slashed balance.",
                " - Requested slashed balance.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeDecreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on decreasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "StakeIncreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on increasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "ApplicationWithdrawn",
              "args": [
                "ApplicationId"
              ],
              "docs": [
                " Emits on withdrawing the application for the regular worker/lead opening.",
                " Params:",
                " - Job application id"
              ]
            },
            {
              "name": "OpeningCanceled",
              "args": [
                "OpeningId"
              ],
              "docs": [
                " Emits on canceling the job opening.",
                " Params:",
                " - Opening id"
              ]
            },
            {
              "name": "BudgetSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on setting the budget for the working group.",
                " Params:",
                " - new budget"
              ]
            },
            {
              "name": "WorkerRewardAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the reward account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward account id of the worker."
              ]
            },
            {
              "name": "WorkerRewardAmountUpdated",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on updating the reward amount of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward per block"
              ]
            },
            {
              "name": "StatusTextChanged",
              "args": [
                "Bytes",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on updating the status text of the working group.",
                " Params:",
                " - status text hash",
                " - status text"
              ]
            },
            {
              "name": "BudgetSpending",
              "args": [
                "AccountId",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on budget from the working group being spent",
                " Params:",
                " - Receiver Account Id.",
                " - Balance spent.",
                " - Rationale."
              ]
            },
            {
              "name": "RewardPaid",
              "args": [
                "WorkerId",
                "AccountId",
                "Balance",
                "RewardPaymentType"
              ],
              "docs": [
                " Emits on paying the reward.",
                " Params:",
                " - Id of the worker.",
                " - Receiver Account Id.",
                " - Reward",
                " - Payment type (missed reward or regular one)"
              ]
            },
            {
              "name": "NewMissedRewardLevelReached",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on reaching new missed reward.",
                " Params:",
                " - Worker ID.",
                " - Missed reward (optional). None means 'no missed reward'."
              ]
            },
            {
              "name": "WorkerStorageUpdated",
              "args": [
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on updating the worker storage role.",
                " Params:",
                " - Id of the worker.",
                " - Raw storage field."
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxWorkerNumberLimit",
              "type": "u32",
              "value": "0x64000000",
              "docs": [
                " Exports const",
                " Max simultaneous active worker number."
              ]
            },
            {
              "name": "MinUnstakingPeriodLimit",
              "type": "BlockNumber",
              "value": "0xc0a80000",
              "docs": [
                " Defines min unstaking period in the group."
              ]
            },
            {
              "name": "MinimumApplicationStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Minimum stake required for applying into an opening."
              ]
            },
            {
              "name": "LeaderOpeningStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Stake needed to create an opening."
              ]
            },
            {
              "name": "RewardPeriod",
              "type": "u32",
              "value": "0x7c380000",
              "docs": [
                " Defines the period every worker gets paid in blocks."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0d0d0d0d0d0d0d0d",
              "docs": [
                " Staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "StakeBalanceCannotBeZero",
              "docs": [
                " Provided stake balance cannot be zero."
              ]
            },
            {
              "name": "OpeningDoesNotExist",
              "docs": [
                " Opening does not exist."
              ]
            },
            {
              "name": "CannotHireMultipleLeaders",
              "docs": [
                " Cannot fill opening with multiple applications."
              ]
            },
            {
              "name": "WorkerApplicationDoesNotExist",
              "docs": [
                " Worker application does not exist."
              ]
            },
            {
              "name": "MaxActiveWorkerNumberExceeded",
              "docs": [
                " Working group size limit exceeded."
              ]
            },
            {
              "name": "SuccessfulWorkerApplicationDoesNotExist",
              "docs": [
                " Successful worker application does not exist."
              ]
            },
            {
              "name": "CannotHireLeaderWhenLeaderExists",
              "docs": [
                " There is leader already, cannot hire another one."
              ]
            },
            {
              "name": "IsNotLeadAccount",
              "docs": [
                " Not a lead account."
              ]
            },
            {
              "name": "CurrentLeadNotSet",
              "docs": [
                " Current lead is not set."
              ]
            },
            {
              "name": "WorkerDoesNotExist",
              "docs": [
                " Worker does not exist."
              ]
            },
            {
              "name": "InvalidMemberOrigin",
              "docs": [
                " Invalid origin for a member."
              ]
            },
            {
              "name": "SignerIsNotWorkerRoleAccount",
              "docs": [
                " Signer is not worker role account."
              ]
            },
            {
              "name": "BelowMinimumStakes",
              "docs": [
                " Staking less than the lower bound."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            },
            {
              "name": "ApplicationStakeDoesntMatchOpening",
              "docs": [
                " Application stake is less than required opening stake."
              ]
            },
            {
              "name": "OriginIsNotApplicant",
              "docs": [
                " Origin is not applicant."
              ]
            },
            {
              "name": "WorkerIsLeaving",
              "docs": [
                " Invalid operation - worker is leaving."
              ]
            },
            {
              "name": "CannotRewardWithZero",
              "docs": [
                " Reward could not be zero."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "WorkerHasNoReward",
              "docs": [
                " Worker has no recurring reward."
              ]
            },
            {
              "name": "UnstakingPeriodLessThanMinimum",
              "docs": [
                " Specified unstaking period is less then minimum set for the group."
              ]
            },
            {
              "name": "CannotSpendZero",
              "docs": [
                " Invalid spending amount."
              ]
            },
            {
              "name": "InsufficientBudgetForSpending",
              "docs": [
                " It's not enough budget for this spending."
              ]
            },
            {
              "name": "NoApplicationsProvided",
              "docs": [
                " Cannot fill opening - no applications provided."
              ]
            },
            {
              "name": "CannotDecreaseStakeDeltaGreaterThanStake",
              "docs": [
                " Cannot decrease stake - stake delta greater than initial stake."
              ]
            },
            {
              "name": "ApplicationsNotForOpening",
              "docs": [
                " Trying to fill opening with an application for other opening"
              ]
            },
            {
              "name": "WorkerStorageValueTooLong",
              "docs": [
                " Worker storage text is too long."
              ]
            }
          ],
          "index": 40
        },
        {
          "name": "OperationsWorkingGroupGamma",
          "storage": {
            "prefix": "Instance9WorkingGroup",
            "items": [
              {
                "name": "NextOpeningId",
                "modifier": "Default",
                "type": {
                  "plain": "OpeningId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new job opening."
                ]
              },
              {
                "name": "OpeningById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "OpeningId",
                    "value": "Opening",
                    "linked": false
                  }
                },
                "fallback": "0x01000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to job opening."
                ]
              },
              {
                "name": "ActiveWorkerCount",
                "modifier": "Default",
                "type": {
                  "plain": "u32"
                },
                "fallback": "0x00000000",
                "docs": [
                  " Count of active workers."
                ]
              },
              {
                "name": "ApplicationById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "ApplicationId",
                    "value": "Application",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to worker application on opening."
                ]
              },
              {
                "name": "NextApplicationId",
                "modifier": "Default",
                "type": {
                  "plain": "ApplicationId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier value for new worker application."
                ]
              },
              {
                "name": "NextWorkerId",
                "modifier": "Default",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x0000000000000000",
                "docs": [
                  " Next identifier for a new worker."
                ]
              },
              {
                "name": "WorkerById",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Worker",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": [
                  " Maps identifier to corresponding worker."
                ]
              },
              {
                "name": "CurrentLead",
                "modifier": "Optional",
                "type": {
                  "plain": "WorkerId"
                },
                "fallback": "0x00",
                "docs": [
                  " Current group lead."
                ]
              },
              {
                "name": "Budget",
                "modifier": "Default",
                "type": {
                  "plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": [
                  " Budget for the working group."
                ]
              },
              {
                "name": "StatusTextHash",
                "modifier": "Default",
                "type": {
                  "plain": "Bytes"
                },
                "fallback": "0x00",
                "docs": [
                  " Status text hash."
                ]
              },
              {
                "name": "WorkerStorage",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": "WorkerId",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "docs": [
                  " Maps identifier to corresponding worker storage."
                ]
              },
              {
                "name": "WorkerStorageSize",
                "modifier": "Default",
                "type": {
                  "plain": "u16"
                },
                "fallback": "0x0008",
                "docs": [
                  " Worker storage size upper bound."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_opening",
              "args": [
                {
                  "name": "description",
                  "type": "Bytes"
                },
                {
                  "name": "opening_type",
                  "type": "OpeningType"
                },
                {
                  "name": "stake_policy",
                  "type": "StakePolicy"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Add a job opening for a regular worker/lead role.",
                " Require signed leader origin or the root (to add opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "apply_on_opening",
              "args": [
                {
                  "name": "p",
                  "type": "ApplyOnOpeningParameters"
                }
              ],
              "docs": [
                " Apply on a worker opening.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (D)` where:",
                " - `D` is the length of `p.description`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "fill_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                },
                {
                  "name": "successful_application_ids",
                  "type": "BTreeSet<ApplicationId>"
                }
              ],
              "docs": [
                " Fill opening for the regular/lead position.",
                " Require signed leader origin or the root (to fill opening for the leader position).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (A)` where:",
                " - `A` is the length of `successful_application_ids`",
                " - DB:",
                "    - O(A)",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_role_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the associated role account of the active regular worker/lead.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "leave_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Leave the role by the active worker.",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "terminate_role",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "Option<BalanceOf>"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Terminate the active worker by the lead.",
                " Requires signed leader origin or the root (to terminate the leader role).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penalty.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "slash_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "penalty",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Slashes the regular worker stake, demands a leader origin. No limits, no actions on zero stake.",
                " If slashing balance greater than the existing stake - stake is slashed to zero.",
                " Requires signed leader origin or the root (to slash the leader stake).",
                " # <weight>",
                "",
                " ## Weight",
                " `O (P)` where:",
                " - `P` is the length of `penality.slashing_text`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "decrease_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Decreases the regular worker/lead stake and returns the remainder to the",
                " worker staking_account_id. Can be decreased to zero, no actions on zero stake.",
                " Accepts the stake amount to decrease.",
                " Requires signed leader origin or the root (to decrease the leader stake).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "increase_stake",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "stake_balance_delta",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Increases the regular worker/lead stake, demands a worker origin.",
                " Locks tokens from the worker staking_account_id equal to new stake. No limits on the stake.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "withdraw_application",
              "args": [
                {
                  "name": "application_id",
                  "type": "ApplicationId"
                }
              ],
              "docs": [
                " Withdraw the worker application. Can be done by the worker only.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_opening",
              "args": [
                {
                  "name": "opening_id",
                  "type": "OpeningId"
                }
              ],
              "docs": [
                " Cancel an opening for the regular worker/lead position.",
                " Require signed leader origin or the root (to cancel opening for the leader position).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_budget",
              "args": [
                {
                  "name": "new_budget",
                  "type": "BalanceOf"
                }
              ],
              "docs": [
                " Sets a new budget for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_account",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "new_reward_account_id",
                  "type": "AccountId"
                }
              ],
              "docs": [
                " Update the reward account associated with a set reward relationship for the active worker.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_reward_amount",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "reward_per_block",
                  "type": "Option<BalanceOf>"
                }
              ],
              "docs": [
                " Update the reward per block for the active worker.",
                " Require signed leader origin or the root (to update leader's reward amount).",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "set_status_text",
              "args": [
                {
                  "name": "status_text",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Sets a new status text for the working group.",
                " Requires root origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (S)` where:",
                " - `S` is the length of the contents of `status_text` when it is not none",
                "",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "spend_from_budget",
              "args": [
                {
                  "name": "account_id",
                  "type": "AccountId"
                },
                {
                  "name": "amount",
                  "type": "BalanceOf"
                },
                {
                  "name": "rationale",
                  "type": "Option<Bytes>"
                }
              ],
              "docs": [
                " Transfers specified amount to any account.",
                " Requires leader origin.",
                "",
                " # <weight>",
                "",
                " ## Weight",
                " `O (1)`",
                " - DB:",
                "    - O(1) doesn't depend on the state or parameters",
                " # </weight>"
              ]
            },
            {
              "name": "update_role_storage",
              "args": [
                {
                  "name": "worker_id",
                  "type": "WorkerId"
                },
                {
                  "name": "storage",
                  "type": "Bytes"
                }
              ],
              "docs": [
                " Update the associated role storage."
              ]
            }
          ],
          "events": [
            {
              "name": "OpeningAdded",
              "args": [
                "OpeningId",
                "Bytes",
                "OpeningType",
                "StakePolicy",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on adding new job opening.",
                " Params:",
                " - Opening id",
                " - Description",
                " - Opening Type(Lead or Worker)",
                " - Stake Policy for the opening",
                " - Reward per block"
              ]
            },
            {
              "name": "AppliedOnOpening",
              "args": [
                "ApplyOnOpeningParameters",
                "ApplicationId"
              ],
              "docs": [
                " Emits on adding the application for the worker opening.",
                " Params:",
                " - Opening parameteres",
                " - Application id"
              ]
            },
            {
              "name": "OpeningFilled",
              "args": [
                "OpeningId",
                "ApplicationIdToWorkerIdMap",
                "BTreeSet<ApplicationId>"
              ],
              "docs": [
                " Emits on filling the job opening.",
                " Params:",
                " - Worker opening id",
                " - Worker application id to the worker id dictionary",
                " - Applicationd ids used to fill the opening"
              ]
            },
            {
              "name": "LeaderSet",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on setting the group leader.",
                " Params:",
                " - Group worker id."
              ]
            },
            {
              "name": "WorkerRoleAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the role account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Role account id of the worker."
              ]
            },
            {
              "name": "LeaderUnset",
              "args": [],
              "docs": [
                " Emits on un-setting the leader."
              ]
            },
            {
              "name": "WorkerExited",
              "args": [
                "WorkerId"
              ],
              "docs": [
                " Emits on exiting the worker.",
                " Params:",
                " - worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "WorkerStartedLeaving",
              "args": [
                "WorkerId",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits when worker started leaving their role.",
                " Params:",
                " - Worker id.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedWorker",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the worker.",
                " Params:",
                " - worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "TerminatedLeader",
              "args": [
                "WorkerId",
                "Option<Balance>",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on terminating the leader.",
                " Params:",
                " - leader worker id.",
                " - Penalty.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeSlashed",
              "args": [
                "WorkerId",
                "Balance",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on slashing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - actual slashed balance.",
                " - Requested slashed balance.",
                " - Rationale."
              ]
            },
            {
              "name": "StakeDecreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on decreasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "StakeIncreased",
              "args": [
                "WorkerId",
                "Balance"
              ],
              "docs": [
                " Emits on increasing the regular worker/lead stake.",
                " Params:",
                " - regular worker/lead id.",
                " - stake delta amount"
              ]
            },
            {
              "name": "ApplicationWithdrawn",
              "args": [
                "ApplicationId"
              ],
              "docs": [
                " Emits on withdrawing the application for the regular worker/lead opening.",
                " Params:",
                " - Job application id"
              ]
            },
            {
              "name": "OpeningCanceled",
              "args": [
                "OpeningId"
              ],
              "docs": [
                " Emits on canceling the job opening.",
                " Params:",
                " - Opening id"
              ]
            },
            {
              "name": "BudgetSet",
              "args": [
                "Balance"
              ],
              "docs": [
                " Emits on setting the budget for the working group.",
                " Params:",
                " - new budget"
              ]
            },
            {
              "name": "WorkerRewardAccountUpdated",
              "args": [
                "WorkerId",
                "AccountId"
              ],
              "docs": [
                " Emits on updating the reward account of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward account id of the worker."
              ]
            },
            {
              "name": "WorkerRewardAmountUpdated",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on updating the reward amount of the worker.",
                " Params:",
                " - Id of the worker.",
                " - Reward per block"
              ]
            },
            {
              "name": "StatusTextChanged",
              "args": [
                "Bytes",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on updating the status text of the working group.",
                " Params:",
                " - status text hash",
                " - status text"
              ]
            },
            {
              "name": "BudgetSpending",
              "args": [
                "AccountId",
                "Balance",
                "Option<Bytes>"
              ],
              "docs": [
                " Emits on budget from the working group being spent",
                " Params:",
                " - Receiver Account Id.",
                " - Balance spent.",
                " - Rationale."
              ]
            },
            {
              "name": "RewardPaid",
              "args": [
                "WorkerId",
                "AccountId",
                "Balance",
                "RewardPaymentType"
              ],
              "docs": [
                " Emits on paying the reward.",
                " Params:",
                " - Id of the worker.",
                " - Receiver Account Id.",
                " - Reward",
                " - Payment type (missed reward or regular one)"
              ]
            },
            {
              "name": "NewMissedRewardLevelReached",
              "args": [
                "WorkerId",
                "Option<Balance>"
              ],
              "docs": [
                " Emits on reaching new missed reward.",
                " Params:",
                " - Worker ID.",
                " - Missed reward (optional). None means 'no missed reward'."
              ]
            },
            {
              "name": "WorkerStorageUpdated",
              "args": [
                "WorkerId",
                "Bytes"
              ],
              "docs": [
                " Emits on updating the worker storage role.",
                " Params:",
                " - Id of the worker.",
                " - Raw storage field."
              ]
            }
          ],
          "constants": [
            {
              "name": "MaxWorkerNumberLimit",
              "type": "u32",
              "value": "0x64000000",
              "docs": [
                " Exports const",
                " Max simultaneous active worker number."
              ]
            },
            {
              "name": "MinUnstakingPeriodLimit",
              "type": "BlockNumber",
              "value": "0xc0a80000",
              "docs": [
                " Defines min unstaking period in the group."
              ]
            },
            {
              "name": "MinimumApplicationStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Minimum stake required for applying into an opening."
              ]
            },
            {
              "name": "LeaderOpeningStake",
              "type": "Balance",
              "value": "0xd0070000000000000000000000000000",
              "docs": [
                " Stake needed to create an opening."
              ]
            },
            {
              "name": "RewardPeriod",
              "type": "u32",
              "value": "0x7c380000",
              "docs": [
                " Defines the period every worker gets paid in blocks."
              ]
            },
            {
              "name": "StakingHandlerLockId",
              "type": "LockIdentifier",
              "value": "0x0d0d0d0d0d0d0d0d",
              "docs": [
                " Staking handler lock id."
              ]
            }
          ],
          "errors": [
            {
              "name": "StakeBalanceCannotBeZero",
              "docs": [
                " Provided stake balance cannot be zero."
              ]
            },
            {
              "name": "OpeningDoesNotExist",
              "docs": [
                " Opening does not exist."
              ]
            },
            {
              "name": "CannotHireMultipleLeaders",
              "docs": [
                " Cannot fill opening with multiple applications."
              ]
            },
            {
              "name": "WorkerApplicationDoesNotExist",
              "docs": [
                " Worker application does not exist."
              ]
            },
            {
              "name": "MaxActiveWorkerNumberExceeded",
              "docs": [
                " Working group size limit exceeded."
              ]
            },
            {
              "name": "SuccessfulWorkerApplicationDoesNotExist",
              "docs": [
                " Successful worker application does not exist."
              ]
            },
            {
              "name": "CannotHireLeaderWhenLeaderExists",
              "docs": [
                " There is leader already, cannot hire another one."
              ]
            },
            {
              "name": "IsNotLeadAccount",
              "docs": [
                " Not a lead account."
              ]
            },
            {
              "name": "CurrentLeadNotSet",
              "docs": [
                " Current lead is not set."
              ]
            },
            {
              "name": "WorkerDoesNotExist",
              "docs": [
                " Worker does not exist."
              ]
            },
            {
              "name": "InvalidMemberOrigin",
              "docs": [
                " Invalid origin for a member."
              ]
            },
            {
              "name": "SignerIsNotWorkerRoleAccount",
              "docs": [
                " Signer is not worker role account."
              ]
            },
            {
              "name": "BelowMinimumStakes",
              "docs": [
                " Staking less than the lower bound."
              ]
            },
            {
              "name": "InsufficientBalanceToCoverStake",
              "docs": [
                " Insufficient balance to cover stake."
              ]
            },
            {
              "name": "ApplicationStakeDoesntMatchOpening",
              "docs": [
                " Application stake is less than required opening stake."
              ]
            },
            {
              "name": "OriginIsNotApplicant",
              "docs": [
                " Origin is not applicant."
              ]
            },
            {
              "name": "WorkerIsLeaving",
              "docs": [
                " Invalid operation - worker is leaving."
              ]
            },
            {
              "name": "CannotRewardWithZero",
              "docs": [
                " Reward could not be zero."
              ]
            },
            {
              "name": "InvalidStakingAccountForMember",
              "docs": [
                " Staking account doesn't belong to a member."
              ]
            },
            {
              "name": "ConflictStakesOnAccount",
              "docs": [
                " Staking account contains conflicting stakes."
              ]
            },
            {
              "name": "WorkerHasNoReward",
              "docs": [
                " Worker has no recurring reward."
              ]
            },
            {
              "name": "UnstakingPeriodLessThanMinimum",
              "docs": [
                " Specified unstaking period is less then minimum set for the group."
              ]
            },
            {
              "name": "CannotSpendZero",
              "docs": [
                " Invalid spending amount."
              ]
            },
            {
              "name": "InsufficientBudgetForSpending",
              "docs": [
                " It's not enough budget for this spending."
              ]
            },
            {
              "name": "NoApplicationsProvided",
              "docs": [
                " Cannot fill opening - no applications provided."
              ]
            },
            {
              "name": "CannotDecreaseStakeDeltaGreaterThanStake",
              "docs": [
                " Cannot decrease stake - stake delta greater than initial stake."
              ]
            },
            {
              "name": "ApplicationsNotForOpening",
              "docs": [
                " Trying to fill opening with an application for other opening"
              ]
            },
            {
              "name": "WorkerStorageValueTooLong",
              "docs": [
                " Worker storage text is too long."
              ]
            }
          ],
          "index": 41
        }
      ],
      "extrinsic": {
        "version": 4,
        "signedExtensions": [
          "CheckSpecVersion",
          "CheckTxVersion",
          "CheckGenesis",
          "CheckMortality",
          "CheckNonce",
          "CheckWeight",
          "ChargeTransactionPayment"
        ]
      }
    }
  }
}
